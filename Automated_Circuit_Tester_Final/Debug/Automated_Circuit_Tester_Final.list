
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ac8  0800d6b8  0800d6b8  0000e6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021180  08021180  000231e8  2**0
                  CONTENTS
  4 .ARM          00000008  08021180  08021180  00022180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021188  08021188  000231e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021188  08021188  00022188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802118c  0802118c  0002218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08021190  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c90  200001e8  08021378  000231e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018e78  08021378  00023e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c7f  00000000  00000000  00023218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0c  00000000  00000000  0003ce97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001029  00000000  00000000  00041e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ab  00000000  00000000  00042ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d93c  00000000  00000000  0004856c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56cd  00000000  00000000  00065ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0014b575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  0014b628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00151f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a6  00000000  00000000  00151fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00152187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6a0 	.word	0x0800d6a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d6a0 	.word	0x0800d6a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <send_img+0x8c>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	c407      	stmia	r4!, {r0, r1, r2}
 8000f86:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <send_img+0x90>)
 8000f8a:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000f8c:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	e00e      	b.n	8000fb6 <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800100c <send_img+0x94>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db04      	blt.n	8000fc6 <send_img+0x4e>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dde8      	ble.n	8000f98 <send_img+0x20>
	#else
		#define LOG() do { } while (0)
	#endif

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e00b      	b.n	8000fe4 <send_img+0x6c>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000fcc:	463a      	mov	r2, r7
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	18d1      	adds	r1, r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <send_img+0x98>)
 8000fda:	f008 f8af 	bl	800913c <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	ddf0      	ble.n	8000fcc <send_img+0x54>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 8000ff2:	4906      	ldr	r1, [pc, #24]	@ (800100c <send_img+0x94>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <send_img+0x98>)
 8000ff6:	f008 f8a1 	bl	800913c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800d764 	.word	0x0800d764
 8001008:	20000560 	.word	0x20000560
 800100c:	2000c920 	.word	0x2000c920
 8001010:	20000500 	.word	0x20000500

08001014 <p3>:


void p3(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <p3+0x30>)
 800101a:	f001 f869 	bl	80020f0 <ov7670_snapshot>
		while(!dma_flag)
 800101e:	e002      	b.n	8001026 <p3+0x12>
		{
			HAL_Delay(10);	
 8001020:	200a      	movs	r0, #10
 8001022:	f002 f815 	bl	8003050 <HAL_Delay>
		while(!dma_flag)
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <p3+0x34>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f8      	beq.n	8001020 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <p3+0x38>)
 8001032:	f004 fd58 	bl	8005ae6 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <p3+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 800103c:	f7ff ff9c 	bl	8000f78 <send_img>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000560 	.word	0x20000560
 8001048:	20018ce0 	.word	0x20018ce0
 800104c:	40020400 	.word	0x40020400

08001050 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f929 	bl	80002b0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <print_msg+0x24>)
 8001068:	f008 f868 	bl	800913c <HAL_UART_Transmit>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000500 	.word	0x20000500

08001078 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e00a      	b.n	80010a8 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8001092:	897b      	ldrh	r3, [r7, #10]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f004 fd25 	bl	8005ae6 <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 ffd7 	bl	8003050 <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	3301      	adds	r3, #1
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	7dfa      	ldrb	r2, [r7, #23]
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3f0      	bcc.n	8001092 <flashLED+0x1a>
    }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2234      	movs	r2, #52	@ 0x34
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fe4d 	bl	800ad6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <SystemClock_Config+0xd4>)
 8001106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001120:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	@ 0xa8
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fcfb 	bl	8007b40 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001150:	f000 fb70 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2105      	movs	r1, #5
 8001172:	4618      	mov	r0, r3
 8001174:	f006 f99a 	bl	80074ac <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800117e:	f000 fb59 	bl	8001834 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xa0>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011fa:	f001 ff4d 	bl	8003098 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001204:	f000 fb16 	bl	8001834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0x9c>)
 800121a:	f001 ff81 	bl	8003120 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001224:	f000 fb06 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000228 	.word	0x20000228
 8001234:	40012000 	.word	0x40012000

08001238 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_DCMI_Init+0x60>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_DCMI_Init+0x64>)
 8001240:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_DCMI_Init+0x60>)
 800124a:	2220      	movs	r2, #32
 800124c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_DCMI_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_DCMI_Init+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_DCMI_Init+0x60>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001286:	f002 fc7d 	bl	8003b84 <HAL_DCMI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fad0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002d0 	.word	0x200002d0
 800129c:	50050000 	.word	0x50050000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f004 fc41 	bl	8005b64 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 faa4 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000380 	.word	0x20000380
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C2_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C2_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C2_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C2_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C2_Init+0x50>)
 800133a:	f004 fc13 	bl	8005b64 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa76 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003d4 	.word	0x200003d4
 8001350:	40005800 	.word	0x40005800
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	@ 0x48
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 fcf1 	bl	800ad6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800138a:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <MX_TIM1_Init+0x100>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800139a:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800139c:	2214      	movs	r2, #20
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	4828      	ldr	r0, [pc, #160]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013b4:	f006 feb1 	bl	800811a <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fa39 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013d2:	f007 fd81 	bl	8008ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80013dc:	f000 fa2a 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 80013e4:	230a      	movs	r3, #10
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001406:	f007 f88f 	bl	8008528 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001410:	f000 fa10 	bl	8001834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001438:	f007 fdca 	bl	8008fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001442:	f000 f9f7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001448:	f001 fb96 	bl	8002b78 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3748      	adds	r7, #72	@ 0x48
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000428 	.word	0x20000428
 8001458:	40010000 	.word	0x40010000

0800145c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800148e:	2253      	movs	r2, #83	@ 0x53
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014a0:	f006 fdec 	bl	800807c <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 f9c3 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014bc:	f007 f8f6 	bl	80086ac <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f9b5 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014d8:	f007 fcfe 	bl	8008ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 f9a7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000470 	.word	0x20000470

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001524:	f006 fdaa 	bl	800807c <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800152e:	f000 f981 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001540:	f007 fcca 	bl	8008ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800154a:	f000 f973 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004b8 	.word	0x200004b8
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <MX_USART3_UART_Init+0x60>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001598:	f007 fd80 	bl	800909c <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f947 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000500 	.word	0x20000500
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2038      	movs	r0, #56	@ 0x38
 80015fc:	f002 f899 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	@ 0x38
 8001602:	f002 f8b2 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2039      	movs	r0, #57	@ 0x39
 800160c:	f002 f891 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001610:	2039      	movs	r0, #57	@ 0x39
 8001612:	f002 f8aa 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b77      	ldr	r3, [pc, #476]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a76      	ldr	r2, [pc, #472]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b69      	ldr	r3, [pc, #420]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a68      	ldr	r2, [pc, #416]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b66      	ldr	r3, [pc, #408]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b62      	ldr	r3, [pc, #392]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a61      	ldr	r2, [pc, #388]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a53      	ldr	r2, [pc, #332]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b51      	ldr	r3, [pc, #324]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a45      	ldr	r2, [pc, #276]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001720:	483f      	ldr	r0, [pc, #252]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001722:	f004 f9c7 	bl	8005ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800172c:	483d      	ldr	r0, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x200>)
 800172e:	f004 f9c1 	bl	8005ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <MX_GPIO_Init+0x204>)
 8001738:	f004 f9bc 	bl	8005ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4836      	ldr	r0, [pc, #216]	@ (800182c <MX_GPIO_Init+0x208>)
 8001754:	f004 f81a 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001758:	f244 0381 	movw	r3, #16513	@ 0x4081
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	482b      	ldr	r0, [pc, #172]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001772:	f004 f80b 	bl	800578c <HAL_GPIO_Init>


  //MOTOR PINS
  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001776:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	@ (8001824 <MX_GPIO_Init+0x200>)
 8001790:	f003 fffc 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481f      	ldr	r0, [pc, #124]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017ac:	f003 ffee 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017c4:	f003 ffe2 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017da:	230a      	movs	r3, #10
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <MX_GPIO_Init+0x20c>)
 80017e6:	f003 ffd1 	bl	800578c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_GPIO_Init+0x20c>)
 8001800:	f003 ffc4 	bl	800578c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2028      	movs	r0, #40	@ 0x28
 800180a:	f001 ff92 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180e:	2028      	movs	r0, #40	@ 0x28
 8001810:	f001 ffab 	bl	800376a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

    if (!(huart->Instance == USART3)) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_UART_RxCpltCallback+0xbc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d14f      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0xb2>
        return; // Not from USART3, ignore
    }

    switch (state) {
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_UART_RxCpltCallback+0x20>
 800185a:	2b03      	cmp	r3, #3
 800185c:	d02b      	beq.n	80018b6 <HAL_UART_RxCpltCallback+0x76>
 800185e:	e03c      	b.n	80018da <HAL_UART_RxCpltCallback+0x9a>
        case STATE_LISTEN:
            if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001860:	4928      	ldr	r1, [pc, #160]	@ (8001904 <HAL_UART_RxCpltCallback+0xc4>)
 8001862:	4829      	ldr	r0, [pc, #164]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001864:	f000 f8f9 	bl	8001a5a <match_command>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_UART_RxCpltCallback+0x36>
                ptr_state = State_Picture; //next state 
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001870:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <HAL_UART_RxCpltCallback+0xd0>)
 8001872:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
            } else {

                ptr_state = State_Listen;
            }
            break;
 8001874:	e03e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_COORDS)) {
 8001876:	4927      	ldr	r1, [pc, #156]	@ (8001914 <HAL_UART_RxCpltCallback+0xd4>)
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 800187a:	f000 f8ee 	bl	8001a5a <match_command>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_UART_RxCpltCallback+0x4c>
                ptr_state = State_Coord_RX;
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_UART_RxCpltCallback+0xd8>)
 8001888:	601a      	str	r2, [r3, #0]
            break;
 800188a:	e033      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 800188c:	4923      	ldr	r1, [pc, #140]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 800188e:	481e      	ldr	r0, [pc, #120]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001890:	f000 f8e3 	bl	8001a5a <match_command>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_UART_RxCpltCallback+0x6e>
                ptr_state = State_ADC_FFT;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <HAL_UART_RxCpltCallback+0xe0>)
 800189e:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	2208      	movs	r2, #8
 80018a4:	491d      	ldr	r1, [pc, #116]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 80018a6:	481f      	ldr	r0, [pc, #124]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018a8:	f007 fc48 	bl	800913c <HAL_UART_Transmit>
            break;
 80018ac:	e022      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
                ptr_state = State_Listen;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018b2:	601a      	str	r2, [r3, #0]
            break;
 80018b4:	e01e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        case STATE_COORDS:
        	
            memcpy(&posX, &rx_data_arr[0], 4);
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <HAL_UART_RxCpltCallback+0xec>)
 80018bc:	6013      	str	r3, [r2, #0]
            memcpy(&posY, &rx_data_arr[4], 4);
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_UART_RxCpltCallback+0xf0>)
 80018c4:	6013      	str	r3, [r2, #0]
            ptr_state = State_Motors;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_UART_RxCpltCallback+0xf4>)
 80018ca:	601a      	str	r2, [r3, #0]
//            posY = 1.0;
//
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posX, 4, 100);
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posY, 4, 100);

            HAL_UART_Transmit(&huart3, rx_data_arr, 8, 100); //return received coords
 80018cc:	2364      	movs	r3, #100	@ 0x64
 80018ce:	2208      	movs	r2, #8
 80018d0:	490d      	ldr	r1, [pc, #52]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018d4:	f007 fc32 	bl	800913c <HAL_UART_Transmit>
            break;
 80018d8:	e00c      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        default:
            // Unexpected state in UART callback
        	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80018da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018de:	4816      	ldr	r0, [pc, #88]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018e0:	f004 f901 	bl	8005ae6 <HAL_GPIO_TogglePin>
            state = STATE_LISTEN;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Listen;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018ee:	601a      	str	r2, [r3, #0]
            break;
 80018f0:	e000      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
        return; // Not from USART3, ignore
 80018f2:	bf00      	nop
    }
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004800 	.word	0x40004800
 8001900:	20018ce8 	.word	0x20018ce8
 8001904:	0800d830 	.word	0x0800d830
 8001908:	20000204 	.word	0x20000204
 800190c:	20018ce4 	.word	0x20018ce4
 8001910:	0800196d 	.word	0x0800196d
 8001914:	0800d848 	.word	0x0800d848
 8001918:	080019a5 	.word	0x080019a5
 800191c:	0800d83c 	.word	0x0800d83c
 8001920:	08001a4d 	.word	0x08001a4d
 8001924:	20000500 	.word	0x20000500
 8001928:	0800193d 	.word	0x0800193d
 800192c:	20000220 	.word	0x20000220
 8001930:	20000224 	.word	0x20000224
 8001934:	080019e5 	.word	0x080019e5
 8001938:	40020400 	.word	0x40020400

0800193c <State_Listen>:

void State_Listen(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    state = STATE_LISTEN;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <State_Listen+0x20>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <State_Listen+0x24>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    //flashLED(LD1_GPIO_Port, LD1_Pin, 100, 5);
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 800194c:	2208      	movs	r2, #8
 800194e:	4905      	ldr	r1, [pc, #20]	@ (8001964 <State_Listen+0x28>)
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <State_Listen+0x2c>)
 8001952:	f007 fc7e 	bl	8009252 <HAL_UART_Receive_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20018ce8 	.word	0x20018ce8
 8001960:	20018ce4 	.word	0x20018ce4
 8001964:	20000204 	.word	0x20000204
 8001968:	20000500 	.word	0x20000500

0800196c <State_Picture>:

void State_Picture(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack state entry
 8001970:	2364      	movs	r3, #100	@ 0x64
 8001972:	2208      	movs	r2, #8
 8001974:	4906      	ldr	r1, [pc, #24]	@ (8001990 <State_Picture+0x24>)
 8001976:	4807      	ldr	r0, [pc, #28]	@ (8001994 <State_Picture+0x28>)
 8001978:	f007 fbe0 	bl	800913c <HAL_UART_Transmit>
    state = STATE_TAKEPIC;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <State_Picture+0x2c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    p3();
 8001982:	f7ff fb47 	bl	8001014 <p3>
    ptr_state = State_Listen;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <State_Picture+0x30>)
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <State_Picture+0x34>)
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0800d830 	.word	0x0800d830
 8001994:	20000500 	.word	0x20000500
 8001998:	20018ce8 	.word	0x20018ce8
 800199c:	20018ce4 	.word	0x20018ce4
 80019a0:	0800193d 	.word	0x0800193d

080019a4 <State_Coord_RX>:

void State_Coord_RX(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    state = STATE_COORDS;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <State_Coord_RX+0x2c>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <State_Coord_RX+0x30>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 80019b4:	2208      	movs	r2, #8
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <State_Coord_RX+0x34>)
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <State_Coord_RX+0x38>)
 80019ba:	f007 fc4a 	bl	8009252 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100); //ack ready for coords
 80019be:	2364      	movs	r3, #100	@ 0x64
 80019c0:	2208      	movs	r2, #8
 80019c2:	4907      	ldr	r1, [pc, #28]	@ (80019e0 <State_Coord_RX+0x3c>)
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <State_Coord_RX+0x38>)
 80019c6:	f007 fbb9 	bl	800913c <HAL_UART_Transmit>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20018ce8 	.word	0x20018ce8
 80019d4:	20018ce4 	.word	0x20018ce4
 80019d8:	20000204 	.word	0x20000204
 80019dc:	20000500 	.word	0x20000500
 80019e0:	0800d848 	.word	0x0800d848

080019e4 <State_Motors>:

void State_Motors(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
    state = STATE_MOTORS;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <State_Motors+0x50>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	701a      	strb	r2, [r3, #0]
    init_home(&myProbe);
 80019f0:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <State_Motors+0x54>)
 80019f2:	f000 fa8d 	bl	8001f10 <init_home>
    Position test = {posX, posY, 0.0};
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <State_Motors+0x58>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <State_Motors+0x5c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
    moveProbe_test(&myProbe, test);
 8001a08:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	eeb0 0a66 	vmov.f32	s0, s13
 8001a18:	eef0 0a47 	vmov.f32	s1, s14
 8001a1c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <State_Motors+0x54>)
 8001a22:	f000 fa21 	bl	8001e68 <moveProbe_test>
    ptr_state = State_Listen;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <State_Motors+0x60>)
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <State_Motors+0x64>)
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20018ce8 	.word	0x20018ce8
 8001a38:	20018cec 	.word	0x20018cec
 8001a3c:	20000220 	.word	0x20000220
 8001a40:	20000224 	.word	0x20000224
 8001a44:	20018ce4 	.word	0x20018ce4
 8001a48:	0800193d 	.word	0x0800193d

08001a4c <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    ptr_state = NULL;
}


void State_ADC_FFT(void){
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
    //         sendADC_UART();
    //         sendFFT_UART();
    //     }
    // }
    // ptr_state = State_Listen;
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001a64:	2208      	movs	r2, #8
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f009 f96e 	bl	800ad4a <memcmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <main>:

const Position HOME = {6.0, 6.0, 12.2};
	

int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_Init();
 8001a88:	f001 fa70 	bl	8002f6c <HAL_Init>
  	SystemClock_Config();
 8001a8c:	f7ff fb16 	bl	80010bc <SystemClock_Config>
	MX_GPIO_Init();
 8001a90:	f7ff fdc8 	bl	8001624 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a94:	f7ff fd9e 	bl	80015d4 <MX_DMA_Init>
	MX_DCMI_Init();
 8001a98:	f7ff fbce 	bl	8001238 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001a9c:	f7ff fd60 	bl	8001560 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001aa0:	f7ff fc2c 	bl	80012fc <MX_I2C2_Init>
	MX_TIM1_Init();
 8001aa4:	f7ff fc58 	bl	8001358 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001aa8:	f7ff fd24 	bl	80014f4 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001aac:	f7ff fb72 	bl	8001194 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ab0:	f7ff fbf6 	bl	80012a0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ab4:	f7ff fcd2 	bl	800145c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001ab8:	f7ff fd84 	bl	80015c4 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001abc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac0:	482a      	ldr	r0, [pc, #168]	@ (8001b6c <main+0xe8>)
 8001ac2:	f008 fb41 	bl	800a148 <arm_rfft_fast_init_f32>


	//init PCA
	PCA9685_Init(50); // 50Hz for servo
 8001ac6:	2032      	movs	r0, #50	@ 0x32
 8001ac8:	f000 fbc2 	bl	8002250 <PCA9685_Init>
	//init probe
	myProbe.lin = &lin;
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <main+0xec>)
 8001ace:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <main+0xf0>)
 8001ad0:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <main+0xec>)
 8001ad4:	4a28      	ldr	r2, [pc, #160]	@ (8001b78 <main+0xf4>)
 8001ad6:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <main+0xec>)
 8001ada:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <main+0xf8>)
 8001adc:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <main+0xec>)
 8001ae0:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <main+0xfc>)
 8001ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <main+0xec>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <main+0xec>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <main+0xec>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <main+0xec>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <main+0xec>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <main+0xec>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = HOME.x;
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <main+0xec>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <main+0x100>)
 8001b26:	605a      	str	r2, [r3, #4]
    myProbe.nema->homeAngle = HOME.x;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <main+0xec>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <main+0x100>)
 8001b2e:	601a      	str	r2, [r3, #0]
	
	ptr_state = State_Listen;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <main+0x104>)
 8001b32:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <main+0x108>)
 8001b34:	601a      	str	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <main+0x10c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <main+0x10c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0210 	orr.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b46:	2039      	movs	r0, #57	@ 0x39
 8001b48:	f001 fe0f 	bl	800376a <HAL_NVIC_EnableIRQ>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4811      	ldr	r0, [pc, #68]	@ (8001b94 <main+0x110>)
 8001b50:	f006 fb32 	bl	80081b8 <HAL_TIM_PWM_Start>
	ov7670_init();
 8001b54:	f000 fa08 	bl	8001f68 <ov7670_init>
	ov7_config();
 8001b58:	f000 fa38 	bl	8001fcc <ov7_config>

	while(1){

		if (ptr_state != NULL) {
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <main+0x104>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0fb      	beq.n	8001b5c <main+0xd8>
            ptr_state();       // Run the state logic
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <main+0x104>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4798      	blx	r3
		if (ptr_state != NULL) {
 8001b6a:	e7f7      	b.n	8001b5c <main+0xd8>
 8001b6c:	20000548 	.word	0x20000548
 8001b70:	20018cec 	.word	0x20018cec
 8001b74:	20018d04 	.word	0x20018d04
 8001b78:	20018d10 	.word	0x20018d10
 8001b7c:	20018d1c 	.word	0x20018d1c
 8001b80:	0800d854 	.word	0x0800d854
 8001b84:	40c00000 	.word	0x40c00000
 8001b88:	20018ce4 	.word	0x20018ce4
 8001b8c:	0800193d 	.word	0x0800193d
 8001b90:	20000320 	.word	0x20000320
 8001b94:	20000428 	.word	0x20000428

08001b98 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, myProbe->lin->homeAngle);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f000 fb91 	bl	80022d8 <setServoAngle>
    myProbe->lin->currAngle = myProbe->rot->homeAngle; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	6852      	ldr	r2, [r2, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001bc2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bc6:	f001 fa43 	bl	8003050 <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, myProbe->rot->homeAngle);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fb7c 	bl	80022d8 <setServoAngle>
    myProbe->rot->currAngle = myProbe->rot->homeAngle; 
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	6852      	ldr	r2, [r2, #4]
 8001bea:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001bec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bf0:	f001 fa2e 	bl	8003050 <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm = -(myProbe->nema->currAngle - HOME.x); // move right
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <home_Align+0xa0>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	eef1 7a67 	vneg.f32	s15, s15
 8001c0a:	edc7 7a03 	vstr	s15, [r7, #12]
    stp_moveDistance((myProbe->nema), move_cm);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd04 	bl	8002624 <stp_moveDistance>
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	605a      	str	r2, [r3, #4]
    HAL_Delay(500); 
 8001c28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c2c:	f001 fa10 	bl	8003050 <HAL_Delay>
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800d854 	.word	0x0800d854

08001c3c <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	eef0 6a40 	vmov.f32	s13, s0
 8001c48:	eeb0 7a60 	vmov.f32	s14, s1
 8001c4c:	eef0 7a41 	vmov.f32	s15, s2
 8001c50:	edc7 6a00 	vstr	s13, [r7]
 8001c54:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c58:	edc7 7a02 	vstr	s15, [r7, #8]
    flashLED(LD1_GPIO_Port, LD1_Pin, 1000, 5);
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c62:	2101      	movs	r1, #1
 8001c64:	4813      	ldr	r0, [pc, #76]	@ (8001cb4 <x_align+0x78>)
 8001c66:	f7ff fa07 	bl	8001078 <flashLED>
    float move_cm = -(HOME.x - desiredLoc.x);
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <x_align+0x7c>)
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	edd7 7a00 	vldr	s15, [r7]
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	eef1 7a67 	vneg.f32	s15, s15
 8001c7c:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	dd01      	ble.n	8001c96 <x_align+0x5a>
        move_cm = X_MAX;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <x_align+0x80>)
 8001c94:	617b      	str	r3, [r7, #20]
    }
    stp_moveDistance(((myProbe->nema)), move_cm);  //edited to hardcode pos
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fcc0 	bl	8002624 <stp_moveDistance>
    myProbe->nema->currAngle = move_cm; 
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	605a      	str	r2, [r3, #4]
}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	0800d854 	.word	0x0800d854
 8001cbc:	41500000 	.word	0x41500000

08001cc0 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	eef0 6a40 	vmov.f32	s13, s0
 8001ccc:	eeb0 7a60 	vmov.f32	s14, s1
 8001cd0:	eef0 7a41 	vmov.f32	s15, s2
 8001cd4:	edc7 6a00 	vstr	s13, [r7]
 8001cd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cdc:	edc7 7a02 	vstr	s15, [r7, #8]
    float theta_rad = atan(fabsf(HOME.y -desiredLoc.y) / H);
 8001ce0:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <theta_align+0xc8>)
 8001ce2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eef0 7ae7 	vabs.f32	s15, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc47 	bl	8000588 <__aeabi_f2d>
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <theta_align+0xcc>)
 8001d00:	f7fe fdc4 	bl	800088c <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	ec43 2b17 	vmov	d7, r2, r3
 8001d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d10:	eef0 0a67 	vmov.f32	s1, s15
 8001d14:	f00b f928 	bl	800cf68 <atan>
 8001d18:	ec53 2b10 	vmov	r2, r3, d0
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff62 	bl	8000be8 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 8001d28:	6938      	ldr	r0, [r7, #16]
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	a314      	add	r3, pc, #80	@ (adr r3, 8001d80 <theta_align+0xc0>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc80 	bl	8000638 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff52 	bl	8000be8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 8001d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d90 <theta_align+0xd0>
 8001d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	dd01      	ble.n	8001d5e <theta_align+0x9e>
        theta_deg = THETA_MAX;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <theta_align+0xd4>)
 8001d5c:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fab6 	bl	80022d8 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	f3af 8000 	nop.w
 8001d80:	1a63c1f8 	.word	0x1a63c1f8
 8001d84:	404ca5dc 	.word	0x404ca5dc
 8001d88:	0800d854 	.word	0x0800d854
 8001d8c:	40290000 	.word	0x40290000
 8001d90:	42080000 	.word	0x42080000
 8001d94:	42080000 	.word	0x42080000

08001d98 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	eef0 6a40 	vmov.f32	s13, s0
 8001da4:	eeb0 7a60 	vmov.f32	s14, s1
 8001da8:	eef0 7a41 	vmov.f32	s15, s2
 8001dac:	edc7 6a00 	vstr	s13, [r7]
 8001db0:	ed87 7a01 	vstr	s14, [r7, #4]
 8001db4:	edc7 7a02 	vstr	s15, [r7, #8]
    float hypotenuse = hypot(H, fabsf(HOME.y - desiredLoc.y));
 8001db8:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <R_align+0xc8>)
 8001dba:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbdb 	bl	8000588 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b11 	vmov	d1, r2, r3
 8001dda:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001e48 <R_align+0xb0>
 8001dde:	f00b f88f 	bl	800cf00 <hypot>
 8001de2:	ec53 2b10 	vmov	r2, r3, d0
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fefd 	bl	8000be8 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]
    float move_cm = hypotenuse - PROBE_LEN;
 8001df2:	6938      	ldr	r0, [r7, #16]
 8001df4:	f7fe fbc8 	bl	8000588 <__aeabi_f2d>
 8001df8:	a315      	add	r3, pc, #84	@ (adr r3, 8001e50 <R_align+0xb8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fa63 	bl	80002c8 <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe feed 	bl	8000be8 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	617b      	str	r3, [r7, #20]
    if(move_cm > DR_MAX){
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7fe fbb8 	bl	8000588 <__aeabi_f2d>
 8001e18:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e58 <R_align+0xc0>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fe9b 	bl	8000b58 <__aeabi_dcmpgt>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <R_align+0x94>
        move_cm = DR_MAX; 
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <R_align+0xcc>)
 8001e2a:	617b      	str	r3, [r7, #20]
    }
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fab7 	bl	80023a8 <sv_moveDistance>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	f3af 8000 	nop.w
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40290000 	.word	0x40290000
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	40289999 	.word	0x40289999
 8001e58:	9999999a 	.word	0x9999999a
 8001e5c:	40059999 	.word	0x40059999
 8001e60:	0800d854 	.word	0x0800d854
 8001e64:	402ccccd 	.word	0x402ccccd

08001e68 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	eef0 6a40 	vmov.f32	s13, s0
 8001e74:	eeb0 7a60 	vmov.f32	s14, s1
 8001e78:	eef0 7a41 	vmov.f32	s15, s2
 8001e7c:	edc7 6a00 	vstr	s13, [r7]
 8001e80:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e84:	edc7 7a02 	vstr	s15, [r7, #8]

    // 1. send home
    home_Align(myProbe);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fe85 	bl	8001b98 <home_Align>

    // 2. align stepper, theta, R in order
    x_align(myProbe, desiredLoc);
 8001e8e:	edd7 6a00 	vldr	s13, [r7]
 8001e92:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e9a:	eeb0 0a66 	vmov.f32	s0, s13
 8001e9e:	eef0 0a47 	vmov.f32	s1, s14
 8001ea2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff fec8 	bl	8001c3c <x_align>
    HAL_Delay(500); 
 8001eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eb0:	f001 f8ce 	bl	8003050 <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8001eb4:	edd7 6a00 	vldr	s13, [r7]
 8001eb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ec4:	eef0 0a47 	vmov.f32	s1, s14
 8001ec8:	eeb0 1a67 	vmov.f32	s2, s15
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fef7 	bl	8001cc0 <theta_align>
    HAL_Delay(500); 
 8001ed2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ed6:	f001 f8bb 	bl	8003050 <HAL_Delay>
    R_align(myProbe, desiredLoc);
 8001eda:	edd7 6a00 	vldr	s13, [r7]
 8001ede:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee6:	eeb0 0a66 	vmov.f32	s0, s13
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 1a67 	vmov.f32	s2, s15
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff ff50 	bl	8001d98 <R_align>
    HAL_Delay(500); 
 8001ef8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001efc:	f001 f8a8 	bl	8003050 <HAL_Delay>

    // 3. wait
    HAL_Delay(3000); 
 8001f00:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f04:	f001 f8a4 	bl	8003050 <HAL_Delay>

    // 4. Align back home
    //home_Align(myProbe);

}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <init_home>:

void init_home(Probe* myProbe){
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    myProbe->nema->homeAngle = HOME.x;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <init_home+0x54>)
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	601a      	str	r2, [r3, #0]
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	605a      	str	r2, [r3, #4]

    myProbe->lin->currAngle = 0; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    myProbe->lin->homeAngle = 0; 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]
    myProbe->rot->currAngle = 0; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
    myProbe->rot->homeAngle = 0; 
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]

}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	0800d854 	.word	0x0800d854

08001f68 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b09a      	sub	sp, #104	@ 0x68
 8001f6c:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8001f6e:	4814      	ldr	r0, [pc, #80]	@ (8001fc0 <ov7670_init+0x58>)
 8001f70:	f7ff f86e 	bl	8001050 <print_msg>
  val = ov7670_read(0x0A);
 8001f74:	200a      	movs	r0, #10
 8001f76:	f000 f875 	bl	8002064 <ov7670_read>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8001f80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f84:	2b76      	cmp	r3, #118	@ 0x76
 8001f86:	d00c      	beq.n	8001fa2 <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8001f88:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	490d      	ldr	r1, [pc, #52]	@ (8001fc4 <ov7670_init+0x5c>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f008 fe77 	bl	800ac84 <siprintf>
    print_msg(msg);
 8001f96:	463b      	mov	r3, r7
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f859 	bl	8001050 <print_msg>
    return 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e009      	b.n	8001fb6 <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <ov7670_init+0x60>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 fe6c 	bl	800ac84 <siprintf>
    print_msg(msg);
 8001fac:	463b      	mov	r3, r7
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f84e 	bl	8001050 <print_msg>

  // Your code here

  //

  return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3768      	adds	r7, #104	@ 0x68
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	0800d780 	.word	0x0800d780
 8001fc4:	0800d78c 	.word	0x0800d78c
 8001fc8:	0800d7a8 	.word	0x0800d7a8

08001fcc <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e037      	b.n	8002048 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <ov7_config+0x8c>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fe0:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <ov7_config+0x8c>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8001fee:	463a      	mov	r2, r7
 8001ff0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	2142      	movs	r1, #66	@ 0x42
 8001ffa:	4818      	ldr	r0, [pc, #96]	@ (800205c <ov7_config+0x90>)
 8001ffc:	f003 fef6 	bl	8005dec <HAL_I2C_Master_Transmit>
 8002000:	4603      	mov	r3, r0
 8002002:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002004:	e017      	b.n	8002036 <ov7_config+0x6a>
			 sprintf(msg, "Error hi\n");
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4915      	ldr	r1, [pc, #84]	@ (8002060 <ov7_config+0x94>)
 800200a:	4618      	mov	r0, r3
 800200c:	f008 fe3a 	bl	800ac84 <siprintf>
       print_msg(msg);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f81c 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 8002018:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800201c:	f001 f818 	bl	8003050 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8002020:	463a      	mov	r2, r7
 8002022:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	2142      	movs	r1, #66	@ 0x42
 800202c:	480b      	ldr	r0, [pc, #44]	@ (800205c <ov7_config+0x90>)
 800202e:	f003 fedd 	bl	8005dec <HAL_I2C_Master_Transmit>
 8002032:	4603      	mov	r3, r0
 8002034:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002036:	7efb      	ldrb	r3, [r7, #27]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e4      	bne.n	8002006 <ov7_config+0x3a>
    }
		HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f001 f807 	bl	8003050 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b79      	cmp	r3, #121	@ 0x79
 800204c:	ddc4      	ble.n	8001fd8 <ov7_config+0xc>
	}
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800d860 	.word	0x0800d860
 800205c:	200003d4 	.word	0x200003d4
 8002060:	0800d808 	.word	0x0800d808

08002064 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8002064:	b580      	push	{r7, lr}
 8002066:	b09e      	sub	sp, #120	@ 0x78
 8002068:	af02      	add	r7, sp, #8
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 800206e:	1dfa      	adds	r2, r7, #7
 8002070:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	2142      	movs	r1, #66	@ 0x42
 800207a:	481b      	ldr	r0, [pc, #108]	@ (80020e8 <ov7670_read+0x84>)
 800207c:	f003 feb6 	bl	8005dec <HAL_I2C_Master_Transmit>
 8002080:	4603      	mov	r3, r0
 8002082:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8002086:	e01a      	b.n	80020be <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	4917      	ldr	r1, [pc, #92]	@ (80020ec <ov7670_read+0x88>)
 800208e:	4618      	mov	r0, r3
 8002090:	f008 fdf8 	bl	800ac84 <siprintf>
       print_msg(msg);
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe ffd9 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 800209e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020a2:	f000 ffd5 	bl	8003050 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 80020a6:	1dfa      	adds	r2, r7, #7
 80020a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2301      	movs	r3, #1
 80020b0:	2142      	movs	r1, #66	@ 0x42
 80020b2:	480d      	ldr	r0, [pc, #52]	@ (80020e8 <ov7670_read+0x84>)
 80020b4:	f003 fe9a 	bl	8005dec <HAL_I2C_Master_Transmit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 80020be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1e0      	bne.n	8002088 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (reADDR_OV7670), &data, 1, HAL_MAX_DELAY);
 80020c6:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	2143      	movs	r1, #67	@ 0x43
 80020d4:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <ov7670_read+0x84>)
 80020d6:	f003 ff87 	bl	8005fe8 <HAL_I2C_Master_Receive>
    return data;
 80020da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3770      	adds	r7, #112	@ 0x70
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200003d4 	.word	0x200003d4
 80020ec:	0800d814 	.word	0x0800d814

080020f0 <ov7670_snapshot>:




void ov7670_snapshot(uint16_t *buff){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09c      	sub	sp, #112	@ 0x70
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 80020f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <ov7670_snapshot+0x44>)
 80020fa:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 80020fe:	2102      	movs	r1, #2
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <ov7670_snapshot+0x48>)
 8002102:	f001 fb4d 	bl	80037a0 <HAL_DCMI_Start_DMA>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 800210c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	4908      	ldr	r1, [pc, #32]	@ (800213c <ov7670_snapshot+0x4c>)
 800211a:	4618      	mov	r0, r3
 800211c:	f008 fdb2 	bl	800ac84 <siprintf>
       print_msg(msg);
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff93 	bl	8001050 <print_msg>
    }
}//goes back to main for waiting for interrupt
 800212a:	bf00      	nop
 800212c:	3770      	adds	r7, #112	@ 0x70
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000560 	.word	0x20000560
 8002138:	200002d0 	.word	0x200002d0
 800213c:	0800d81c 	.word	0x0800d81c

08002140 <PCA9685_SetBit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af04      	add	r7, sp, #16
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	460b      	mov	r3, r1
 800214c:	71bb      	strb	r3, [r7, #6]
 800214e:	4613      	mov	r3, r2
 8002150:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	b29a      	uxth	r2, r3
 8002156:	230a      	movs	r3, #10
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2301      	movs	r3, #1
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f107 030f 	add.w	r3, r7, #15
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	4819      	ldr	r0, [pc, #100]	@ (80021d0 <PCA9685_SetBit+0x90>)
 800216a:	f004 fa69 	bl	8006640 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <PCA9685_SetBit+0x50>
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	2201      	movs	r2, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	b25b      	sxtb	r3, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	b25a      	sxtb	r2, r3
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	4013      	ands	r3, r2
 8002188:	b25b      	sxtb	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e00a      	b.n	80021a6 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8002190:	79bb      	ldrb	r3, [r7, #6]
 8002192:	2201      	movs	r2, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	b25a      	sxtb	r2, r3
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	b25b      	sxtb	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	230a      	movs	r3, #10
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	f107 030f 	add.w	r3, r7, #15
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <PCA9685_SetBit+0x90>)
 80021be:	f004 f945 	bl	800644c <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 ff44 	bl	8003050 <HAL_Delay>
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000380 	.word	0x20000380

080021d4 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af04      	add	r7, sp, #16
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03; // why?
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d902      	bls.n	80021ee <PCA9685_SetPWMFrequency+0x1a>
 80021e8:	2303      	movs	r3, #3
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e00c      	b.n	8002208 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	2b18      	cmp	r3, #24
 80021f2:	d802      	bhi.n	80021fa <PCA9685_SetPWMFrequency+0x26>
 80021f4:	23ff      	movs	r3, #255	@ 0xff
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e006      	b.n	8002208 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	031b      	lsls	r3, r3, #12
 80021fe:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <PCA9685_SetPWMFrequency+0x74>)
 8002200:	fb92 f3f3 	sdiv	r3, r2, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002208:	2201      	movs	r2, #1
 800220a:	2104      	movs	r1, #4
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff ff97 	bl	8002140 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8002212:	230a      	movs	r3, #10
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	f107 030f 	add.w	r3, r7, #15
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	22fe      	movs	r2, #254	@ 0xfe
 8002224:	2180      	movs	r1, #128	@ 0x80
 8002226:	4809      	ldr	r0, [pc, #36]	@ (800224c <PCA9685_SetPWMFrequency+0x78>)
 8002228:	f004 f910 	bl	800644c <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2104      	movs	r1, #4
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff ff85 	bl	8002140 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8002236:	2201      	movs	r2, #1
 8002238:	2107      	movs	r1, #7
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff ff80 	bl	8002140 <PCA9685_SetBit>
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	017d7840 	.word	0x017d7840
 800224c:	20000380 	.word	0x20000380

08002250 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ffb9 	bl	80021d4 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8002262:	2201      	movs	r2, #1
 8002264:	2105      	movs	r1, #5
 8002266:	2000      	movs	r0, #0
 8002268:	f7ff ff6a 	bl	8002140 <PCA9685_SetBit>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af04      	add	r7, sp, #16
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	460b      	mov	r3, r1
 8002280:	80bb      	strh	r3, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3306      	adds	r3, #6
 800228e:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8002296:	88bb      	ldrh	r3, [r7, #4]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	b29b      	uxth	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	230a      	movs	r3, #10
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2304      	movs	r3, #4
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <PCA9685_SetPWM+0x60>)
 80022c8:	f004 f8c0 	bl	800644c <HAL_I2C_Mem_Write>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000380 	.word	0x20000380

080022d8 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 80022e4:	edd7 7a00 	vldr	s15, [r7]
 80022e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	d502      	bpl.n	80022f8 <setServoAngle+0x20>
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 80022f8:	edd7 7a00 	vldr	s15, [r7]
 80022fc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002398 <setServoAngle+0xc0>
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	dd01      	ble.n	800230e <setServoAngle+0x36>
 800230a:	4b24      	ldr	r3, [pc, #144]	@ (800239c <setServoAngle+0xc4>)
 800230c:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 800230e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002398 <setServoAngle+0xc0>
 8002312:	edd7 7a00 	vldr	s15, [r7]
 8002316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231a:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	a318      	add	r3, pc, #96	@ (adr r3, 8002388 <setServoAngle+0xb0>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f7fe f985 	bl	8000638 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <setServoAngle+0xc8>)
 800233c:	f7fe faa6 	bl	800088c <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	a311      	add	r3, pc, #68	@ (adr r3, 8002390 <setServoAngle+0xb8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fd ffbd 	bl	80002cc <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc45 	bl	8000be8 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7a1b      	ldrb	r3, [r3, #8]
 8002366:	edd7 7a02 	vldr	s15, [r7, #8]
 800236a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236e:	ee17 2a90 	vmov	r2, s15
 8002372:	b292      	uxth	r2, r2
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff7c 	bl	8002274 <PCA9685_SetPWM>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f3af 8000 	nop.w
 8002388:	00000000 	.word	0x00000000
 800238c:	40799800 	.word	0x40799800
 8002390:	9999999a 	.word	0x9999999a
 8002394:	40599999 	.word	0x40599999
 8002398:	43340000 	.word	0x43340000
 800239c:	43340000 	.word	0x43340000
 80023a0:	40668000 	.word	0x40668000
 80023a4:	00000000 	.word	0x00000000

080023a8 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f7fe f8e7 	bl	8000588 <__aeabi_f2d>
 80023ba:	a323      	add	r3, pc, #140	@ (adr r3, 8002448 <sv_moveDistance+0xa0>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe fa64 	bl	800088c <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc0c 	bl	8000be8 <__aeabi_d2f>
 80023d0:	4603      	mov	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	dd18      	ble.n	800241e <sv_moveDistance+0x76>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	ed93 7a00 	vldr	s14, [r3]
 80023f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002440 <sv_moveDistance+0x98>
 80023fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	d80a      	bhi.n	800241e <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	edc3 7a00 	vstr	s15, [r3]
 800241c:	e003      	b.n	8002426 <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800241e:	2101      	movs	r1, #1
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <sv_moveDistance+0x9c>)
 8002422:	f003 fb60 	bl	8005ae6 <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff51 	bl	80022d8 <setServoAngle>
  
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	43340000 	.word	0x43340000
 8002444:	40020400 	.word	0x40020400
 8002448:	b866e43b 	.word	0xb866e43b
 800244c:	3f8f9f01 	.word	0x3f8f9f01

08002450 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	425a      	negs	r2, r3
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	bf58      	it	pl
 8002468:	4253      	negpl	r3, r2
 800246a:	2b03      	cmp	r3, #3
 800246c:	d86e      	bhi.n	800254c <stp_Step+0xfc>
 800246e:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <stp_Step+0x24>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	08002485 	.word	0x08002485
 8002478:	080024b7 	.word	0x080024b7
 800247c:	080024e9 	.word	0x080024e9
 8002480:	0800251b 	.word	0x0800251b
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800248a:	4832      	ldr	r0, [pc, #200]	@ (8002554 <stp_Step+0x104>)
 800248c:	f003 fb12 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002496:	482f      	ldr	r0, [pc, #188]	@ (8002554 <stp_Step+0x104>)
 8002498:	f003 fb0c 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024a2:	482c      	ldr	r0, [pc, #176]	@ (8002554 <stp_Step+0x104>)
 80024a4:	f003 fb06 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ae:	4829      	ldr	r0, [pc, #164]	@ (8002554 <stp_Step+0x104>)
 80024b0:	f003 fb00 	bl	8005ab4 <HAL_GPIO_WritePin>
           break;
 80024b4:	e04a      	b.n	800254c <stp_Step+0xfc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024bc:	4825      	ldr	r0, [pc, #148]	@ (8002554 <stp_Step+0x104>)
 80024be:	f003 faf9 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024c8:	4822      	ldr	r0, [pc, #136]	@ (8002554 <stp_Step+0x104>)
 80024ca:	f003 faf3 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024d4:	481f      	ldr	r0, [pc, #124]	@ (8002554 <stp_Step+0x104>)
 80024d6:	f003 faed 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024e0:	481c      	ldr	r0, [pc, #112]	@ (8002554 <stp_Step+0x104>)
 80024e2:	f003 fae7 	bl	8005ab4 <HAL_GPIO_WritePin>
           break;
 80024e6:	e031      	b.n	800254c <stp_Step+0xfc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024ee:	4819      	ldr	r0, [pc, #100]	@ (8002554 <stp_Step+0x104>)
 80024f0:	f003 fae0 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024fa:	4816      	ldr	r0, [pc, #88]	@ (8002554 <stp_Step+0x104>)
 80024fc:	f003 fada 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002506:	4813      	ldr	r0, [pc, #76]	@ (8002554 <stp_Step+0x104>)
 8002508:	f003 fad4 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002512:	4810      	ldr	r0, [pc, #64]	@ (8002554 <stp_Step+0x104>)
 8002514:	f003 face 	bl	8005ab4 <HAL_GPIO_WritePin>
           break;
 8002518:	e018      	b.n	800254c <stp_Step+0xfc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002520:	480c      	ldr	r0, [pc, #48]	@ (8002554 <stp_Step+0x104>)
 8002522:	f003 fac7 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800252c:	4809      	ldr	r0, [pc, #36]	@ (8002554 <stp_Step+0x104>)
 800252e:	f003 fac1 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002538:	4806      	ldr	r0, [pc, #24]	@ (8002554 <stp_Step+0x104>)
 800253a:	f003 fabb 	bl	8005ab4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002544:	4803      	ldr	r0, [pc, #12]	@ (8002554 <stp_Step+0x104>)
 8002546:	f003 fab5 	bl	8005ab4 <HAL_GPIO_WritePin>
           break;
 800254a:	bf00      	nop
   }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021400 	.word	0x40021400

08002558 <stp_Stop>:
   nema->homeAngle = 0;
   nema->currAngle = 0;
}


void stp_Stop(Stepper* motor) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002566:	480c      	ldr	r0, [pc, #48]	@ (8002598 <stp_Stop+0x40>)
 8002568:	f003 faa4 	bl	8005ab4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002572:	4809      	ldr	r0, [pc, #36]	@ (8002598 <stp_Stop+0x40>)
 8002574:	f003 fa9e 	bl	8005ab4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800257e:	4806      	ldr	r0, [pc, #24]	@ (8002598 <stp_Stop+0x40>)
 8002580:	f003 fa98 	bl	8005ab4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800258a:	4803      	ldr	r0, [pc, #12]	@ (8002598 <stp_Stop+0x40>)
 800258c:	f003 fa92 	bl	8005ab4 <HAL_GPIO_WritePin>

}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021400 	.word	0x40021400

0800259c <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	dd01      	ble.n	80025b2 <stp_Move+0x16>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e001      	b.n	80025b6 <stp_Move+0x1a>
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bfb8      	it	lt
 80025be:	425b      	neglt	r3, r3
 80025c0:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e021      	b.n	800260c <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dd08      	ble.n	80025e0 <stp_Move+0x44>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	425a      	negs	r2, r3
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	bf58      	it	pl
 80025dc:	4253      	negpl	r3, r2
 80025de:	e009      	b.n	80025f4 <stp_Move+0x58>
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	425a      	negs	r2, r3
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	bf58      	it	pl
 80025ee:	4253      	negpl	r3, r2
 80025f0:	f1c3 0303 	rsb	r3, r3, #3
 80025f4:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 80025f6:	6939      	ldr	r1, [r7, #16]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff ff29 	bl	8002450 <stp_Step>
       HAL_Delay(delay); // Speed control
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fd25 	bl	8003050 <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbd9      	blt.n	80025c8 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ff9f 	bl	8002558 <stp_Stop>
}
 800261a:	bf00      	nop
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	ed87 0a00 	vstr	s0, [r7]

   int convertedSteps = distance_cm * NEMA_DISTANCE_TO_STEPS;
 8002630:	edd7 7a00 	vldr	s15, [r7]
 8002634:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002658 <stp_moveDistance+0x34>
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002640:	ee17 3a90 	vmov	r3, s15
 8002644:	60fb      	str	r3, [r7, #12]
   stp_Move(motor, convertedSteps, 5);
 8002646:	2205      	movs	r2, #5
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa6 	bl	800259c <stp_Move>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	42440000 	.word	0x42440000

0800265c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	4a0f      	ldr	r2, [pc, #60]	@ (80026a8 <HAL_MspInit+0x4c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002670:	6453      	str	r3, [r2, #68]	@ 0x44
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HAL_MspInit+0x4c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	@ 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d158      	bne.n	8002780 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	4a2d      	ldr	r2, [pc, #180]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026de:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b27      	ldr	r3, [pc, #156]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a26      	ldr	r2, [pc, #152]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	481d      	ldr	r0, [pc, #116]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 800271a:	f003 f837 	bl	800578c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800271e:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_ADC_MspInit+0xec>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800273c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002740:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002746:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002754:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002758:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800275c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002764:	480b      	ldr	r0, [pc, #44]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002766:	f001 fa87 	bl	8003c78 <HAL_DMA_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002770:	f7ff f860 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002778:	639a      	str	r2, [r3, #56]	@ 0x38
 800277a:	4a06      	ldr	r2, [pc, #24]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	@ 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40012000 	.word	0x40012000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000
 8002794:	20000270 	.word	0x20000270
 8002798:	40026410 	.word	0x40026410

0800279c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	@ 0x38
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a78      	ldr	r2, [pc, #480]	@ (800299c <HAL_DCMI_MspInit+0x200>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f040 80e9 	bne.w	8002992 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	4b76      	ldr	r3, [pc, #472]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c8:	4a75      	ldr	r2, [pc, #468]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80027d0:	4b73      	ldr	r3, [pc, #460]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	4b6f      	ldr	r3, [pc, #444]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	4a6e      	ldr	r2, [pc, #440]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ec:	4b6c      	ldr	r3, [pc, #432]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	4b68      	ldr	r3, [pc, #416]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	4a67      	ldr	r2, [pc, #412]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6313      	str	r3, [r2, #48]	@ 0x30
 8002808:	4b65      	ldr	r3, [pc, #404]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	4b61      	ldr	r3, [pc, #388]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6313      	str	r3, [r2, #48]	@ 0x30
 8002824:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	4a59      	ldr	r2, [pc, #356]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002840:	4b57      	ldr	r3, [pc, #348]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 8002856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800285a:	6313      	str	r3, [r2, #48]	@ 0x30
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_DCMI_MspInit+0x204>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002868:	2370      	movs	r3, #112	@ 0x70
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002878:	230d      	movs	r3, #13
 800287a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800287c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002880:	4619      	mov	r1, r3
 8002882:	4848      	ldr	r0, [pc, #288]	@ (80029a4 <HAL_DCMI_MspInit+0x208>)
 8002884:	f002 ff82 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002888:	2350      	movs	r3, #80	@ 0x50
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002898:	230d      	movs	r3, #13
 800289a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	4841      	ldr	r0, [pc, #260]	@ (80029a8 <HAL_DCMI_MspInit+0x20c>)
 80028a4:	f002 ff72 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028a8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ba:	230d      	movs	r3, #13
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4839      	ldr	r0, [pc, #228]	@ (80029ac <HAL_DCMI_MspInit+0x210>)
 80028c6:	f002 ff61 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ca:	2308      	movs	r3, #8
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028da:	230d      	movs	r3, #13
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4832      	ldr	r0, [pc, #200]	@ (80029b0 <HAL_DCMI_MspInit+0x214>)
 80028e6:	f002 ff51 	bl	800578c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028fc:	230d      	movs	r3, #13
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	482b      	ldr	r0, [pc, #172]	@ (80029b4 <HAL_DCMI_MspInit+0x218>)
 8002908:	f002 ff40 	bl	800578c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800290c:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 800290e:	4a2b      	ldr	r2, [pc, #172]	@ (80029bc <HAL_DCMI_MspInit+0x220>)
 8002910:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002912:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002918:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002926:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800292c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800292e:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002930:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002934:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002938:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800293c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800293e:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002944:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002948:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800294c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002950:	2204      	movs	r2, #4
 8002952:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002954:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002956:	2203      	movs	r2, #3
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 800295c:	2200      	movs	r2, #0
 800295e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002966:	4814      	ldr	r0, [pc, #80]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 8002968:	f001 f986 	bl	8003c78 <HAL_DMA_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8002972:	f7fe ff5f 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0f      	ldr	r2, [pc, #60]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 800297a:	649a      	str	r2, [r3, #72]	@ 0x48
 800297c:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <HAL_DCMI_MspInit+0x21c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	204e      	movs	r0, #78	@ 0x4e
 8002988:	f000 fed3 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800298c:	204e      	movs	r0, #78	@ 0x4e
 800298e:	f000 feec 	bl	800376a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002992:	bf00      	nop
 8002994:	3738      	adds	r7, #56	@ 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	50050000 	.word	0x50050000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021800 	.word	0x40021800
 80029b8:	20000320 	.word	0x20000320
 80029bc:	40026428 	.word	0x40026428

080029c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	@ 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a32      	ldr	r2, [pc, #200]	@ (8002aa8 <HAL_I2C_MspInit+0xe8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12d      	bne.n	8002a3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a30      	ldr	r2, [pc, #192]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80029fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a04:	2312      	movs	r3, #18
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a10:	2304      	movs	r3, #4
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4825      	ldr	r0, [pc, #148]	@ (8002ab0 <HAL_I2C_MspInit+0xf0>)
 8002a1c:	f002 feb6 	bl	800578c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4a20      	ldr	r2, [pc, #128]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a3c:	e030      	b.n	8002aa0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab4 <HAL_I2C_MspInit+0xf4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12b      	bne.n	8002aa0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b17      	ldr	r3, [pc, #92]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a16      	ldr	r2, [pc, #88]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a52:	f043 0320 	orr.w	r3, r3, #32
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a64:	2303      	movs	r3, #3
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a68:	2312      	movs	r3, #18
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a74:	2304      	movs	r3, #4
 8002a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480e      	ldr	r0, [pc, #56]	@ (8002ab8 <HAL_I2C_MspInit+0xf8>)
 8002a80:	f002 fe84 	bl	800578c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_I2C_MspInit+0xec>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3730      	adds	r7, #48	@ 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40005400 	.word	0x40005400
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40005800 	.word	0x40005800
 8002ab8:	40021400 	.word	0x40021400

08002abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_TIM_PWM_MspInit+0x40>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_TIM_PWM_MspInit+0x40>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_TIM_PWM_MspInit+0x40>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b2e:	e01a      	b.n	8002b66 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0f      	ldr	r2, [pc, #60]	@ (8002b74 <HAL_TIM_Base_MspInit+0x74>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d115      	bne.n	8002b66 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_TIM_Base_MspInit+0x70>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2036      	movs	r0, #54	@ 0x36
 8002b5c:	f000 fde9 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b60:	2036      	movs	r0, #54	@ 0x36
 8002b62:	f000 fe02 	bl	800376a <HAL_NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40001000 	.word	0x40001000

08002b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <HAL_TIM_MspPostInit+0x68>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11e      	bne.n	8002bd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_TIM_MspPostInit+0x6c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a10      	ldr	r2, [pc, #64]	@ (8002be4 <HAL_TIM_MspPostInit+0x6c>)
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <HAL_TIM_MspPostInit+0x6c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4805      	ldr	r0, [pc, #20]	@ (8002be8 <HAL_TIM_MspPostInit+0x70>)
 8002bd4:	f002 fdda 	bl	800578c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <HAL_UART_MspInit+0x94>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d134      	bne.n	8002c78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_UART_MspInit+0x98>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	4809      	ldr	r0, [pc, #36]	@ (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c64:	f002 fd92 	bl	800578c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2027      	movs	r0, #39	@ 0x27
 8002c6e:	f000 fd60 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c72:	2027      	movs	r0, #39	@ 0x27
 8002c74:	f000 fd79 	bl	800376a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	@ 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40004800 	.word	0x40004800
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020c00 	.word	0x40020c00

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x4>

08002c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <HardFault_Handler+0x4>

08002c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <MemManage_Handler+0x4>

08002ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce2:	f000 f995 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <USART3_IRQHandler+0x10>)
 8002cf2:	f006 fad3 	bl	800929c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000500 	.word	0x20000500

08002d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002d04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d08:	f002 ff08 	bl	8005b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <TIM6_DAC_IRQHandler+0x10>)
 8002d16:	f005 fb17 	bl	8008348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200004b8 	.word	0x200004b8

08002d24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <DMA2_Stream0_IRQHandler+0x10>)
 8002d2a:	f001 f93d 	bl	8003fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000270 	.word	0x20000270

08002d38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002d3c:	4803      	ldr	r0, [pc, #12]	@ (8002d4c <DMA2_Stream1_IRQHandler+0x14>)
 8002d3e:	f001 f933 	bl	8003fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8002d42:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <DMA2_Stream1_IRQHandler+0x18>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000320 	.word	0x20000320
 8002d50:	20018ce0 	.word	0x20018ce0

08002d54 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002d58:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <DCMI_IRQHandler+0x10>)
 8002d5a:	f000 fdc1 	bl	80038e0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200002d0 	.word	0x200002d0

08002d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return 1;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_kill>:

int _kill(int pid, int sig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d82:	f008 f845 	bl	800ae10 <__errno>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2216      	movs	r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_exit>:

void _exit (int status)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe7 	bl	8002d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <_exit+0x12>

08002dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc0:	f3af 8000 	nop.w
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <_read+0x12>
  }

  return len;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e009      	b.n	8002e0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf1      	blt.n	8002dfa <_write+0x12>
  }
  return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_close>:

int _close(int file)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e48:	605a      	str	r2, [r3, #4]
  return 0;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_isatty>:

int _isatty(int file)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <_sbrk+0x5c>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <_sbrk+0x60>)
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <_sbrk+0x64>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <_sbrk+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb8:	f007 ffaa 	bl	800ae10 <__errno>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e009      	b.n	8002edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <_sbrk+0x64>)
 8002ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20020000 	.word	0x20020000
 8002ee8:	00000400 	.word	0x00000400
 8002eec:	20018d24 	.word	0x20018d24
 8002ef0:	20018e78 	.word	0x20018e78

08002ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <SystemInit+0x20>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <SystemInit+0x20>)
 8002f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f1c:	f7ff ffea 	bl	8002ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	@ (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f007 ff69 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4a:	f7fe fd9b 	bl	8001a84 <main>
  bx  lr    
 8002f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f5c:	08021190 	.word	0x08021190
  ldr r2, =_sbss
 8002f60:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f64:	20018e78 	.word	0x20018e78

08002f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 fbc1 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7ff fb5c 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fbd9 	bl	8003786 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 fba1 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	@ (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000000 	.word	0x20000000
 8003008:	20000008 	.word	0x20000008
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000008 	.word	0x20000008
 8003034:	20018d28 	.word	0x20018d28

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20018d28 	.word	0x20018d28

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000008 	.word	0x20000008

08003098 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e033      	b.n	8003116 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff faf8 	bl	80026ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f94a 	bl	8003384 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40
 8003106:	e001      	b.n	800310c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e113      	b.n	8003364 <HAL_ADC_ConfigChannel+0x244>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b09      	cmp	r3, #9
 800314a:	d925      	bls.n	8003198 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	3b1e      	subs	r3, #30
 8003162:	2207      	movs	r2, #7
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43da      	mvns	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	400a      	ands	r2, r1
 8003170:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68d9      	ldr	r1, [r3, #12]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	4618      	mov	r0, r3
 8003184:	4603      	mov	r3, r0
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4403      	add	r3, r0
 800318a:	3b1e      	subs	r3, #30
 800318c:	409a      	lsls	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e022      	b.n	80031de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	2207      	movs	r2, #7
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4403      	add	r3, r0
 80031d4:	409a      	lsls	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d824      	bhi.n	8003230 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b05      	subs	r3, #5
 80031f8:	221f      	movs	r2, #31
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	400a      	ands	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	3b05      	subs	r3, #5
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	@ 0x34
 800322e:	e04c      	b.n	80032ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	d824      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b23      	subs	r3, #35	@ 0x23
 800324a:	221f      	movs	r2, #31
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b23      	subs	r3, #35	@ 0x23
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003280:	e023      	b.n	80032ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b41      	subs	r3, #65	@ 0x41
 8003294:	221f      	movs	r2, #31
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b41      	subs	r3, #65	@ 0x41
 80032be:	fa00 f203 	lsl.w	r2, r0, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_ADC_ConfigChannel+0x250>)
 80032cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <HAL_ADC_ConfigChannel+0x254>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10f      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1d8>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d10b      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <HAL_ADC_ConfigChannel+0x254>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d12b      	bne.n	800335a <HAL_ADC_ConfigChannel+0x23a>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1c      	ldr	r2, [pc, #112]	@ (8003378 <HAL_ADC_ConfigChannel+0x258>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x1f4>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b11      	cmp	r3, #17
 8003312:	d122      	bne.n	800335a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a11      	ldr	r2, [pc, #68]	@ (8003378 <HAL_ADC_ConfigChannel+0x258>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b11      	ldr	r3, [pc, #68]	@ (800337c <HAL_ADC_ConfigChannel+0x25c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a11      	ldr	r2, [pc, #68]	@ (8003380 <HAL_ADC_ConfigChannel+0x260>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9a      	lsrs	r2, r3, #18
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	40012000 	.word	0x40012000
 8003378:	10000012 	.word	0x10000012
 800337c:	20000000 	.word	0x20000000
 8003380:	431bde83 	.word	0x431bde83

08003384 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338c:	4b79      	ldr	r3, [pc, #484]	@ (8003574 <ADC_Init+0x1f0>)
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	021a      	lsls	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003416:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <ADC_Init+0x1f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800342a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800344c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e00f      	b.n	8003482 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003480:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0202 	bic.w	r2, r2, #2
 8003490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7e1b      	ldrb	r3, [r3, #24]
 800349c:	005a      	lsls	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	3b01      	subs	r3, #1
 80034dc:	035a      	lsls	r2, r3, #13
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e007      	b.n	80034f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	3b01      	subs	r3, #1
 8003514:	051a      	lsls	r2, r3, #20
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800352c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6899      	ldr	r1, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800353a:	025a      	lsls	r2, r3, #9
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	029a      	lsls	r2, r3, #10
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40012300 	.word	0x40012300
 8003578:	0f000001 	.word	0x0f000001

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	@ (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	@ (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	@ (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	@ 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff8e 	bl	800361c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff29 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff3e 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff8e 	bl	8003670 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5d 	bl	800361c <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff31 	bl	80035e0 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_DCMI_Start_DMA+0x20>
 80037bc:	2302      	movs	r3, #2
 80037be:	e086      	b.n	80038ce <HAL_DCMI_Start_DMA+0x12e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037de:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0202 	bic.w	r2, r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003804:	4a34      	ldr	r2, [pc, #208]	@ (80038d8 <HAL_DCMI_Start_DMA+0x138>)
 8003806:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380c:	4a33      	ldr	r2, [pc, #204]	@ (80038dc <HAL_DCMI_Start_DMA+0x13c>)
 800380e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003814:	2200      	movs	r2, #0
 8003816:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382a:	d20a      	bcs.n	8003842 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3328      	adds	r3, #40	@ 0x28
 8003836:	4619      	mov	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	f000 faca 	bl	8003dd4 <HAL_DMA_Start_IT>
 8003840:	e038      	b.n	80038b4 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <HAL_DCMI_Start_DMA+0x138>)
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 800385c:	e009      	b.n	8003872 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003862:	085a      	lsrs	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387a:	d2f0      	bcs.n	800385e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003880:	1e9a      	subs	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3328      	adds	r3, #40	@ 0x28
 80038a4:	4619      	mov	r1, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	f000 fde4 	bl	800447c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	08003a2d 	.word	0x08003a2d
 80038dc:	08003b57 	.word	0x08003b57

080038e0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2204      	movs	r2, #4
 8003900:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2204      	movs	r2, #4
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	4a2f      	ldr	r2, [pc, #188]	@ (80039d8 <HAL_DCMI_IRQHandler+0xf8>)
 800391c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fb1e 	bl	8003f64 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_DCMI_IRQHandler+0xf8>)
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb02 	bl	8003f64 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f83c 	bl	80039f0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2208      	movs	r2, #8
 8003988:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f83a 	bl	8003a04 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 021e 	bic.w	r2, r2, #30
 80039b6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f825 	bl	8003a18 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08003b57 	.word	0x08003b57

080039dc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d043      	beq.n	8003ace <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a52:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d118      	bne.n	8003a92 <DCMI_DMAXferCplt+0x66>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	00da      	lsls	r2, r3, #3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4619      	mov	r1, r3
 8003a82:	f001 fe43 	bl	800570c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a90:	e044      	b.n	8003b1c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d13c      	bne.n	8003b1c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	00da      	lsls	r2, r3, #3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	2201      	movs	r2, #1
 8003abc:	4619      	mov	r1, r3
 8003abe:	f001 fe25 	bl	800570c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	1e5a      	subs	r2, r3, #1
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	639a      	str	r2, [r3, #56]	@ 0x38
 8003acc:	e026      	b.n	8003b1c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e017      	b.n	8003b1c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	0099      	lsls	r1, r3, #2
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	440a      	add	r2, r1
 8003b12:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d112      	bne.n	8003b4e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d103      	bne.n	8003b4e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d003      	beq.n	8003b76 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff30 	bl	80039dc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e069      	b.n	8003c6a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe fdf6 	bl	800279c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fdf3 	bl	800279c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <HAL_DCMI_Init+0xf0>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003be2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003bee:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bfa:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8003c06:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c12:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d112      	bne.n	8003c4a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7f1b      	ldrb	r3, [r3, #28]
 8003c28:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7f5b      	ldrb	r3, [r3, #29]
 8003c2e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c30:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7f9b      	ldrb	r3, [r3, #30]
 8003c36:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c38:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7fdb      	ldrb	r3, [r3, #31]
 8003c40:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c46:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c48:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 021e 	orr.w	r2, r2, #30
 8003c58:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	ffe0f007 	.word	0xffe0f007

08003c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7ff f9d8 	bl	8003038 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e099      	b.n	8003dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb4:	e00f      	b.n	8003cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cb6:	f7ff f9bf 	bl	8003038 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d908      	bls.n	8003cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e078      	b.n	8003dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e8      	bne.n	8003cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4b38      	ldr	r3, [pc, #224]	@ (8003dd0 <HAL_DMA_Init+0x158>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d107      	bne.n	8003d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0307 	bic.w	r3, r3, #7
 8003d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d117      	bne.n	8003d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb01 	bl	8004384 <DMA_CheckFifoParam>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2240      	movs	r2, #64	@ 0x40
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d96:	2301      	movs	r3, #1
 8003d98:	e016      	b.n	8003dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fab8 	bl	8004318 <DMA_CalcBaseAndBitshift>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	223f      	movs	r2, #63	@ 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	f010803f 	.word	0xf010803f

08003dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Start_IT+0x26>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e040      	b.n	8003e7c <HAL_DMA_Start_IT+0xa8>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d12f      	bne.n	8003e6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fa4a 	bl	80042bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	223f      	movs	r2, #63	@ 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0216 	orr.w	r2, r2, #22
 8003e42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e005      	b.n	8003e7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e92:	f7ff f8d1 	bl	8003038 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2280      	movs	r2, #128	@ 0x80
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e052      	b.n	8003f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0216 	bic.w	r2, r2, #22
 8003ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_DMA_Abort+0x62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f06:	e013      	b.n	8003f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f08:	f7ff f896 	bl	8003038 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d90c      	bls.n	8003f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e015      	b.n	8003f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e4      	bne.n	8003f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f42:	223f      	movs	r2, #63	@ 0x3f
 8003f44:	409a      	lsls	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2280      	movs	r2, #128	@ 0x80
 8003f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00c      	b.n	8003f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80041f0 <HAL_DMA_IRQHandler+0x248>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80041f4 <HAL_DMA_IRQHandler+0x24c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01a      	beq.n	8004014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	2208      	movs	r2, #8
 8004002:	409a      	lsls	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	2201      	movs	r2, #1
 8004038:	409a      	lsls	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	f043 0202 	orr.w	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	2204      	movs	r2, #4
 8004050:	409a      	lsls	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	2204      	movs	r2, #4
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	2210      	movs	r2, #16
 8004086:	409a      	lsls	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d043      	beq.n	8004118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03c      	beq.n	8004118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	2210      	movs	r2, #16
 80040a4:	409a      	lsls	r2, r3
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d108      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d024      	beq.n	8004118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
 80040d6:	e01f      	b.n	8004118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01b      	beq.n	8004118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
 80040e8:	e016      	b.n	8004118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0208 	bic.w	r2, r2, #8
 8004106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	2220      	movs	r2, #32
 800411e:	409a      	lsls	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 808f 	beq.w	8004248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8087 	beq.w	8004248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413e:	2220      	movs	r2, #32
 8004140:	409a      	lsls	r2, r3
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b05      	cmp	r3, #5
 8004150:	d136      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0216 	bic.w	r2, r2, #22
 8004160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <HAL_DMA_IRQHandler+0x1da>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0208 	bic.w	r2, r2, #8
 8004190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	223f      	movs	r2, #63	@ 0x3f
 8004198:	409a      	lsls	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d07e      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
        }
        return;
 80041be:	e079      	b.n	80042b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01d      	beq.n	800420a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10d      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d031      	beq.n	8004248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	e02c      	b.n	8004248 <HAL_DMA_IRQHandler+0x2a0>
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000
 80041f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d023      	beq.n	8004248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	e01e      	b.n	8004248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10f      	bne.n	8004238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0210 	bic.w	r2, r2, #16
 8004226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424c:	2b00      	cmp	r3, #0
 800424e:	d032      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d022      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2205      	movs	r2, #5
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3301      	adds	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d307      	bcc.n	8004290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f2      	bne.n	8004274 <HAL_DMA_IRQHandler+0x2cc>
 800428e:	e000      	b.n	8004292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
 80042b2:	e000      	b.n	80042b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042b4:	bf00      	nop
    }
  }
}
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d108      	bne.n	80042fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042fa:	e007      	b.n	800430c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3b10      	subs	r3, #16
 8004328:	4a14      	ldr	r2, [pc, #80]	@ (800437c <DMA_CalcBaseAndBitshift+0x64>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004332:	4a13      	ldr	r2, [pc, #76]	@ (8004380 <DMA_CalcBaseAndBitshift+0x68>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d909      	bls.n	800435a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	1d1a      	adds	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	659a      	str	r2, [r3, #88]	@ 0x58
 8004358:	e007      	b.n	800436a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	aaaaaaab 	.word	0xaaaaaaab
 8004380:	0800d96c 	.word	0x0800d96c

08004384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11f      	bne.n	80043de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d856      	bhi.n	8004452 <DMA_CheckFifoParam+0xce>
 80043a4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <DMA_CheckFifoParam+0x28>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043cf 	.word	0x080043cf
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	08004453 	.word	0x08004453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d046      	beq.n	8004456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043cc:	e043      	b.n	8004456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043d6:	d140      	bne.n	800445a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e03d      	b.n	800445a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e6:	d121      	bne.n	800442c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d837      	bhi.n	800445e <DMA_CheckFifoParam+0xda>
 80043ee:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <DMA_CheckFifoParam+0x70>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	0800440b 	.word	0x0800440b
 80043fc:	08004405 	.word	0x08004405
 8004400:	0800441d 	.word	0x0800441d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e030      	b.n	800446c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d025      	beq.n	8004462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441a:	e022      	b.n	8004462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004424:	d11f      	bne.n	8004466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800442a:	e01c      	b.n	8004466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d903      	bls.n	800443a <DMA_CheckFifoParam+0xb6>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d003      	beq.n	8004440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004438:	e018      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
      break;
 800443e:	e015      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e00b      	b.n	800446a <DMA_CheckFifoParam+0xe6>
      break;
 8004452:	bf00      	nop
 8004454:	e00a      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
 8004458:	e008      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;
 800445a:	bf00      	nop
 800445c:	e006      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;
 800445e:	bf00      	nop
 8004460:	e004      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;   
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <DMA_CheckFifoParam+0xe8>
      break;
 800446a:	bf00      	nop
    }
  } 
  
  return status; 
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b80      	cmp	r3, #128	@ 0x80
 8004494:	d106      	bne.n	80044a4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f001 b911 	b.w	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	@ 0x40
 80044c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f001 b8ff 	b.w	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80044d2:	2302      	movs	r3, #2
 80044d4:	f001 b8f7 	b.w	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	f041 80e5 	bne.w	80056b8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800450a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f001 f910 	bl	8005740 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b8d      	ldr	r3, [pc, #564]	@ (800475c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d960      	bls.n	80045ee <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a8b      	ldr	r2, [pc, #556]	@ (8004760 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d057      	beq.n	80045e6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a8a      	ldr	r2, [pc, #552]	@ (8004764 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d050      	beq.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a88      	ldr	r2, [pc, #544]	@ (8004768 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d049      	beq.n	80045de <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a87      	ldr	r2, [pc, #540]	@ (800476c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d042      	beq.n	80045da <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a85      	ldr	r2, [pc, #532]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d03a      	beq.n	80045d4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a84      	ldr	r2, [pc, #528]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d032      	beq.n	80045ce <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a82      	ldr	r2, [pc, #520]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d02a      	beq.n	80045c8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a81      	ldr	r2, [pc, #516]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7f      	ldr	r2, [pc, #508]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01a      	beq.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7e      	ldr	r2, [pc, #504]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d012      	beq.n	80045b6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7c      	ldr	r2, [pc, #496]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00a      	beq.n	80045b0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7b      	ldr	r2, [pc, #492]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d102      	bne.n	80045aa <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80045a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045a8:	e01e      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045ae:	e01b      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045b4:	e018      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045ba:	e015      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045c0:	e012      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045c6:	e00f      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045cc:	e00c      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045d2:	e009      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045d8:	e006      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045da:	2320      	movs	r3, #32
 80045dc:	e004      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045de:	2320      	movs	r3, #32
 80045e0:	e002      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045e2:	2320      	movs	r3, #32
 80045e4:	e000      	b.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045e6:	2320      	movs	r3, #32
 80045e8:	4a69      	ldr	r2, [pc, #420]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	e14f      	b.n	800488e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b67      	ldr	r3, [pc, #412]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d960      	bls.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a58      	ldr	r2, [pc, #352]	@ (8004760 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d057      	beq.n	80046b4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a56      	ldr	r2, [pc, #344]	@ (8004764 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d050      	beq.n	80046b0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a55      	ldr	r2, [pc, #340]	@ (8004768 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d049      	beq.n	80046ac <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a53      	ldr	r2, [pc, #332]	@ (800476c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d042      	beq.n	80046a8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a52      	ldr	r2, [pc, #328]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d03a      	beq.n	80046a2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a50      	ldr	r2, [pc, #320]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d032      	beq.n	800469c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4f      	ldr	r2, [pc, #316]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d02a      	beq.n	8004696 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a4d      	ldr	r2, [pc, #308]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4c      	ldr	r2, [pc, #304]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01a      	beq.n	800468a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a4a      	ldr	r2, [pc, #296]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d012      	beq.n	8004684 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a49      	ldr	r2, [pc, #292]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00a      	beq.n	800467e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a47      	ldr	r2, [pc, #284]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d102      	bne.n	8004678 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004672:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004676:	e01e      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004678:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800467c:	e01b      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800467e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004682:	e018      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004684:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004688:	e015      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800468a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800468e:	e012      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004690:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004694:	e00f      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004696:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800469a:	e00c      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800469c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046a0:	e009      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046a6:	e006      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046a8:	2320      	movs	r3, #32
 80046aa:	e004      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046ac:	2320      	movs	r3, #32
 80046ae:	e002      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046b0:	2320      	movs	r3, #32
 80046b2:	e000      	b.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046b4:	2320      	movs	r3, #32
 80046b6:	4a36      	ldr	r2, [pc, #216]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	e0e8      	b.n	800488e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b35      	ldr	r3, [pc, #212]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80046c4:	429a      	cmp	r2, r3
 80046c6:	f240 8082 	bls.w	80047ce <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a24      	ldr	r2, [pc, #144]	@ (8004760 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d078      	beq.n	80047c6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a22      	ldr	r2, [pc, #136]	@ (8004764 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d071      	beq.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d06a      	beq.n	80047be <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d063      	beq.n	80047ba <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d05b      	beq.n	80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d053      	beq.n	80047ae <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d04b      	beq.n	80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d043      	beq.n	80047a2 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d03b      	beq.n	800479c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d012      	beq.n	8004754 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00a      	beq.n	800474e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a13      	ldr	r2, [pc, #76]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d102      	bne.n	8004748 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004742:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004746:	e03f      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004748:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800474c:	e03c      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800474e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004752:	e039      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004754:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004758:	e036      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800475a:	bf00      	nop
 800475c:	40026458 	.word	0x40026458
 8004760:	40026010 	.word	0x40026010
 8004764:	40026410 	.word	0x40026410
 8004768:	40026070 	.word	0x40026070
 800476c:	40026470 	.word	0x40026470
 8004770:	40026028 	.word	0x40026028
 8004774:	40026428 	.word	0x40026428
 8004778:	40026088 	.word	0x40026088
 800477c:	40026488 	.word	0x40026488
 8004780:	40026040 	.word	0x40026040
 8004784:	40026440 	.word	0x40026440
 8004788:	400260a0 	.word	0x400260a0
 800478c:	400264a0 	.word	0x400264a0
 8004790:	40026400 	.word	0x40026400
 8004794:	400260b8 	.word	0x400260b8
 8004798:	40026058 	.word	0x40026058
 800479c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047a0:	e012      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047a6:	e00f      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047ac:	e00c      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047b2:	e009      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047b8:	e006      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047ba:	2320      	movs	r3, #32
 80047bc:	e004      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047be:	2320      	movs	r3, #32
 80047c0:	e002      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047c2:	2320      	movs	r3, #32
 80047c4:	e000      	b.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047c6:	2320      	movs	r3, #32
 80047c8:	4a8c      	ldr	r2, [pc, #560]	@ (80049fc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80047ca:	60d3      	str	r3, [r2, #12]
 80047cc:	e05f      	b.n	800488e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a8b      	ldr	r2, [pc, #556]	@ (8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d057      	beq.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a89      	ldr	r2, [pc, #548]	@ (8004a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d050      	beq.n	8004884 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a88      	ldr	r2, [pc, #544]	@ (8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d049      	beq.n	8004880 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a86      	ldr	r2, [pc, #536]	@ (8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d042      	beq.n	800487c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a85      	ldr	r2, [pc, #532]	@ (8004a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d03a      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a83      	ldr	r2, [pc, #524]	@ (8004a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d032      	beq.n	8004870 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a82      	ldr	r2, [pc, #520]	@ (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02a      	beq.n	800486a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a80      	ldr	r2, [pc, #512]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a7f      	ldr	r2, [pc, #508]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01a      	beq.n	800485e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d012      	beq.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a7c      	ldr	r2, [pc, #496]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00a      	beq.n	8004852 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a7a      	ldr	r2, [pc, #488]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d102      	bne.n	800484c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004846:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800484a:	e01e      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800484c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004850:	e01b      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004852:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004856:	e018      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004858:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800485c:	e015      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800485e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004862:	e012      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004864:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004868:	e00f      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800486a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800486e:	e00c      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004870:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004874:	e009      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800487a:	e006      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800487c:	2320      	movs	r3, #32
 800487e:	e004      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004880:	2320      	movs	r3, #32
 8004882:	e002      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004884:	2320      	movs	r3, #32
 8004886:	e000      	b.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004888:	2320      	movs	r3, #32
 800488a:	4a5c      	ldr	r2, [pc, #368]	@ (80049fc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800488c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	4b66      	ldr	r3, [pc, #408]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004896:	429a      	cmp	r2, r3
 8004898:	d960      	bls.n	800495c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d057      	beq.n	8004954 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a56      	ldr	r2, [pc, #344]	@ (8004a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d050      	beq.n	8004950 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a55      	ldr	r2, [pc, #340]	@ (8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d049      	beq.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a53      	ldr	r2, [pc, #332]	@ (8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d042      	beq.n	8004948 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a52      	ldr	r2, [pc, #328]	@ (8004a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03a      	beq.n	8004942 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a50      	ldr	r2, [pc, #320]	@ (8004a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d032      	beq.n	800493c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a4f      	ldr	r2, [pc, #316]	@ (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d02a      	beq.n	8004936 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a4d      	ldr	r2, [pc, #308]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01a      	beq.n	800492a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d012      	beq.n	8004924 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a49      	ldr	r2, [pc, #292]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00a      	beq.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a47      	ldr	r2, [pc, #284]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d102      	bne.n	8004918 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8004912:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004916:	e01e      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004918:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800491c:	e01b      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800491e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004922:	e018      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004924:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004928:	e015      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800492a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800492e:	e012      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004934:	e00f      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800493a:	e00c      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800493c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004940:	e009      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004946:	e006      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004948:	2310      	movs	r3, #16
 800494a:	e004      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800494c:	2310      	movs	r3, #16
 800494e:	e002      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004950:	2310      	movs	r3, #16
 8004952:	e000      	b.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004954:	2310      	movs	r3, #16
 8004956:	4a37      	ldr	r2, [pc, #220]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004958:	60d3      	str	r3, [r2, #12]
 800495a:	e14f      	b.n	8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	4b35      	ldr	r3, [pc, #212]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004964:	429a      	cmp	r2, r3
 8004966:	f240 8082 	bls.w	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a24      	ldr	r2, [pc, #144]	@ (8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d078      	beq.n	8004a66 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a22      	ldr	r2, [pc, #136]	@ (8004a04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d071      	beq.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d06a      	beq.n	8004a5e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d063      	beq.n	8004a5a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1e      	ldr	r2, [pc, #120]	@ (8004a10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d05b      	beq.n	8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d053      	beq.n	8004a4e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04b      	beq.n	8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d043      	beq.n	8004a42 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d03b      	beq.n	8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d012      	beq.n	80049f4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00a      	beq.n	80049ee <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a13      	ldr	r2, [pc, #76]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d102      	bne.n	80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80049e2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049e6:	e03f      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80049e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049ec:	e03c      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80049ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049f2:	e039      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80049f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049f8:	e036      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80049fa:	bf00      	nop
 80049fc:	40026000 	.word	0x40026000
 8004a00:	40026010 	.word	0x40026010
 8004a04:	40026410 	.word	0x40026410
 8004a08:	40026070 	.word	0x40026070
 8004a0c:	40026470 	.word	0x40026470
 8004a10:	40026028 	.word	0x40026028
 8004a14:	40026428 	.word	0x40026428
 8004a18:	40026088 	.word	0x40026088
 8004a1c:	40026488 	.word	0x40026488
 8004a20:	40026040 	.word	0x40026040
 8004a24:	40026440 	.word	0x40026440
 8004a28:	400260a0 	.word	0x400260a0
 8004a2c:	400264a0 	.word	0x400264a0
 8004a30:	40026458 	.word	0x40026458
 8004a34:	40026400 	.word	0x40026400
 8004a38:	400260b8 	.word	0x400260b8
 8004a3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a40:	e012      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a46:	e00f      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a4c:	e00c      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a52:	e009      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a58:	e006      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	e004      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a5e:	2310      	movs	r3, #16
 8004a60:	e002      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a62:	2310      	movs	r3, #16
 8004a64:	e000      	b.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a66:	2310      	movs	r3, #16
 8004a68:	4a8c      	ldr	r2, [pc, #560]	@ (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004a6a:	6093      	str	r3, [r2, #8]
 8004a6c:	e0c6      	b.n	8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d960      	bls.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a89      	ldr	r2, [pc, #548]	@ (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d057      	beq.n	8004b34 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a87      	ldr	r2, [pc, #540]	@ (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d050      	beq.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a86      	ldr	r2, [pc, #536]	@ (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d049      	beq.n	8004b2c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a84      	ldr	r2, [pc, #528]	@ (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d042      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a83      	ldr	r2, [pc, #524]	@ (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03a      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a81      	ldr	r2, [pc, #516]	@ (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d032      	beq.n	8004b1c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a80      	ldr	r2, [pc, #512]	@ (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d02a      	beq.n	8004b16 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a7e      	ldr	r2, [pc, #504]	@ (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d022      	beq.n	8004b10 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d01a      	beq.n	8004b0a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d012      	beq.n	8004b04 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00a      	beq.n	8004afe <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a78      	ldr	r2, [pc, #480]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d102      	bne.n	8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004af2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004af6:	e01e      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004af8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004afc:	e01b      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004afe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b02:	e018      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b08:	e015      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b0e:	e012      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b14:	e00f      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b1a:	e00c      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b20:	e009      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b26:	e006      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	e004      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e002      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b30:	2310      	movs	r3, #16
 8004b32:	e000      	b.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b34:	2310      	movs	r3, #16
 8004b36:	4a67      	ldr	r2, [pc, #412]	@ (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004b38:	60d3      	str	r3, [r2, #12]
 8004b3a:	e05f      	b.n	8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a58      	ldr	r2, [pc, #352]	@ (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d057      	beq.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a57      	ldr	r2, [pc, #348]	@ (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d050      	beq.n	8004bf2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a55      	ldr	r2, [pc, #340]	@ (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d049      	beq.n	8004bee <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d042      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a52      	ldr	r2, [pc, #328]	@ (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03a      	beq.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a51      	ldr	r2, [pc, #324]	@ (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d032      	beq.n	8004bde <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02a      	beq.n	8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a4e      	ldr	r2, [pc, #312]	@ (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a4c      	ldr	r2, [pc, #304]	@ (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01a      	beq.n	8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a4b      	ldr	r2, [pc, #300]	@ (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d012      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a49      	ldr	r2, [pc, #292]	@ (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a48      	ldr	r2, [pc, #288]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d102      	bne.n	8004bba <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004bb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bb8:	e01e      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004bbe:	e01b      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bc4:	e018      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bc6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bca:	e015      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bd0:	e012      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bd6:	e00f      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bdc:	e00c      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004be2:	e009      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004be8:	e006      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bea:	2310      	movs	r3, #16
 8004bec:	e004      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e002      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	e000      	b.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	4a36      	ldr	r2, [pc, #216]	@ (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004bfa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b35      	ldr	r3, [pc, #212]	@ (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	f240 8082 	bls.w	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d078      	beq.n	8004d06 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a23      	ldr	r2, [pc, #140]	@ (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d071      	beq.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a22      	ldr	r2, [pc, #136]	@ (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d06a      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d063      	beq.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d05b      	beq.n	8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d053      	beq.n	8004cee <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d04b      	beq.n	8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d043      	beq.n	8004ce2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d03b      	beq.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a17      	ldr	r2, [pc, #92]	@ (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d012      	beq.n	8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00a      	beq.n	8004c8e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d102      	bne.n	8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8004c82:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c86:	e03f      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c8c:	e03c      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004c8e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c92:	e039      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004c94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c98:	e036      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004c9a:	bf00      	nop
 8004c9c:	40026400 	.word	0x40026400
 8004ca0:	40026058 	.word	0x40026058
 8004ca4:	40026010 	.word	0x40026010
 8004ca8:	40026410 	.word	0x40026410
 8004cac:	40026070 	.word	0x40026070
 8004cb0:	40026470 	.word	0x40026470
 8004cb4:	40026028 	.word	0x40026028
 8004cb8:	40026428 	.word	0x40026428
 8004cbc:	40026088 	.word	0x40026088
 8004cc0:	40026488 	.word	0x40026488
 8004cc4:	40026040 	.word	0x40026040
 8004cc8:	40026440 	.word	0x40026440
 8004ccc:	400260a0 	.word	0x400260a0
 8004cd0:	400264a0 	.word	0x400264a0
 8004cd4:	40026000 	.word	0x40026000
 8004cd8:	40026458 	.word	0x40026458
 8004cdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ce0:	e012      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004ce2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ce6:	e00f      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004ce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cec:	e00c      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cf2:	e009      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cf8:	e006      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	e004      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	e002      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d02:	2308      	movs	r3, #8
 8004d04:	e000      	b.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d06:	2308      	movs	r3, #8
 8004d08:	4a8c      	ldr	r2, [pc, #560]	@ (8004f3c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004d0a:	60d3      	str	r3, [r2, #12]
 8004d0c:	e14e      	b.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b8a      	ldr	r3, [pc, #552]	@ (8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d960      	bls.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a89      	ldr	r2, [pc, #548]	@ (8004f44 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d057      	beq.n	8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a87      	ldr	r2, [pc, #540]	@ (8004f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d050      	beq.n	8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a86      	ldr	r2, [pc, #536]	@ (8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d049      	beq.n	8004dcc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a84      	ldr	r2, [pc, #528]	@ (8004f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d042      	beq.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a83      	ldr	r2, [pc, #524]	@ (8004f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d03a      	beq.n	8004dc2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a81      	ldr	r2, [pc, #516]	@ (8004f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d032      	beq.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a80      	ldr	r2, [pc, #512]	@ (8004f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d02a      	beq.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7e      	ldr	r2, [pc, #504]	@ (8004f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01a      	beq.n	8004daa <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7b      	ldr	r2, [pc, #492]	@ (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d012      	beq.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7a      	ldr	r2, [pc, #488]	@ (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00a      	beq.n	8004d9e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a78      	ldr	r2, [pc, #480]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d102      	bne.n	8004d98 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004d92:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d96:	e01e      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004d98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d9c:	e01b      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004d9e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004da2:	e018      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004da4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004da8:	e015      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004daa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dae:	e012      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004db4:	e00f      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004db6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dba:	e00c      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dc0:	e009      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dc6:	e006      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	e004      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	e002      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	4a59      	ldr	r2, [pc, #356]	@ (8004f3c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	e0e7      	b.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b64      	ldr	r3, [pc, #400]	@ (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d960      	bls.n	8004eaa <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a55      	ldr	r2, [pc, #340]	@ (8004f44 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d057      	beq.n	8004ea2 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a54      	ldr	r2, [pc, #336]	@ (8004f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d050      	beq.n	8004e9e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a52      	ldr	r2, [pc, #328]	@ (8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d049      	beq.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a51      	ldr	r2, [pc, #324]	@ (8004f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d042      	beq.n	8004e96 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a4f      	ldr	r2, [pc, #316]	@ (8004f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d03a      	beq.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d032      	beq.n	8004e8a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a4c      	ldr	r2, [pc, #304]	@ (8004f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02a      	beq.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4b      	ldr	r2, [pc, #300]	@ (8004f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a49      	ldr	r2, [pc, #292]	@ (8004f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01a      	beq.n	8004e78 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a48      	ldr	r2, [pc, #288]	@ (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d012      	beq.n	8004e72 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00a      	beq.n	8004e6c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a45      	ldr	r2, [pc, #276]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d102      	bne.n	8004e66 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e64:	e01e      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e6a:	e01b      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e70:	e018      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e72:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e76:	e015      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e7c:	e012      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e82:	e00f      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e88:	e00c      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e8e:	e009      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e94:	e006      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e96:	2308      	movs	r3, #8
 8004e98:	e004      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	e002      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	e000      	b.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	4a34      	ldr	r2, [pc, #208]	@ (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004ea6:	60d3      	str	r3, [r2, #12]
 8004ea8:	e080      	b.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a25      	ldr	r2, [pc, #148]	@ (8004f44 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d078      	beq.n	8004fa6 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	@ (8004f48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d071      	beq.n	8004fa2 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a22      	ldr	r2, [pc, #136]	@ (8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d06a      	beq.n	8004f9e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a20      	ldr	r2, [pc, #128]	@ (8004f50 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d063      	beq.n	8004f9a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d05b      	beq.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d053      	beq.n	8004f8e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1c      	ldr	r2, [pc, #112]	@ (8004f5c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d04b      	beq.n	8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d043      	beq.n	8004f82 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d012      	beq.n	8004f34 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a16      	ldr	r2, [pc, #88]	@ (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00a      	beq.n	8004f2e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d102      	bne.n	8004f28 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8004f22:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f26:	e03f      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f2c:	e03c      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f32:	e039      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f38:	e036      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f3a:	bf00      	nop
 8004f3c:	40026400 	.word	0x40026400
 8004f40:	400260b8 	.word	0x400260b8
 8004f44:	40026010 	.word	0x40026010
 8004f48:	40026410 	.word	0x40026410
 8004f4c:	40026070 	.word	0x40026070
 8004f50:	40026470 	.word	0x40026470
 8004f54:	40026028 	.word	0x40026028
 8004f58:	40026428 	.word	0x40026428
 8004f5c:	40026088 	.word	0x40026088
 8004f60:	40026488 	.word	0x40026488
 8004f64:	40026040 	.word	0x40026040
 8004f68:	40026440 	.word	0x40026440
 8004f6c:	400260a0 	.word	0x400260a0
 8004f70:	400264a0 	.word	0x400264a0
 8004f74:	40026058 	.word	0x40026058
 8004f78:	40026000 	.word	0x40026000
 8004f7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f80:	e012      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f86:	e00f      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f8c:	e00c      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f92:	e009      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f98:	e006      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e004      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	e002      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e000      	b.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	4a8a      	ldr	r2, [pc, #552]	@ (80051d4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004faa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b89      	ldr	r3, [pc, #548]	@ (80051d8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d960      	bls.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a87      	ldr	r2, [pc, #540]	@ (80051dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d057      	beq.n	8005072 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a86      	ldr	r2, [pc, #536]	@ (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d050      	beq.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a84      	ldr	r2, [pc, #528]	@ (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d049      	beq.n	800506a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a83      	ldr	r2, [pc, #524]	@ (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d042      	beq.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a81      	ldr	r2, [pc, #516]	@ (80051ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d03a      	beq.n	8005060 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a80      	ldr	r2, [pc, #512]	@ (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d032      	beq.n	800505a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a7e      	ldr	r2, [pc, #504]	@ (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02a      	beq.n	8005054 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a7d      	ldr	r2, [pc, #500]	@ (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7b      	ldr	r2, [pc, #492]	@ (80051fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01a      	beq.n	8005048 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7a      	ldr	r2, [pc, #488]	@ (8005200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d012      	beq.n	8005042 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a78      	ldr	r2, [pc, #480]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00a      	beq.n	800503c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a77      	ldr	r2, [pc, #476]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d102      	bne.n	8005036 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8005030:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005034:	e01e      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005036:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800503a:	e01b      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800503c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005040:	e018      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005042:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005046:	e015      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005048:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800504c:	e012      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800504e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005052:	e00f      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005058:	e00c      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800505a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800505e:	e009      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005064:	e006      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005066:	2304      	movs	r3, #4
 8005068:	e004      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800506a:	2304      	movs	r3, #4
 800506c:	e002      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800506e:	2304      	movs	r3, #4
 8005070:	e000      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005072:	2304      	movs	r3, #4
 8005074:	4a65      	ldr	r2, [pc, #404]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005076:	60d3      	str	r3, [r2, #12]
 8005078:	e150      	b.n	800531c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	4b63      	ldr	r3, [pc, #396]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8005082:	429a      	cmp	r2, r3
 8005084:	d960      	bls.n	8005148 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a54      	ldr	r2, [pc, #336]	@ (80051dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d057      	beq.n	8005140 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a52      	ldr	r2, [pc, #328]	@ (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d050      	beq.n	800513c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a51      	ldr	r2, [pc, #324]	@ (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d049      	beq.n	8005138 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a4f      	ldr	r2, [pc, #316]	@ (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d042      	beq.n	8005134 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a4e      	ldr	r2, [pc, #312]	@ (80051ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d03a      	beq.n	800512e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a4c      	ldr	r2, [pc, #304]	@ (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d032      	beq.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4b      	ldr	r2, [pc, #300]	@ (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d02a      	beq.n	8005122 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a49      	ldr	r2, [pc, #292]	@ (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a48      	ldr	r2, [pc, #288]	@ (80051fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01a      	beq.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a46      	ldr	r2, [pc, #280]	@ (8005200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d012      	beq.n	8005110 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a45      	ldr	r2, [pc, #276]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00a      	beq.n	800510a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a43      	ldr	r2, [pc, #268]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d102      	bne.n	8005104 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80050fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005102:	e01e      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005108:	e01b      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800510a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800510e:	e018      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005110:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005114:	e015      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005116:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800511a:	e012      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800511c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005120:	e00f      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005126:	e00c      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800512c:	e009      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800512e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005132:	e006      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005134:	2304      	movs	r3, #4
 8005136:	e004      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005138:	2304      	movs	r3, #4
 800513a:	e002      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800513c:	2304      	movs	r3, #4
 800513e:	e000      	b.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005140:	2304      	movs	r3, #4
 8005142:	4a32      	ldr	r2, [pc, #200]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005144:	6093      	str	r3, [r2, #8]
 8005146:	e0e9      	b.n	800531c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	4b31      	ldr	r3, [pc, #196]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8005150:	429a      	cmp	r2, r3
 8005152:	f240 8083 	bls.w	800525c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a20      	ldr	r2, [pc, #128]	@ (80051dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d079      	beq.n	8005254 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d072      	beq.n	8005250 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d06b      	beq.n	800524c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1b      	ldr	r2, [pc, #108]	@ (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d064      	beq.n	8005248 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1a      	ldr	r2, [pc, #104]	@ (80051ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d05c      	beq.n	8005242 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d054      	beq.n	800523c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d04c      	beq.n	8005236 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a15      	ldr	r2, [pc, #84]	@ (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d044      	beq.n	8005230 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03c      	beq.n	800522a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a12      	ldr	r2, [pc, #72]	@ (8005200 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d034      	beq.n	8005224 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a11      	ldr	r2, [pc, #68]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d02c      	beq.n	800521e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d124      	bne.n	8005218 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80051ce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80051d2:	e040      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80051d4:	40026000 	.word	0x40026000
 80051d8:	40026458 	.word	0x40026458
 80051dc:	40026010 	.word	0x40026010
 80051e0:	40026410 	.word	0x40026410
 80051e4:	40026070 	.word	0x40026070
 80051e8:	40026470 	.word	0x40026470
 80051ec:	40026028 	.word	0x40026028
 80051f0:	40026428 	.word	0x40026428
 80051f4:	40026088 	.word	0x40026088
 80051f8:	40026488 	.word	0x40026488
 80051fc:	40026040 	.word	0x40026040
 8005200:	40026440 	.word	0x40026440
 8005204:	400260a0 	.word	0x400260a0
 8005208:	400264a0 	.word	0x400264a0
 800520c:	40026400 	.word	0x40026400
 8005210:	400260b8 	.word	0x400260b8
 8005214:	40026058 	.word	0x40026058
 8005218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800521c:	e01b      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800521e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005222:	e018      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005224:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005228:	e015      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800522a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800522e:	e012      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005234:	e00f      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800523a:	e00c      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800523c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005240:	e009      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005246:	e006      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005248:	2304      	movs	r3, #4
 800524a:	e004      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800524c:	2304      	movs	r3, #4
 800524e:	e002      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005250:	2304      	movs	r3, #4
 8005252:	e000      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005254:	2304      	movs	r3, #4
 8005256:	4a8b      	ldr	r2, [pc, #556]	@ (8005484 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005258:	60d3      	str	r3, [r2, #12]
 800525a:	e05f      	b.n	800531c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a89      	ldr	r2, [pc, #548]	@ (8005488 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d057      	beq.n	8005316 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a88      	ldr	r2, [pc, #544]	@ (800548c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d050      	beq.n	8005312 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a86      	ldr	r2, [pc, #536]	@ (8005490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d049      	beq.n	800530e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a85      	ldr	r2, [pc, #532]	@ (8005494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d042      	beq.n	800530a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a83      	ldr	r2, [pc, #524]	@ (8005498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d03a      	beq.n	8005304 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a82      	ldr	r2, [pc, #520]	@ (800549c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d032      	beq.n	80052fe <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a80      	ldr	r2, [pc, #512]	@ (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02a      	beq.n	80052f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a7f      	ldr	r2, [pc, #508]	@ (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d022      	beq.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7d      	ldr	r2, [pc, #500]	@ (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01a      	beq.n	80052ec <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7c      	ldr	r2, [pc, #496]	@ (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d012      	beq.n	80052e6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7a      	ldr	r2, [pc, #488]	@ (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00a      	beq.n	80052e0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a79      	ldr	r2, [pc, #484]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d102      	bne.n	80052da <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80052d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052d8:	e01e      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052de:	e01b      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052e4:	e018      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052ea:	e015      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80052f0:	e012      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052f6:	e00f      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052fc:	e00c      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80052fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005302:	e009      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005304:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005308:	e006      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800530a:	2304      	movs	r3, #4
 800530c:	e004      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800530e:	2304      	movs	r3, #4
 8005310:	e002      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005312:	2304      	movs	r3, #4
 8005314:	e000      	b.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005316:	2304      	movs	r3, #4
 8005318:	4a5a      	ldr	r2, [pc, #360]	@ (8005484 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800531a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	4b65      	ldr	r3, [pc, #404]	@ (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d95c      	bls.n	80053e2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a56      	ldr	r2, [pc, #344]	@ (8005488 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d053      	beq.n	80053da <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a55      	ldr	r2, [pc, #340]	@ (800548c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d04c      	beq.n	80053d6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a53      	ldr	r2, [pc, #332]	@ (8005490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d045      	beq.n	80053d2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a52      	ldr	r2, [pc, #328]	@ (8005494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03e      	beq.n	80053ce <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a50      	ldr	r2, [pc, #320]	@ (8005498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d037      	beq.n	80053ca <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a4f      	ldr	r2, [pc, #316]	@ (800549c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d030      	beq.n	80053c6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a4d      	ldr	r2, [pc, #308]	@ (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d029      	beq.n	80053c2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4c      	ldr	r2, [pc, #304]	@ (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a4a      	ldr	r2, [pc, #296]	@ (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01a      	beq.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a49      	ldr	r2, [pc, #292]	@ (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d012      	beq.n	80053b2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a47      	ldr	r2, [pc, #284]	@ (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00a      	beq.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a46      	ldr	r2, [pc, #280]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d102      	bne.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80053a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053a4:	e01a      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053aa:	e017      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053b0:	e014      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053b6:	e011      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053bc:	e00e      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053be:	2340      	movs	r3, #64	@ 0x40
 80053c0:	e00c      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053c2:	2340      	movs	r3, #64	@ 0x40
 80053c4:	e00a      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053c6:	2340      	movs	r3, #64	@ 0x40
 80053c8:	e008      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053ca:	2340      	movs	r3, #64	@ 0x40
 80053cc:	e006      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e004      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e002      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053da:	2301      	movs	r3, #1
 80053dc:	4a37      	ldr	r2, [pc, #220]	@ (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80053de:	60d3      	str	r3, [r2, #12]
 80053e0:	e141      	b.n	8005666 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b35      	ldr	r3, [pc, #212]	@ (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d97c      	bls.n	80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a25      	ldr	r2, [pc, #148]	@ (8005488 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d073      	beq.n	80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a23      	ldr	r2, [pc, #140]	@ (800548c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d06c      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a22      	ldr	r2, [pc, #136]	@ (8005490 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d065      	beq.n	80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d05e      	beq.n	80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d057      	beq.n	80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d050      	beq.n	80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d049      	beq.n	80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1a      	ldr	r2, [pc, #104]	@ (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d042      	beq.n	80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01a      	beq.n	800547e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a17      	ldr	r2, [pc, #92]	@ (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d012      	beq.n	8005478 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00a      	beq.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a14      	ldr	r2, [pc, #80]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d102      	bne.n	800546c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8005466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800546a:	e03a      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800546c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005470:	e037      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005476:	e034      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800547c:	e031      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800547e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005482:	e02e      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005484:	40026000 	.word	0x40026000
 8005488:	40026010 	.word	0x40026010
 800548c:	40026410 	.word	0x40026410
 8005490:	40026070 	.word	0x40026070
 8005494:	40026470 	.word	0x40026470
 8005498:	40026028 	.word	0x40026028
 800549c:	40026428 	.word	0x40026428
 80054a0:	40026088 	.word	0x40026088
 80054a4:	40026488 	.word	0x40026488
 80054a8:	40026040 	.word	0x40026040
 80054ac:	40026440 	.word	0x40026440
 80054b0:	400260a0 	.word	0x400260a0
 80054b4:	400264a0 	.word	0x400264a0
 80054b8:	40026458 	.word	0x40026458
 80054bc:	40026400 	.word	0x40026400
 80054c0:	400260b8 	.word	0x400260b8
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	e00c      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054c8:	2340      	movs	r3, #64	@ 0x40
 80054ca:	e00a      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054cc:	2340      	movs	r3, #64	@ 0x40
 80054ce:	e008      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054d0:	2340      	movs	r3, #64	@ 0x40
 80054d2:	e006      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e004      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054d8:	2301      	movs	r3, #1
 80054da:	e002      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054e0:	2301      	movs	r3, #1
 80054e2:	4a7b      	ldr	r2, [pc, #492]	@ (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80054e4:	6093      	str	r3, [r2, #8]
 80054e6:	e0be      	b.n	8005666 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b79      	ldr	r3, [pc, #484]	@ (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d95c      	bls.n	80055ae <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a77      	ldr	r2, [pc, #476]	@ (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d053      	beq.n	80055a6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a76      	ldr	r2, [pc, #472]	@ (80056dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04c      	beq.n	80055a2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a74      	ldr	r2, [pc, #464]	@ (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	@ (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03e      	beq.n	800559a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a71      	ldr	r2, [pc, #452]	@ (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d037      	beq.n	8005596 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a70      	ldr	r2, [pc, #448]	@ (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d030      	beq.n	8005592 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6e      	ldr	r2, [pc, #440]	@ (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d029      	beq.n	800558e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6d      	ldr	r2, [pc, #436]	@ (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d022      	beq.n	800558a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6b      	ldr	r2, [pc, #428]	@ (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01a      	beq.n	8005584 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6a      	ldr	r2, [pc, #424]	@ (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d012      	beq.n	800557e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a68      	ldr	r2, [pc, #416]	@ (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00a      	beq.n	8005578 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a67      	ldr	r2, [pc, #412]	@ (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d102      	bne.n	8005572 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800556c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005570:	e01a      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005576:	e017      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800557c:	e014      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800557e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005582:	e011      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005588:	e00e      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800558a:	2340      	movs	r3, #64	@ 0x40
 800558c:	e00c      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800558e:	2340      	movs	r3, #64	@ 0x40
 8005590:	e00a      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005592:	2340      	movs	r3, #64	@ 0x40
 8005594:	e008      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005596:	2340      	movs	r3, #64	@ 0x40
 8005598:	e006      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800559a:	2301      	movs	r3, #1
 800559c:	e004      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800559e:	2301      	movs	r3, #1
 80055a0:	e002      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4a57      	ldr	r2, [pc, #348]	@ (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80055aa:	60d3      	str	r3, [r2, #12]
 80055ac:	e05b      	b.n	8005666 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a49      	ldr	r2, [pc, #292]	@ (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d053      	beq.n	8005660 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a47      	ldr	r2, [pc, #284]	@ (80056dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d04c      	beq.n	800565c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a46      	ldr	r2, [pc, #280]	@ (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d045      	beq.n	8005658 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a44      	ldr	r2, [pc, #272]	@ (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d03e      	beq.n	8005654 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a43      	ldr	r2, [pc, #268]	@ (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d037      	beq.n	8005650 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a41      	ldr	r2, [pc, #260]	@ (80056ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d030      	beq.n	800564c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a40      	ldr	r2, [pc, #256]	@ (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d029      	beq.n	8005648 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a3e      	ldr	r2, [pc, #248]	@ (80056f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a3d      	ldr	r2, [pc, #244]	@ (80056f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d01a      	beq.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3b      	ldr	r2, [pc, #236]	@ (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d012      	beq.n	8005638 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a3a      	ldr	r2, [pc, #232]	@ (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00a      	beq.n	8005632 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a38      	ldr	r2, [pc, #224]	@ (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d102      	bne.n	800562c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800562a:	e01a      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800562c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005630:	e017      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005632:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005636:	e014      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800563c:	e011      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800563e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005642:	e00e      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005644:	2340      	movs	r3, #64	@ 0x40
 8005646:	e00c      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005648:	2340      	movs	r3, #64	@ 0x40
 800564a:	e00a      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800564c:	2340      	movs	r3, #64	@ 0x40
 800564e:	e008      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005650:	2340      	movs	r3, #64	@ 0x40
 8005652:	e006      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005654:	2301      	movs	r3, #1
 8005656:	e004      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005658:	2301      	movs	r3, #1
 800565a:	e002      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005660:	2301      	movs	r3, #1
 8005662:	4a29      	ldr	r2, [pc, #164]	@ (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005664:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0216 	orr.w	r2, r2, #22
 8005674:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005684:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0208 	orr.w	r2, r2, #8
 80056a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e005      	b.n	80056c4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
 80056c2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40026400 	.word	0x40026400
 80056d4:	40026058 	.word	0x40026058
 80056d8:	40026010 	.word	0x40026010
 80056dc:	40026410 	.word	0x40026410
 80056e0:	40026070 	.word	0x40026070
 80056e4:	40026470 	.word	0x40026470
 80056e8:	40026028 	.word	0x40026028
 80056ec:	40026428 	.word	0x40026428
 80056f0:	40026088 	.word	0x40026088
 80056f4:	40026488 	.word	0x40026488
 80056f8:	40026040 	.word	0x40026040
 80056fc:	40026440 	.word	0x40026440
 8005700:	400260a0 	.word	0x400260a0
 8005704:	400264a0 	.word	0x400264a0
 8005708:	40026000 	.word	0x40026000

0800570c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	e003      	b.n	8005732 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d108      	bne.n	8005770 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800576e:	e007      	b.n	8005780 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	60da      	str	r2, [r3, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	@ 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	e165      	b.n	8005a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057a8:	2201      	movs	r2, #1
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	f040 8154 	bne.w	8005a6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d005      	beq.n	80057de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d130      	bne.n	8005840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	2203      	movs	r2, #3
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005814:	2201      	movs	r2, #1
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 0201 	and.w	r2, r3, #1
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	2b03      	cmp	r3, #3
 800584a:	d017      	beq.n	800587c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	2203      	movs	r2, #3
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	43db      	mvns	r3, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d123      	bne.n	80058d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	08da      	lsrs	r2, r3, #3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3208      	adds	r2, #8
 8005890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	220f      	movs	r2, #15
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	08da      	lsrs	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3208      	adds	r2, #8
 80058ca:	69b9      	ldr	r1, [r7, #24]
 80058cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	2203      	movs	r2, #3
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 0203 	and.w	r2, r3, #3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80ae 	beq.w	8005a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	4b5d      	ldr	r3, [pc, #372]	@ (8005a8c <HAL_GPIO_Init+0x300>)
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	4a5c      	ldr	r2, [pc, #368]	@ (8005a8c <HAL_GPIO_Init+0x300>)
 800591c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005920:	6453      	str	r3, [r2, #68]	@ 0x44
 8005922:	4b5a      	ldr	r3, [pc, #360]	@ (8005a8c <HAL_GPIO_Init+0x300>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800592e:	4a58      	ldr	r2, [pc, #352]	@ (8005a90 <HAL_GPIO_Init+0x304>)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	3302      	adds	r3, #2
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	220f      	movs	r2, #15
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a4f      	ldr	r2, [pc, #316]	@ (8005a94 <HAL_GPIO_Init+0x308>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d025      	beq.n	80059a6 <HAL_GPIO_Init+0x21a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a4e      	ldr	r2, [pc, #312]	@ (8005a98 <HAL_GPIO_Init+0x30c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01f      	beq.n	80059a2 <HAL_GPIO_Init+0x216>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4d      	ldr	r2, [pc, #308]	@ (8005a9c <HAL_GPIO_Init+0x310>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d019      	beq.n	800599e <HAL_GPIO_Init+0x212>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa0 <HAL_GPIO_Init+0x314>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_GPIO_Init+0x20e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4b      	ldr	r2, [pc, #300]	@ (8005aa4 <HAL_GPIO_Init+0x318>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_GPIO_Init+0x20a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4a      	ldr	r2, [pc, #296]	@ (8005aa8 <HAL_GPIO_Init+0x31c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <HAL_GPIO_Init+0x206>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a49      	ldr	r2, [pc, #292]	@ (8005aac <HAL_GPIO_Init+0x320>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_GPIO_Init+0x202>
 800598a:	2306      	movs	r3, #6
 800598c:	e00c      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 800598e:	2307      	movs	r3, #7
 8005990:	e00a      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 8005992:	2305      	movs	r3, #5
 8005994:	e008      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 8005996:	2304      	movs	r3, #4
 8005998:	e006      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 800599a:	2303      	movs	r3, #3
 800599c:	e004      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 800599e:	2302      	movs	r3, #2
 80059a0:	e002      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_GPIO_Init+0x21c>
 80059a6:	2300      	movs	r3, #0
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	f002 0203 	and.w	r2, r2, #3
 80059ae:	0092      	lsls	r2, r2, #2
 80059b0:	4093      	lsls	r3, r2
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059b8:	4935      	ldr	r1, [pc, #212]	@ (8005a90 <HAL_GPIO_Init+0x304>)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059c6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ea:	4a31      	ldr	r2, [pc, #196]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059f0:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a14:	4a26      	ldr	r2, [pc, #152]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a1a:	4b25      	ldr	r3, [pc, #148]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a44:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <HAL_GPIO_Init+0x324>)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	f67f ae96 	bls.w	80057a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3724      	adds	r7, #36	@ 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40013800 	.word	0x40013800
 8005a94:	40020000 	.word	0x40020000
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40020800 	.word	0x40020800
 8005aa0:	40020c00 	.word	0x40020c00
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40021400 	.word	0x40021400
 8005aac:	40021800 	.word	0x40021800
 8005ab0:	40013c00 	.word	0x40013c00

08005ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	807b      	strh	r3, [r7, #2]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ad0:	e003      	b.n	8005ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	041a      	lsls	r2, r3, #16
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	619a      	str	r2, [r3, #24]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4013      	ands	r3, r2
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	43d9      	mvns	r1, r3
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	400b      	ands	r3, r1
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	619a      	str	r2, [r3, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b26:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b32:	4a05      	ldr	r2, [pc, #20]	@ (8005b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f806 	bl	8005b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40013c00 	.word	0x40013c00

08005b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e12b      	b.n	8005dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc ff18 	bl	80029c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	@ 0x24
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f001 fd62 	bl	8007690 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4a81      	ldr	r2, [pc, #516]	@ (8005dd8 <HAL_I2C_Init+0x274>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d807      	bhi.n	8005be8 <HAL_I2C_Init+0x84>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a80      	ldr	r2, [pc, #512]	@ (8005ddc <HAL_I2C_Init+0x278>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bf94      	ite	ls
 8005be0:	2301      	movls	r3, #1
 8005be2:	2300      	movhi	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e006      	b.n	8005bf6 <HAL_I2C_Init+0x92>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a7d      	ldr	r2, [pc, #500]	@ (8005de0 <HAL_I2C_Init+0x27c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bf94      	ite	ls
 8005bf0:	2301      	movls	r3, #1
 8005bf2:	2300      	movhi	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e0e7      	b.n	8005dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a78      	ldr	r2, [pc, #480]	@ (8005de4 <HAL_I2C_Init+0x280>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0c9b      	lsrs	r3, r3, #18
 8005c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8005dd8 <HAL_I2C_Init+0x274>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d802      	bhi.n	8005c38 <HAL_I2C_Init+0xd4>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3301      	adds	r3, #1
 8005c36:	e009      	b.n	8005c4c <HAL_I2C_Init+0xe8>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	4a69      	ldr	r2, [pc, #420]	@ (8005de8 <HAL_I2C_Init+0x284>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	495c      	ldr	r1, [pc, #368]	@ (8005dd8 <HAL_I2C_Init+0x274>)
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	d819      	bhi.n	8005ca0 <HAL_I2C_Init+0x13c>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1e59      	subs	r1, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c80:	400b      	ands	r3, r1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_I2C_Init+0x138>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1e59      	subs	r1, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c94:	3301      	adds	r3, #1
 8005c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9a:	e051      	b.n	8005d40 <HAL_I2C_Init+0x1dc>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e04f      	b.n	8005d40 <HAL_I2C_Init+0x1dc>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d111      	bne.n	8005ccc <HAL_I2C_Init+0x168>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1e58      	subs	r0, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6859      	ldr	r1, [r3, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	440b      	add	r3, r1
 8005cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	e012      	b.n	8005cf2 <HAL_I2C_Init+0x18e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1e58      	subs	r0, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	0099      	lsls	r1, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_I2C_Init+0x196>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e022      	b.n	8005d40 <HAL_I2C_Init+0x1dc>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10e      	bne.n	8005d20 <HAL_I2C_Init+0x1bc>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1e58      	subs	r0, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	440b      	add	r3, r1
 8005d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d14:	3301      	adds	r3, #1
 8005d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1e:	e00f      	b.n	8005d40 <HAL_I2C_Init+0x1dc>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1e58      	subs	r0, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	0099      	lsls	r1, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d36:	3301      	adds	r3, #1
 8005d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	6809      	ldr	r1, [r1, #0]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6911      	ldr	r1, [r2, #16]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	4311      	orrs	r1, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	000186a0 	.word	0x000186a0
 8005ddc:	001e847f 	.word	0x001e847f
 8005de0:	003d08ff 	.word	0x003d08ff
 8005de4:	431bde83 	.word	0x431bde83
 8005de8:	10624dd3 	.word	0x10624dd3

08005dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	460b      	mov	r3, r1
 8005dfa:	817b      	strh	r3, [r7, #10]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e00:	f7fd f91a 	bl	8003038 <HAL_GetTick>
 8005e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	f040 80e0 	bne.w	8005fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2319      	movs	r3, #25
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4970      	ldr	r1, [pc, #448]	@ (8005fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 f90e 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e0d3      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_I2C_Master_Transmit+0x50>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e0cc      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d007      	beq.n	8005e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2221      	movs	r2, #33	@ 0x21
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	893a      	ldrh	r2, [r7, #8]
 8005e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a50      	ldr	r2, [pc, #320]	@ (8005fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ea4:	8979      	ldrh	r1, [r7, #10]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fdfa 	bl	8006aa4 <I2C_MasterRequestWrite>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e08d      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eba:	2300      	movs	r3, #0
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ed0:	e066      	b.n	8005fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	6a39      	ldr	r1, [r7, #32]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 f9cc 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d107      	bne.n	8005efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e06b      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d11b      	bne.n	8005f74 <HAL_I2C_Master_Transmit+0x188>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d017      	beq.n	8005f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	6a39      	ldr	r1, [r7, #32]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f001 f9c3 	bl	8007304 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d107      	bne.n	8005f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e01a      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d194      	bne.n	8005ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e000      	b.n	8005fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fd4:	2302      	movs	r3, #2
  }
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	00100002 	.word	0x00100002
 8005fe4:	ffff0000 	.word	0xffff0000

08005fe8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	@ 0x30
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	817b      	strh	r3, [r7, #10]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ffc:	f7fd f81c 	bl	8003038 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b20      	cmp	r3, #32
 800600c:	f040 8217 	bne.w	800643e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	2319      	movs	r3, #25
 8006016:	2201      	movs	r2, #1
 8006018:	497c      	ldr	r1, [pc, #496]	@ (800620c <HAL_I2C_Master_Receive+0x224>)
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 f810 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
 8006028:	e20a      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_I2C_Master_Receive+0x50>
 8006034:	2302      	movs	r3, #2
 8006036:	e203      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d007      	beq.n	800605e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800606c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2222      	movs	r2, #34	@ 0x22
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2210      	movs	r2, #16
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	893a      	ldrh	r2, [r7, #8]
 800608e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a5c      	ldr	r2, [pc, #368]	@ (8006210 <HAL_I2C_Master_Receive+0x228>)
 800609e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060a0:	8979      	ldrh	r1, [r7, #10]
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fd7e 	bl	8006ba8 <I2C_MasterRequestRead>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e1c4      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e198      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d11b      	bne.n	8006126 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e178      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	2b02      	cmp	r3, #2
 800612c:	d11b      	bne.n	8006166 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	e158      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800618c:	e144      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006192:	2b03      	cmp	r3, #3
 8006194:	f200 80f1 	bhi.w	800637a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619c:	2b01      	cmp	r3, #1
 800619e:	d123      	bne.n	80061e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f001 f8f5 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e145      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061e6:	e117      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d14e      	bne.n	800628e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	2200      	movs	r2, #0
 80061f8:	4906      	ldr	r1, [pc, #24]	@ (8006214 <HAL_I2C_Master_Receive+0x22c>)
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 ff20 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e11a      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
 800620a:	bf00      	nop
 800620c:	00100002 	.word	0x00100002
 8006210:	ffff0000 	.word	0xffff0000
 8006214:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800628c:	e0c4      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	496c      	ldr	r1, [pc, #432]	@ (8006448 <HAL_I2C_Master_Receive+0x460>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fed1 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0cb      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	2200      	movs	r2, #0
 80062f2:	4955      	ldr	r1, [pc, #340]	@ (8006448 <HAL_I2C_Master_Receive+0x460>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fea3 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e09d      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006378:	e04e      	b.n	8006418 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f001 f808 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e058      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d124      	bne.n	8006418 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d107      	bne.n	80063e6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f aeb6 	bne.w	800618e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	@ 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	00010004 	.word	0x00010004

0800644c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4603      	mov	r3, r0
 800645c:	817b      	strh	r3, [r7, #10]
 800645e:	460b      	mov	r3, r1
 8006460:	813b      	strh	r3, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006466:	f7fc fde7 	bl	8003038 <HAL_GetTick>
 800646a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	f040 80d9 	bne.w	800662c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2319      	movs	r3, #25
 8006480:	2201      	movs	r2, #1
 8006482:	496d      	ldr	r1, [pc, #436]	@ (8006638 <HAL_I2C_Mem_Write+0x1ec>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fddb 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
 8006492:	e0cc      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_Mem_Write+0x56>
 800649e:	2302      	movs	r3, #2
 80064a0:	e0c5      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d007      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2221      	movs	r2, #33	@ 0x21
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	@ 0x40
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a4d      	ldr	r2, [pc, #308]	@ (800663c <HAL_I2C_Mem_Write+0x1f0>)
 8006508:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650a:	88f8      	ldrh	r0, [r7, #6]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	8979      	ldrh	r1, [r7, #10]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fc12 	bl	8006d44 <I2C_RequestMemoryWrite>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d052      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e081      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fea0 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	2b04      	cmp	r3, #4
 8006540:	d107      	bne.n	8006552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e06b      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d11b      	bne.n	80065cc <HAL_I2C_Mem_Write+0x180>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1aa      	bne.n	800652a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fe93 	bl	8007304 <I2C_WaitOnBTFFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d107      	bne.n	80065fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e016      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	00100002 	.word	0x00100002
 800663c:	ffff0000 	.word	0xffff0000

08006640 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	@ 0x30
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	461a      	mov	r2, r3
 800664e:	4603      	mov	r3, r0
 8006650:	817b      	strh	r3, [r7, #10]
 8006652:	460b      	mov	r3, r1
 8006654:	813b      	strh	r3, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800665a:	f7fc fced 	bl	8003038 <HAL_GetTick>
 800665e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	f040 8214 	bne.w	8006a96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2319      	movs	r3, #25
 8006674:	2201      	movs	r2, #1
 8006676:	497b      	ldr	r1, [pc, #492]	@ (8006864 <HAL_I2C_Mem_Read+0x224>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fce1 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
 8006686:	e207      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_I2C_Mem_Read+0x56>
 8006692:	2302      	movs	r3, #2
 8006694:	e200      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d007      	beq.n	80066bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2222      	movs	r2, #34	@ 0x22
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2240      	movs	r2, #64	@ 0x40
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006868 <HAL_I2C_Mem_Read+0x228>)
 80066fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066fe:	88f8      	ldrh	r0, [r7, #6]
 8006700:	893a      	ldrh	r2, [r7, #8]
 8006702:	8979      	ldrh	r1, [r7, #10]
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fbae 	bl	8006e70 <I2C_RequestMemoryRead>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e1bc      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d113      	bne.n	800674e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006726:	2300      	movs	r3, #0
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e190      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	2b01      	cmp	r3, #1
 8006754:	d11b      	bne.n	800678e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e170      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006792:	2b02      	cmp	r3, #2
 8006794:	d11b      	bne.n	80067ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	e150      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067e4:	e144      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	f200 80f1 	bhi.w	80069d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d123      	bne.n	8006840 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fdc9 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e145      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800683e:	e117      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006844:	2b02      	cmp	r3, #2
 8006846:	d14e      	bne.n	80068e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2200      	movs	r2, #0
 8006850:	4906      	ldr	r1, [pc, #24]	@ (800686c <HAL_I2C_Mem_Read+0x22c>)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fbf4 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e11a      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
 8006862:	bf00      	nop
 8006864:	00100002 	.word	0x00100002
 8006868:	ffff0000 	.word	0xffff0000
 800686c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800687e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068e4:	e0c4      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	2200      	movs	r2, #0
 80068ee:	496c      	ldr	r1, [pc, #432]	@ (8006aa0 <HAL_I2C_Mem_Read+0x460>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fba5 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0cb      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2200      	movs	r2, #0
 800694a:	4955      	ldr	r1, [pc, #340]	@ (8006aa0 <HAL_I2C_Mem_Read+0x460>)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fb77 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e09d      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800696a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069d0:	e04e      	b.n	8006a70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fcdc 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e058      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d124      	bne.n	8006a70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d107      	bne.n	8006a3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f aeb6 	bne.w	80067e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	@ 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	00010004 	.word	0x00010004

08006aa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d006      	beq.n	8006ace <I2C_MasterRequestWrite+0x2a>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d003      	beq.n	8006ace <I2C_MasterRequestWrite+0x2a>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006acc:	d108      	bne.n	8006ae0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e00b      	b.n	8006af8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae4:	2b12      	cmp	r3, #18
 8006ae6:	d107      	bne.n	8006af8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fa9b 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1e:	d103      	bne.n	8006b28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e035      	b.n	8006b98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b34:	d108      	bne.n	8006b48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b36:	897b      	ldrh	r3, [r7, #10]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b44:	611a      	str	r2, [r3, #16]
 8006b46:	e01b      	b.n	8006b80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b48:	897b      	ldrh	r3, [r7, #10]
 8006b4a:	11db      	asrs	r3, r3, #7
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0306 	and.w	r3, r3, #6
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f063 030f 	orn	r3, r3, #15
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	490e      	ldr	r1, [pc, #56]	@ (8006ba0 <I2C_MasterRequestWrite+0xfc>)
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fae4 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e010      	b.n	8006b98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b76:	897b      	ldrh	r3, [r7, #10]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4907      	ldr	r1, [pc, #28]	@ (8006ba4 <I2C_MasterRequestWrite+0x100>)
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fad4 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	00010008 	.word	0x00010008
 8006ba4:	00010002 	.word	0x00010002

08006ba8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d006      	beq.n	8006be2 <I2C_MasterRequestRead+0x3a>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d003      	beq.n	8006be2 <I2C_MasterRequestRead+0x3a>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006be0:	d108      	bne.n	8006bf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e00b      	b.n	8006c0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	2b11      	cmp	r3, #17
 8006bfa:	d107      	bne.n	8006c0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fa11 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c32:	d103      	bne.n	8006c3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e079      	b.n	8006d34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c48:	d108      	bne.n	8006c5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c4a:	897b      	ldrh	r3, [r7, #10]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]
 8006c5a:	e05f      	b.n	8006d1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c5c:	897b      	ldrh	r3, [r7, #10]
 8006c5e:	11db      	asrs	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 0306 	and.w	r3, r3, #6
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f063 030f 	orn	r3, r3, #15
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4930      	ldr	r1, [pc, #192]	@ (8006d3c <I2C_MasterRequestRead+0x194>)
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fa5a 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e054      	b.n	8006d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c8a:	897b      	ldrh	r3, [r7, #10]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4929      	ldr	r1, [pc, #164]	@ (8006d40 <I2C_MasterRequestRead+0x198>)
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fa4a 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e044      	b.n	8006d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f9af 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf6:	d103      	bne.n	8006d00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e017      	b.n	8006d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d04:	897b      	ldrh	r3, [r7, #10]
 8006d06:	11db      	asrs	r3, r3, #7
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0306 	and.w	r3, r3, #6
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f063 030e 	orn	r3, r3, #14
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4907      	ldr	r1, [pc, #28]	@ (8006d40 <I2C_MasterRequestRead+0x198>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fa06 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	00010008 	.word	0x00010008
 8006d40:	00010002 	.word	0x00010002

08006d44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	817b      	strh	r3, [r7, #10]
 8006d56:	460b      	mov	r3, r1
 8006d58:	813b      	strh	r3, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f960 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d94:	d103      	bne.n	8006d9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e05f      	b.n	8006e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006da2:	897b      	ldrh	r3, [r7, #10]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	492d      	ldr	r1, [pc, #180]	@ (8006e6c <I2C_RequestMemoryWrite+0x128>)
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f9bb 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e04c      	b.n	8006e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de0:	6a39      	ldr	r1, [r7, #32]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fa46 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d107      	bne.n	8006e06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e02b      	b.n	8006e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d105      	bne.n	8006e1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e10:	893b      	ldrh	r3, [r7, #8]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	611a      	str	r2, [r3, #16]
 8006e1a:	e021      	b.n	8006e60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2c:	6a39      	ldr	r1, [r7, #32]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fa20 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d107      	bne.n	8006e52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e005      	b.n	8006e62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e56:	893b      	ldrh	r3, [r7, #8]
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	00010002 	.word	0x00010002

08006e70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f8c2 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00d      	beq.n	8006ede <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d103      	bne.n	8006eda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e0aa      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ede:	897b      	ldrh	r3, [r7, #10]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	6a3a      	ldr	r2, [r7, #32]
 8006ef2:	4952      	ldr	r1, [pc, #328]	@ (800703c <I2C_RequestMemoryRead+0x1cc>)
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f91d 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e097      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1c:	6a39      	ldr	r1, [r7, #32]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f9a8 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d107      	bne.n	8006f42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e076      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d105      	bne.n	8006f58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f4c:	893b      	ldrh	r3, [r7, #8]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	611a      	str	r2, [r3, #16]
 8006f56:	e021      	b.n	8006f9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f58:	893b      	ldrh	r3, [r7, #8]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f982 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d107      	bne.n	8006f8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e050      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f92:	893b      	ldrh	r3, [r7, #8]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9e:	6a39      	ldr	r1, [r7, #32]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f967 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00d      	beq.n	8006fc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d107      	bne.n	8006fc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e035      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f82b 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00d      	beq.n	800700c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d103      	bne.n	8007008 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007006:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e013      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800700c:	897b      	ldrh	r3, [r7, #10]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	b2da      	uxtb	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	4906      	ldr	r1, [pc, #24]	@ (800703c <I2C_RequestMemoryRead+0x1cc>)
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f886 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	00010002 	.word	0x00010002

08007040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007050:	e048      	b.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d044      	beq.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705a:	f7fb ffed 	bl	8003038 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d139      	bne.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10d      	bne.n	8007096 <I2C_WaitOnFlagUntilTimeout+0x56>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	43da      	mvns	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	e00c      	b.n	80070b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	43da      	mvns	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4013      	ands	r3, r2
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d116      	bne.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e023      	b.n	800712c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10d      	bne.n	800710a <I2C_WaitOnFlagUntilTimeout+0xca>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	43da      	mvns	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	e00c      	b.n	8007124 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	43da      	mvns	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	429a      	cmp	r2, r3
 8007128:	d093      	beq.n	8007052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007142:	e071      	b.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007152:	d123      	bne.n	800719c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007162:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800716c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	f043 0204 	orr.w	r2, r3, #4
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e067      	b.n	800726c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d041      	beq.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a4:	f7fb ff48 	bl	8003038 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d302      	bcc.n	80071ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d136      	bne.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	0c1b      	lsrs	r3, r3, #16
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10c      	bne.n	80071de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e00b      	b.n	80071f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	43da      	mvns	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	f043 0220 	orr.w	r2, r3, #32
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e021      	b.n	800726c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	0c1b      	lsrs	r3, r3, #16
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10c      	bne.n	800724c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	43da      	mvns	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e00b      	b.n	8007264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	43da      	mvns	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4013      	ands	r3, r2
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	f47f af6d 	bne.w	8007144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007280:	e034      	b.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f8e3 	bl	800744e <I2C_IsAcknowledgeFailed>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e034      	b.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d028      	beq.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729a:	f7fb fecd 	bl	8003038 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11d      	bne.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ba:	2b80      	cmp	r3, #128	@ 0x80
 80072bc:	d016      	beq.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e007      	b.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d1c3      	bne.n	8007282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007310:	e034      	b.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f89b 	bl	800744e <I2C_IsAcknowledgeFailed>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e034      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d028      	beq.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fb fe85 	bl	8003038 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d11d      	bne.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b04      	cmp	r3, #4
 800734c:	d016      	beq.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e007      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d1c3      	bne.n	8007312 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a0:	e049      	b.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d119      	bne.n	80073e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0210 	mvn.w	r2, #16
 80073b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e030      	b.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e4:	f7fb fe28 	bl	8003038 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d302      	bcc.n	80073fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d11d      	bne.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007404:	2b40      	cmp	r3, #64	@ 0x40
 8007406:	d016      	beq.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e007      	b.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	d1ae      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007464:	d11b      	bne.n	800749e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800746e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f043 0204 	orr.w	r2, r3, #4
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0cc      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074c0:	4b68      	ldr	r3, [pc, #416]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d90c      	bls.n	80074e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ce:	4b65      	ldr	r3, [pc, #404]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d6:	4b63      	ldr	r3, [pc, #396]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d001      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0b8      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d020      	beq.n	8007536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007500:	4b59      	ldr	r3, [pc, #356]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4a58      	ldr	r2, [pc, #352]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800750a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007518:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4a52      	ldr	r2, [pc, #328]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007524:	4b50      	ldr	r3, [pc, #320]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	494d      	ldr	r1, [pc, #308]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	4313      	orrs	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d044      	beq.n	80075cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d107      	bne.n	800755a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754a:	4b47      	ldr	r3, [pc, #284]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d119      	bne.n	800758a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e07f      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d003      	beq.n	800756a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007566:	2b03      	cmp	r3, #3
 8007568:	d107      	bne.n	800757a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800756a:	4b3f      	ldr	r3, [pc, #252]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e06f      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800757a:	4b3b      	ldr	r3, [pc, #236]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e067      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800758a:	4b37      	ldr	r3, [pc, #220]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f023 0203 	bic.w	r2, r3, #3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4934      	ldr	r1, [pc, #208]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	4313      	orrs	r3, r2
 800759a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800759c:	f7fb fd4c 	bl	8003038 <HAL_GetTick>
 80075a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a2:	e00a      	b.n	80075ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a4:	f7fb fd48 	bl	8003038 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e04f      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 020c 	and.w	r2, r3, #12
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d1eb      	bne.n	80075a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075cc:	4b25      	ldr	r3, [pc, #148]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d20c      	bcs.n	80075f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075da:	4b22      	ldr	r3, [pc, #136]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e2:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <HAL_RCC_ClockConfig+0x1b8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d001      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e032      	b.n	800765a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007600:	4b19      	ldr	r3, [pc, #100]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4916      	ldr	r1, [pc, #88]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	4313      	orrs	r3, r2
 8007610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800761e:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	490e      	ldr	r1, [pc, #56]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007632:	f000 f855 	bl	80076e0 <HAL_RCC_GetSysClockFreq>
 8007636:	4602      	mov	r2, r0
 8007638:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	490a      	ldr	r1, [pc, #40]	@ (800766c <HAL_RCC_ClockConfig+0x1c0>)
 8007644:	5ccb      	ldrb	r3, [r1, r3]
 8007646:	fa22 f303 	lsr.w	r3, r2, r3
 800764a:	4a09      	ldr	r2, [pc, #36]	@ (8007670 <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800764e:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <HAL_RCC_ClockConfig+0x1c8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7fb fcac 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40023c00 	.word	0x40023c00
 8007668:	40023800 	.word	0x40023800
 800766c:	0800d954 	.word	0x0800d954
 8007670:	20000000 	.word	0x20000000
 8007674:	20000004 	.word	0x20000004

08007678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800767c:	4b03      	ldr	r3, [pc, #12]	@ (800768c <HAL_RCC_GetHCLKFreq+0x14>)
 800767e:	681b      	ldr	r3, [r3, #0]
}
 8007680:	4618      	mov	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20000000 	.word	0x20000000

08007690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007694:	f7ff fff0 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 8007698:	4602      	mov	r2, r0
 800769a:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	0a9b      	lsrs	r3, r3, #10
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	4903      	ldr	r1, [pc, #12]	@ (80076b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a6:	5ccb      	ldrb	r3, [r1, r3]
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40023800 	.word	0x40023800
 80076b4:	0800d964 	.word	0x0800d964

080076b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076bc:	f7ff ffdc 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0b5b      	lsrs	r3, r3, #13
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4903      	ldr	r1, [pc, #12]	@ (80076dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40023800 	.word	0x40023800
 80076dc:	0800d964 	.word	0x0800d964

080076e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b0ae      	sub	sp, #184	@ 0xb8
 80076e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007706:	4bcb      	ldr	r3, [pc, #812]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	2b0c      	cmp	r3, #12
 8007710:	f200 8206 	bhi.w	8007b20 <HAL_RCC_GetSysClockFreq+0x440>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	08007751 	.word	0x08007751
 8007720:	08007b21 	.word	0x08007b21
 8007724:	08007b21 	.word	0x08007b21
 8007728:	08007b21 	.word	0x08007b21
 800772c:	08007759 	.word	0x08007759
 8007730:	08007b21 	.word	0x08007b21
 8007734:	08007b21 	.word	0x08007b21
 8007738:	08007b21 	.word	0x08007b21
 800773c:	08007761 	.word	0x08007761
 8007740:	08007b21 	.word	0x08007b21
 8007744:	08007b21 	.word	0x08007b21
 8007748:	08007b21 	.word	0x08007b21
 800774c:	08007951 	.word	0x08007951
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007750:	4bb9      	ldr	r3, [pc, #740]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x358>)
 8007752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007756:	e1e7      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007758:	4bb8      	ldr	r3, [pc, #736]	@ (8007a3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800775a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800775e:	e1e3      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007760:	4bb4      	ldr	r3, [pc, #720]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800776c:	4bb1      	ldr	r3, [pc, #708]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d071      	beq.n	800785c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007778:	4bae      	ldr	r3, [pc, #696]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	099b      	lsrs	r3, r3, #6
 800777e:	2200      	movs	r2, #0
 8007780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007784:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800778c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800779a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800779e:	4622      	mov	r2, r4
 80077a0:	462b      	mov	r3, r5
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	0159      	lsls	r1, r3, #5
 80077ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077b0:	0150      	lsls	r0, r2, #5
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4621      	mov	r1, r4
 80077b8:	1a51      	subs	r1, r2, r1
 80077ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80077bc:	4629      	mov	r1, r5
 80077be:	eb63 0301 	sbc.w	r3, r3, r1
 80077c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80077d0:	4649      	mov	r1, r9
 80077d2:	018b      	lsls	r3, r1, #6
 80077d4:	4641      	mov	r1, r8
 80077d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077da:	4641      	mov	r1, r8
 80077dc:	018a      	lsls	r2, r1, #6
 80077de:	4641      	mov	r1, r8
 80077e0:	1a51      	subs	r1, r2, r1
 80077e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077e4:	4649      	mov	r1, r9
 80077e6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80077f8:	4649      	mov	r1, r9
 80077fa:	00cb      	lsls	r3, r1, #3
 80077fc:	4641      	mov	r1, r8
 80077fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007802:	4641      	mov	r1, r8
 8007804:	00ca      	lsls	r2, r1, #3
 8007806:	4610      	mov	r0, r2
 8007808:	4619      	mov	r1, r3
 800780a:	4603      	mov	r3, r0
 800780c:	4622      	mov	r2, r4
 800780e:	189b      	adds	r3, r3, r2
 8007810:	633b      	str	r3, [r7, #48]	@ 0x30
 8007812:	462b      	mov	r3, r5
 8007814:	460a      	mov	r2, r1
 8007816:	eb42 0303 	adc.w	r3, r2, r3
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007828:	4629      	mov	r1, r5
 800782a:	024b      	lsls	r3, r1, #9
 800782c:	4621      	mov	r1, r4
 800782e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007832:	4621      	mov	r1, r4
 8007834:	024a      	lsls	r2, r1, #9
 8007836:	4610      	mov	r0, r2
 8007838:	4619      	mov	r1, r3
 800783a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800783e:	2200      	movs	r2, #0
 8007840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007844:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007848:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800784c:	f7f9 fa1c 	bl	8000c88 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4613      	mov	r3, r2
 8007856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800785a:	e067      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785c:	4b75      	ldr	r3, [pc, #468]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	099b      	lsrs	r3, r3, #6
 8007862:	2200      	movs	r2, #0
 8007864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007868:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800786c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007876:	2300      	movs	r3, #0
 8007878:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800787a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f04f 0100 	mov.w	r1, #0
 800788a:	0159      	lsls	r1, r3, #5
 800788c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007890:	0150      	lsls	r0, r2, #5
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4621      	mov	r1, r4
 8007898:	1a51      	subs	r1, r2, r1
 800789a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800789c:	4629      	mov	r1, r5
 800789e:	eb63 0301 	sbc.w	r3, r3, r1
 80078a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80078b0:	4649      	mov	r1, r9
 80078b2:	018b      	lsls	r3, r1, #6
 80078b4:	4641      	mov	r1, r8
 80078b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078ba:	4641      	mov	r1, r8
 80078bc:	018a      	lsls	r2, r1, #6
 80078be:	4641      	mov	r1, r8
 80078c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80078c4:	4649      	mov	r1, r9
 80078c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078de:	4692      	mov	sl, r2
 80078e0:	469b      	mov	fp, r3
 80078e2:	4623      	mov	r3, r4
 80078e4:	eb1a 0303 	adds.w	r3, sl, r3
 80078e8:	623b      	str	r3, [r7, #32]
 80078ea:	462b      	mov	r3, r5
 80078ec:	eb4b 0303 	adc.w	r3, fp, r3
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80078fe:	4629      	mov	r1, r5
 8007900:	028b      	lsls	r3, r1, #10
 8007902:	4621      	mov	r1, r4
 8007904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007908:	4621      	mov	r1, r4
 800790a:	028a      	lsls	r2, r1, #10
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007914:	2200      	movs	r2, #0
 8007916:	673b      	str	r3, [r7, #112]	@ 0x70
 8007918:	677a      	str	r2, [r7, #116]	@ 0x74
 800791a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800791e:	f7f9 f9b3 	bl	8000c88 <__aeabi_uldivmod>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4613      	mov	r3, r2
 8007928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800792c:	4b41      	ldr	r3, [pc, #260]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	0c1b      	lsrs	r3, r3, #16
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	3301      	adds	r3, #1
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800793e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007946:	fbb2 f3f3 	udiv	r3, r2, r3
 800794a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800794e:	e0eb      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007950:	4b38      	ldr	r3, [pc, #224]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800795c:	4b35      	ldr	r3, [pc, #212]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d06b      	beq.n	8007a40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007968:	4b32      	ldr	r3, [pc, #200]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0x354>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	099b      	lsrs	r3, r3, #6
 800796e:	2200      	movs	r2, #0
 8007970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007974:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	663b      	str	r3, [r7, #96]	@ 0x60
 800797c:	2300      	movs	r3, #0
 800797e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007980:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007984:	4622      	mov	r2, r4
 8007986:	462b      	mov	r3, r5
 8007988:	f04f 0000 	mov.w	r0, #0
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	0159      	lsls	r1, r3, #5
 8007992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007996:	0150      	lsls	r0, r2, #5
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4621      	mov	r1, r4
 800799e:	1a51      	subs	r1, r2, r1
 80079a0:	61b9      	str	r1, [r7, #24]
 80079a2:	4629      	mov	r1, r5
 80079a4:	eb63 0301 	sbc.w	r3, r3, r1
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80079b6:	4659      	mov	r1, fp
 80079b8:	018b      	lsls	r3, r1, #6
 80079ba:	4651      	mov	r1, sl
 80079bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079c0:	4651      	mov	r1, sl
 80079c2:	018a      	lsls	r2, r1, #6
 80079c4:	4651      	mov	r1, sl
 80079c6:	ebb2 0801 	subs.w	r8, r2, r1
 80079ca:	4659      	mov	r1, fp
 80079cc:	eb63 0901 	sbc.w	r9, r3, r1
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079e4:	4690      	mov	r8, r2
 80079e6:	4699      	mov	r9, r3
 80079e8:	4623      	mov	r3, r4
 80079ea:	eb18 0303 	adds.w	r3, r8, r3
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	462b      	mov	r3, r5
 80079f2:	eb49 0303 	adc.w	r3, r9, r3
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007a04:	4629      	mov	r1, r5
 8007a06:	024b      	lsls	r3, r1, #9
 8007a08:	4621      	mov	r1, r4
 8007a0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a0e:	4621      	mov	r1, r4
 8007a10:	024a      	lsls	r2, r1, #9
 8007a12:	4610      	mov	r0, r2
 8007a14:	4619      	mov	r1, r3
 8007a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007a20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a24:	f7f9 f930 	bl	8000c88 <__aeabi_uldivmod>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a32:	e065      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x420>
 8007a34:	40023800 	.word	0x40023800
 8007a38:	00f42400 	.word	0x00f42400
 8007a3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a40:	4b3d      	ldr	r3, [pc, #244]	@ (8007b38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	099b      	lsrs	r3, r3, #6
 8007a46:	2200      	movs	r2, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a50:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a52:	2300      	movs	r3, #0
 8007a54:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007a5a:	4642      	mov	r2, r8
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	f04f 0000 	mov.w	r0, #0
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	0159      	lsls	r1, r3, #5
 8007a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a6c:	0150      	lsls	r0, r2, #5
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4641      	mov	r1, r8
 8007a74:	1a51      	subs	r1, r2, r1
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	4649      	mov	r1, r9
 8007a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	018b      	lsls	r3, r1, #6
 8007a90:	4651      	mov	r1, sl
 8007a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a96:	4651      	mov	r1, sl
 8007a98:	018a      	lsls	r2, r1, #6
 8007a9a:	4651      	mov	r1, sl
 8007a9c:	1a54      	subs	r4, r2, r1
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	eb63 0501 	sbc.w	r5, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	00eb      	lsls	r3, r5, #3
 8007aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab2:	00e2      	lsls	r2, r4, #3
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	4643      	mov	r3, r8
 8007aba:	18e3      	adds	r3, r4, r3
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	464b      	mov	r3, r9
 8007ac0:	eb45 0303 	adc.w	r3, r5, r3
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	028b      	lsls	r3, r1, #10
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007adc:	4621      	mov	r1, r4
 8007ade:	028a      	lsls	r2, r1, #10
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ae8:	2200      	movs	r2, #0
 8007aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007aee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007af2:	f7f9 f8c9 	bl	8000c88 <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4613      	mov	r3, r2
 8007afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b00:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	0f1b      	lsrs	r3, r3, #28
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b1e:	e003      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b20:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	37b8      	adds	r7, #184	@ 0xb8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	00f42400 	.word	0x00f42400

08007b40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e28d      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8083 	beq.w	8007c66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b60:	4b94      	ldr	r3, [pc, #592]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 030c 	and.w	r3, r3, #12
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d019      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b6c:	4b91      	ldr	r3, [pc, #580]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 030c 	and.w	r3, r3, #12
        || \
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d106      	bne.n	8007b86 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b78:	4b8e      	ldr	r3, [pc, #568]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b84:	d00c      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b86:	4b8b      	ldr	r3, [pc, #556]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b8e:	2b0c      	cmp	r3, #12
 8007b90:	d112      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b92:	4b88      	ldr	r3, [pc, #544]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b9e:	d10b      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba0:	4b84      	ldr	r3, [pc, #528]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05b      	beq.n	8007c64 <HAL_RCC_OscConfig+0x124>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d157      	bne.n	8007c64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e25a      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc0:	d106      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x90>
 8007bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	e01d      	b.n	8007c0c <HAL_RCC_OscConfig+0xcc>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bd8:	d10c      	bne.n	8007bf4 <HAL_RCC_OscConfig+0xb4>
 8007bda:	4b76      	ldr	r3, [pc, #472]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a75      	ldr	r2, [pc, #468]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	4b73      	ldr	r3, [pc, #460]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a72      	ldr	r2, [pc, #456]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e00b      	b.n	8007c0c <HAL_RCC_OscConfig+0xcc>
 8007bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	4b6c      	ldr	r3, [pc, #432]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6b      	ldr	r2, [pc, #428]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d013      	beq.n	8007c3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c14:	f7fb fa10 	bl	8003038 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c1c:	f7fb fa0c 	bl	8003038 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b64      	cmp	r3, #100	@ 0x64
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e21f      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c2e:	4b61      	ldr	r3, [pc, #388]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0xdc>
 8007c3a:	e014      	b.n	8007c66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fb f9fc 	bl	8003038 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fb f9f8 	bl	8003038 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b64      	cmp	r3, #100	@ 0x64
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e20b      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c56:	4b57      	ldr	r3, [pc, #348]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1f0      	bne.n	8007c44 <HAL_RCC_OscConfig+0x104>
 8007c62:	e000      	b.n	8007c66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d06f      	beq.n	8007d52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c72:	4b50      	ldr	r3, [pc, #320]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 030c 	and.w	r3, r3, #12
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 030c 	and.w	r3, r3, #12
        || \
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d105      	bne.n	8007c96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c96:	4b47      	ldr	r3, [pc, #284]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d11c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ca2:	4b44      	ldr	r3, [pc, #272]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d116      	bne.n	8007cdc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cae:	4b41      	ldr	r3, [pc, #260]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x186>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e1d3      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4937      	ldr	r1, [pc, #220]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cda:	e03a      	b.n	8007d52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d020      	beq.n	8007d26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ce4:	4b34      	ldr	r3, [pc, #208]	@ (8007db8 <HAL_RCC_OscConfig+0x278>)
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fb f9a5 	bl	8003038 <HAL_GetTick>
 8007cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf0:	e008      	b.n	8007d04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf2:	f7fb f9a1 	bl	8003038 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e1b4      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d04:	4b2b      	ldr	r3, [pc, #172]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0f0      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d10:	4b28      	ldr	r3, [pc, #160]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4925      	ldr	r1, [pc, #148]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	600b      	str	r3, [r1, #0]
 8007d24:	e015      	b.n	8007d52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <HAL_RCC_OscConfig+0x278>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7fb f984 	bl	8003038 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d34:	f7fb f980 	bl	8003038 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e193      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d46:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d036      	beq.n	8007dcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d016      	beq.n	8007d94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d66:	4b15      	ldr	r3, [pc, #84]	@ (8007dbc <HAL_RCC_OscConfig+0x27c>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6c:	f7fb f964 	bl	8003038 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d74:	f7fb f960 	bl	8003038 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e173      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <HAL_RCC_OscConfig+0x274>)
 8007d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0x234>
 8007d92:	e01b      	b.n	8007dcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d94:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <HAL_RCC_OscConfig+0x27c>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9a:	f7fb f94d 	bl	8003038 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007da0:	e00e      	b.n	8007dc0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007da2:	f7fb f949 	bl	8003038 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d907      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e15c      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
 8007db4:	40023800 	.word	0x40023800
 8007db8:	42470000 	.word	0x42470000
 8007dbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1ea      	bne.n	8007da2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8097 	beq.w	8007f08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dde:	4b83      	ldr	r3, [pc, #524]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10f      	bne.n	8007e0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	4b7f      	ldr	r3, [pc, #508]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	4a7e      	ldr	r2, [pc, #504]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e02:	60bb      	str	r3, [r7, #8]
 8007e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0a:	4b79      	ldr	r3, [pc, #484]	@ (8007ff0 <HAL_RCC_OscConfig+0x4b0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d118      	bne.n	8007e48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e16:	4b76      	ldr	r3, [pc, #472]	@ (8007ff0 <HAL_RCC_OscConfig+0x4b0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a75      	ldr	r2, [pc, #468]	@ (8007ff0 <HAL_RCC_OscConfig+0x4b0>)
 8007e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e22:	f7fb f909 	bl	8003038 <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e28:	e008      	b.n	8007e3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e2a:	f7fb f905 	bl	8003038 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e118      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8007ff0 <HAL_RCC_OscConfig+0x4b0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0f0      	beq.n	8007e2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d106      	bne.n	8007e5e <HAL_RCC_OscConfig+0x31e>
 8007e50:	4b66      	ldr	r3, [pc, #408]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e54:	4a65      	ldr	r2, [pc, #404]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e5c:	e01c      	b.n	8007e98 <HAL_RCC_OscConfig+0x358>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCC_OscConfig+0x340>
 8007e66:	4b61      	ldr	r3, [pc, #388]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6a:	4a60      	ldr	r2, [pc, #384]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e6c:	f043 0304 	orr.w	r3, r3, #4
 8007e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e72:	4b5e      	ldr	r3, [pc, #376]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e76:	4a5d      	ldr	r2, [pc, #372]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e7e:	e00b      	b.n	8007e98 <HAL_RCC_OscConfig+0x358>
 8007e80:	4b5a      	ldr	r3, [pc, #360]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e84:	4a59      	ldr	r2, [pc, #356]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e8c:	4b57      	ldr	r3, [pc, #348]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e90:	4a56      	ldr	r2, [pc, #344]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007e92:	f023 0304 	bic.w	r3, r3, #4
 8007e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea0:	f7fb f8ca 	bl	8003038 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea6:	e00a      	b.n	8007ebe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea8:	f7fb f8c6 	bl	8003038 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e0d7      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0ee      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x368>
 8007eca:	e014      	b.n	8007ef6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ecc:	f7fb f8b4 	bl	8003038 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ed2:	e00a      	b.n	8007eea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed4:	f7fb f8b0 	bl	8003038 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e0c1      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eea:	4b40      	ldr	r3, [pc, #256]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1ee      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d105      	bne.n	8007f08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007efc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f00:	4a3a      	ldr	r2, [pc, #232]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 80ad 	beq.w	800806c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f12:	4b36      	ldr	r3, [pc, #216]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f003 030c 	and.w	r3, r3, #12
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	d060      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d145      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f26:	4b33      	ldr	r3, [pc, #204]	@ (8007ff4 <HAL_RCC_OscConfig+0x4b4>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fb f884 	bl	8003038 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f34:	f7fb f880 	bl	8003038 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e093      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f46:	4b29      	ldr	r3, [pc, #164]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	019b      	lsls	r3, r3, #6
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7c:	071b      	lsls	r3, r3, #28
 8007f7e:	491b      	ldr	r1, [pc, #108]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f84:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff4 <HAL_RCC_OscConfig+0x4b4>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8a:	f7fb f855 	bl	8003038 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f92:	f7fb f851 	bl	8003038 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e064      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fa4:	4b11      	ldr	r3, [pc, #68]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x452>
 8007fb0:	e05c      	b.n	800806c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <HAL_RCC_OscConfig+0x4b4>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fb f83e 	bl	8003038 <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc0:	f7fb f83a 	bl	8003038 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e04d      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd2:	4b06      	ldr	r3, [pc, #24]	@ (8007fec <HAL_RCC_OscConfig+0x4ac>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f0      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x480>
 8007fde:	e045      	b.n	800806c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e040      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40007000 	.word	0x40007000
 8007ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8008078 <HAL_RCC_OscConfig+0x538>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d030      	beq.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008010:	429a      	cmp	r2, r3
 8008012:	d129      	bne.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800801e:	429a      	cmp	r2, r3
 8008020:	d122      	bne.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008028:	4013      	ands	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800802e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008030:	4293      	cmp	r3, r2
 8008032:	d119      	bne.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803e:	085b      	lsrs	r3, r3, #1
 8008040:	3b01      	subs	r3, #1
 8008042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d10f      	bne.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008054:	429a      	cmp	r2, r3
 8008056:	d107      	bne.n	8008068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008062:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008064:	429a      	cmp	r2, r3
 8008066:	d001      	beq.n	800806c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40023800 	.word	0x40023800

0800807c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e041      	b.n	8008112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa fd2c 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f000 fbf0 	bl	80088a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e041      	b.n	80081b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fa fcbb 	bl	8002abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 fba1 	bl	80088a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <HAL_TIM_PWM_Start+0x24>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	e022      	b.n	8008222 <HAL_TIM_PWM_Start+0x6a>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d109      	bne.n	80081f6 <HAL_TIM_PWM_Start+0x3e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	bf14      	ite	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	2300      	moveq	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	e015      	b.n	8008222 <HAL_TIM_PWM_Start+0x6a>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d109      	bne.n	8008210 <HAL_TIM_PWM_Start+0x58>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	e008      	b.n	8008222 <HAL_TIM_PWM_Start+0x6a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf14      	ite	ne
 800821c:	2301      	movne	r3, #1
 800821e:	2300      	moveq	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e07c      	b.n	8008324 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Start+0x82>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008238:	e013      	b.n	8008262 <HAL_TIM_PWM_Start+0xaa>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Start+0x92>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008248:	e00b      	b.n	8008262 <HAL_TIM_PWM_Start+0xaa>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008258:	e003      	b.n	8008262 <HAL_TIM_PWM_Start+0xaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2201      	movs	r2, #1
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fe0e 	bl	8008e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2d      	ldr	r2, [pc, #180]	@ (800832c <HAL_TIM_PWM_Start+0x174>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIM_PWM_Start+0xcc>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2c      	ldr	r2, [pc, #176]	@ (8008330 <HAL_TIM_PWM_Start+0x178>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d101      	bne.n	8008288 <HAL_TIM_PWM_Start+0xd0>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <HAL_TIM_PWM_Start+0xd2>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800829c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a22      	ldr	r2, [pc, #136]	@ (800832c <HAL_TIM_PWM_Start+0x174>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d022      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b0:	d01d      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008334 <HAL_TIM_PWM_Start+0x17c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d018      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008338 <HAL_TIM_PWM_Start+0x180>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1c      	ldr	r2, [pc, #112]	@ (800833c <HAL_TIM_PWM_Start+0x184>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00e      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a16      	ldr	r2, [pc, #88]	@ (8008330 <HAL_TIM_PWM_Start+0x178>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a18      	ldr	r2, [pc, #96]	@ (8008340 <HAL_TIM_PWM_Start+0x188>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d004      	beq.n	80082ee <HAL_TIM_PWM_Start+0x136>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a16      	ldr	r2, [pc, #88]	@ (8008344 <HAL_TIM_PWM_Start+0x18c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d111      	bne.n	8008312 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	d010      	beq.n	8008322 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	e007      	b.n	8008322 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40010000 	.word	0x40010000
 8008330:	40010400 	.word	0x40010400
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40014000 	.word	0x40014000
 8008344:	40001800 	.word	0x40001800

08008348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d020      	beq.n	80083ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01b      	beq.n	80083ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f06f 0202 	mvn.w	r2, #2
 800837c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa65 	bl	8008862 <HAL_TIM_IC_CaptureCallback>
 8008398:	e005      	b.n	80083a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa57 	bl	800884e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa68 	bl	8008876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f003 0304 	and.w	r3, r3, #4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d020      	beq.n	80083f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01b      	beq.n	80083f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0204 	mvn.w	r2, #4
 80083c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa3f 	bl	8008862 <HAL_TIM_IC_CaptureCallback>
 80083e4:	e005      	b.n	80083f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa31 	bl	800884e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa42 	bl	8008876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d020      	beq.n	8008444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01b      	beq.n	8008444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0208 	mvn.w	r2, #8
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2204      	movs	r2, #4
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa19 	bl	8008862 <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa0b 	bl	800884e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa1c 	bl	8008876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b00      	cmp	r3, #0
 800844c:	d020      	beq.n	8008490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0210 	mvn.w	r2, #16
 8008460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2208      	movs	r2, #8
 8008466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9f3 	bl	8008862 <HAL_TIM_IC_CaptureCallback>
 800847c:	e005      	b.n	800848a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9e5 	bl	800884e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f9f6 	bl	8008876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0201 	mvn.w	r2, #1
 80084ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9c3 	bl	800883a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fdd8 	bl	8009088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00c      	beq.n	80084fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9c7 	bl	800888a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f06f 0220 	mvn.w	r2, #32
 8008518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fdaa 	bl	8009074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008542:	2302      	movs	r3, #2
 8008544:	e0ae      	b.n	80086a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b0c      	cmp	r3, #12
 8008552:	f200 809f 	bhi.w	8008694 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008556:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008591 	.word	0x08008591
 8008560:	08008695 	.word	0x08008695
 8008564:	08008695 	.word	0x08008695
 8008568:	08008695 	.word	0x08008695
 800856c:	080085d1 	.word	0x080085d1
 8008570:	08008695 	.word	0x08008695
 8008574:	08008695 	.word	0x08008695
 8008578:	08008695 	.word	0x08008695
 800857c:	08008613 	.word	0x08008613
 8008580:	08008695 	.word	0x08008695
 8008584:	08008695 	.word	0x08008695
 8008588:	08008695 	.word	0x08008695
 800858c:	08008653 	.word	0x08008653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68b9      	ldr	r1, [r7, #8]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fa2e 	bl	80089f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699a      	ldr	r2, [r3, #24]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0208 	orr.w	r2, r2, #8
 80085aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0204 	bic.w	r2, r2, #4
 80085ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6999      	ldr	r1, [r3, #24]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	619a      	str	r2, [r3, #24]
      break;
 80085ce:	e064      	b.n	800869a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fa7e 	bl	8008ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6999      	ldr	r1, [r3, #24]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	021a      	lsls	r2, r3, #8
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	619a      	str	r2, [r3, #24]
      break;
 8008610:	e043      	b.n	800869a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fad3 	bl	8008bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0208 	orr.w	r2, r2, #8
 800862c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0204 	bic.w	r2, r2, #4
 800863c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69d9      	ldr	r1, [r3, #28]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	61da      	str	r2, [r3, #28]
      break;
 8008650:	e023      	b.n	800869a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fb27 	bl	8008cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800866c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69da      	ldr	r2, [r3, #28]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69d9      	ldr	r1, [r3, #28]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	021a      	lsls	r2, r3, #8
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	61da      	str	r2, [r3, #28]
      break;
 8008692:	e002      	b.n	800869a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]
      break;
 8008698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIM_ConfigClockSource+0x1c>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e0b4      	b.n	8008832 <HAL_TIM_ConfigClockSource+0x186>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008700:	d03e      	beq.n	8008780 <HAL_TIM_ConfigClockSource+0xd4>
 8008702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008706:	f200 8087 	bhi.w	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 800870a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800870e:	f000 8086 	beq.w	800881e <HAL_TIM_ConfigClockSource+0x172>
 8008712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008716:	d87f      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008718:	2b70      	cmp	r3, #112	@ 0x70
 800871a:	d01a      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0xa6>
 800871c:	2b70      	cmp	r3, #112	@ 0x70
 800871e:	d87b      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008720:	2b60      	cmp	r3, #96	@ 0x60
 8008722:	d050      	beq.n	80087c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008724:	2b60      	cmp	r3, #96	@ 0x60
 8008726:	d877      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008728:	2b50      	cmp	r3, #80	@ 0x50
 800872a:	d03c      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0xfa>
 800872c:	2b50      	cmp	r3, #80	@ 0x50
 800872e:	d873      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008730:	2b40      	cmp	r3, #64	@ 0x40
 8008732:	d058      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008734:	2b40      	cmp	r3, #64	@ 0x40
 8008736:	d86f      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008738:	2b30      	cmp	r3, #48	@ 0x30
 800873a:	d064      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0x15a>
 800873c:	2b30      	cmp	r3, #48	@ 0x30
 800873e:	d86b      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008740:	2b20      	cmp	r3, #32
 8008742:	d060      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0x15a>
 8008744:	2b20      	cmp	r3, #32
 8008746:	d867      	bhi.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d05c      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0x15a>
 800874c:	2b10      	cmp	r3, #16
 800874e:	d05a      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0x15a>
 8008750:	e062      	b.n	8008818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008762:	f000 fb73 	bl	8008e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	609a      	str	r2, [r3, #8]
      break;
 800877e:	e04f      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008790:	f000 fb5c 	bl	8008e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087a2:	609a      	str	r2, [r3, #8]
      break;
 80087a4:	e03c      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087b2:	461a      	mov	r2, r3
 80087b4:	f000 fad0 	bl	8008d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2150      	movs	r1, #80	@ 0x50
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fb29 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 80087c4:	e02c      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087d2:	461a      	mov	r2, r3
 80087d4:	f000 faef 	bl	8008db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2160      	movs	r1, #96	@ 0x60
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb19 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 80087e4:	e01c      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f2:	461a      	mov	r2, r3
 80087f4:	f000 fab0 	bl	8008d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2140      	movs	r1, #64	@ 0x40
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fb09 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008804:	e00c      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f000 fb00 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008816:	e003      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
      break;
 800881c:	e000      	b.n	8008820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800881e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
	...

080088a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a46      	ldr	r2, [pc, #280]	@ (80089cc <TIM_Base_SetConfig+0x12c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088be:	d00f      	beq.n	80088e0 <TIM_Base_SetConfig+0x40>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a43      	ldr	r2, [pc, #268]	@ (80089d0 <TIM_Base_SetConfig+0x130>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00b      	beq.n	80088e0 <TIM_Base_SetConfig+0x40>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a42      	ldr	r2, [pc, #264]	@ (80089d4 <TIM_Base_SetConfig+0x134>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_Base_SetConfig+0x40>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a41      	ldr	r2, [pc, #260]	@ (80089d8 <TIM_Base_SetConfig+0x138>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_Base_SetConfig+0x40>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a40      	ldr	r2, [pc, #256]	@ (80089dc <TIM_Base_SetConfig+0x13c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d108      	bne.n	80088f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a35      	ldr	r2, [pc, #212]	@ (80089cc <TIM_Base_SetConfig+0x12c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d02b      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008900:	d027      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a32      	ldr	r2, [pc, #200]	@ (80089d0 <TIM_Base_SetConfig+0x130>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d023      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a31      	ldr	r2, [pc, #196]	@ (80089d4 <TIM_Base_SetConfig+0x134>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01f      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a30      	ldr	r2, [pc, #192]	@ (80089d8 <TIM_Base_SetConfig+0x138>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d01b      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2f      	ldr	r2, [pc, #188]	@ (80089dc <TIM_Base_SetConfig+0x13c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d017      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2e      	ldr	r2, [pc, #184]	@ (80089e0 <TIM_Base_SetConfig+0x140>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2d      	ldr	r2, [pc, #180]	@ (80089e4 <TIM_Base_SetConfig+0x144>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00f      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <TIM_Base_SetConfig+0x148>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00b      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2b      	ldr	r2, [pc, #172]	@ (80089ec <TIM_Base_SetConfig+0x14c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d007      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a2a      	ldr	r2, [pc, #168]	@ (80089f0 <TIM_Base_SetConfig+0x150>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d003      	beq.n	8008952 <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a29      	ldr	r2, [pc, #164]	@ (80089f4 <TIM_Base_SetConfig+0x154>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d108      	bne.n	8008964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a10      	ldr	r2, [pc, #64]	@ (80089cc <TIM_Base_SetConfig+0x12c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_Base_SetConfig+0xf8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a12      	ldr	r2, [pc, #72]	@ (80089dc <TIM_Base_SetConfig+0x13c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d103      	bne.n	80089a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d105      	bne.n	80089be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f023 0201 	bic.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	611a      	str	r2, [r3, #16]
  }
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40010400 	.word	0x40010400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400
 80089e8:	40014800 	.word	0x40014800
 80089ec:	40001800 	.word	0x40001800
 80089f0:	40001c00 	.word	0x40001c00
 80089f4:	40002000 	.word	0x40002000

080089f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f023 0201 	bic.w	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f023 0302 	bic.w	r3, r3, #2
 8008a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a20      	ldr	r2, [pc, #128]	@ (8008ad0 <TIM_OC1_SetConfig+0xd8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d003      	beq.n	8008a5c <TIM_OC1_SetConfig+0x64>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a1f      	ldr	r2, [pc, #124]	@ (8008ad4 <TIM_OC1_SetConfig+0xdc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d10c      	bne.n	8008a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0308 	bic.w	r3, r3, #8
 8008a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f023 0304 	bic.w	r3, r3, #4
 8008a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a15      	ldr	r2, [pc, #84]	@ (8008ad0 <TIM_OC1_SetConfig+0xd8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d003      	beq.n	8008a86 <TIM_OC1_SetConfig+0x8e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a14      	ldr	r2, [pc, #80]	@ (8008ad4 <TIM_OC1_SetConfig+0xdc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d111      	bne.n	8008aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	621a      	str	r2, [r3, #32]
}
 8008ac4:	bf00      	nop
 8008ac6:	371c      	adds	r7, #28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40010400 	.word	0x40010400

08008ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f023 0210 	bic.w	r2, r3, #16
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f023 0320 	bic.w	r3, r3, #32
 8008b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a22      	ldr	r2, [pc, #136]	@ (8008bbc <TIM_OC2_SetConfig+0xe4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_OC2_SetConfig+0x68>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a21      	ldr	r2, [pc, #132]	@ (8008bc0 <TIM_OC2_SetConfig+0xe8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10d      	bne.n	8008b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a17      	ldr	r2, [pc, #92]	@ (8008bbc <TIM_OC2_SetConfig+0xe4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_OC2_SetConfig+0x94>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a16      	ldr	r2, [pc, #88]	@ (8008bc0 <TIM_OC2_SetConfig+0xe8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d113      	bne.n	8008b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400

08008bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a21      	ldr	r2, [pc, #132]	@ (8008ca4 <TIM_OC3_SetConfig+0xe0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d003      	beq.n	8008c2a <TIM_OC3_SetConfig+0x66>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a20      	ldr	r2, [pc, #128]	@ (8008ca8 <TIM_OC3_SetConfig+0xe4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d10d      	bne.n	8008c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	021b      	lsls	r3, r3, #8
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a16      	ldr	r2, [pc, #88]	@ (8008ca4 <TIM_OC3_SetConfig+0xe0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_OC3_SetConfig+0x92>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a15      	ldr	r2, [pc, #84]	@ (8008ca8 <TIM_OC3_SetConfig+0xe4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d113      	bne.n	8008c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	621a      	str	r2, [r3, #32]
}
 8008c98:	bf00      	nop
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	40010000 	.word	0x40010000
 8008ca8:	40010400 	.word	0x40010400

08008cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	031b      	lsls	r3, r3, #12
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a12      	ldr	r2, [pc, #72]	@ (8008d50 <TIM_OC4_SetConfig+0xa4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC4_SetConfig+0x68>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <TIM_OC4_SetConfig+0xa8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d109      	bne.n	8008d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	019b      	lsls	r3, r3, #6
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	40010000 	.word	0x40010000
 8008d54:	40010400 	.word	0x40010400

08008d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0201 	bic.w	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f023 030a 	bic.w	r3, r3, #10
 8008d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	621a      	str	r2, [r3, #32]
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f023 0210 	bic.w	r2, r3, #16
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f043 0307 	orr.w	r3, r3, #7
 8008e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	609a      	str	r2, [r3, #8]
}
 8008e40:	bf00      	nop
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	021a      	lsls	r2, r3, #8
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	609a      	str	r2, [r3, #8]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f003 031f 	and.w	r3, r3, #31
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a1a      	ldr	r2, [r3, #32]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	401a      	ands	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 031f 	and.w	r3, r3, #31
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e05a      	b.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a21      	ldr	r2, [pc, #132]	@ (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d022      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3c:	d01d      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d018      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d013      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00e      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a18      	ldr	r2, [pc, #96]	@ (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d009      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a17      	ldr	r2, [pc, #92]	@ (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d004      	beq.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a15      	ldr	r2, [pc, #84]	@ (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d10c      	bne.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40010400 	.word	0x40010400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40001800 	.word	0x40001800

08008fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e03d      	b.n	8009068 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e042      	b.n	8009134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 fd92 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2224      	movs	r2, #36	@ 0x24
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fdbd 	bl	8009c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af02      	add	r7, sp, #8
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	4613      	mov	r3, r2
 800914a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b20      	cmp	r3, #32
 800915a:	d175      	bne.n	8009248 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_UART_Transmit+0x2c>
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e06e      	b.n	800924a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2221      	movs	r2, #33	@ 0x21
 8009176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800917a:	f7f9 ff5d 	bl	8003038 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009194:	d108      	bne.n	80091a8 <HAL_UART_Transmit+0x6c>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e003      	b.n	80091b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091b0:	e02e      	b.n	8009210 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2200      	movs	r2, #0
 80091ba:	2180      	movs	r1, #128	@ 0x80
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fb1f 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e03a      	b.n	800924a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	3302      	adds	r3, #2
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e007      	b.n	8009202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	3301      	adds	r3, #1
 8009200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1cb      	bne.n	80091b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2140      	movs	r1, #64	@ 0x40
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 faeb 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e006      	b.n	800924a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009248:	2302      	movs	r3, #2
  }
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	4613      	mov	r3, r2
 800925e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b20      	cmp	r3, #32
 800926a:	d112      	bne.n	8009292 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_UART_Receive_IT+0x26>
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e00b      	b.n	8009294 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	461a      	mov	r2, r3
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fb12 	bl	80098b2 <UART_Start_Receive_IT>
 800928e:	4603      	mov	r3, r0
 8009290:	e000      	b.n	8009294 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009292:	2302      	movs	r3, #2
  }
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b0ba      	sub	sp, #232	@ 0xe8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80092da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10f      	bne.n	8009302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_UART_IRQHandler+0x66>
 80092ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fbf2 	bl	8009ae4 <UART_Receive_IT>
      return;
 8009300:	e25b      	b.n	80097ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 80de 	beq.w	80094c8 <HAL_UART_IRQHandler+0x22c>
 800930c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800931c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80d1 	beq.w	80094c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <HAL_UART_IRQHandler+0xae>
 8009332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009342:	f043 0201 	orr.w	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <HAL_UART_IRQHandler+0xd2>
 8009356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009366:	f043 0202 	orr.w	r2, r3, #2
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <HAL_UART_IRQHandler+0xf6>
 800937a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	f043 0204 	orr.w	r2, r3, #4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <HAL_UART_IRQHandler+0x126>
 800939e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a2:	f003 0320 	and.w	r3, r3, #32
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ba:	f043 0208 	orr.w	r2, r3, #8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 81f2 	beq.w	80097b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <HAL_UART_IRQHandler+0x14e>
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fb7d 	bl	8009ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f4:	2b40      	cmp	r3, #64	@ 0x40
 80093f6:	bf0c      	ite	eq
 80093f8:	2301      	moveq	r3, #1
 80093fa:	2300      	movne	r3, #0
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009406:	f003 0308 	and.w	r3, r3, #8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d103      	bne.n	8009416 <HAL_UART_IRQHandler+0x17a>
 800940e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d04f      	beq.n	80094b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa85 	bl	8009926 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009426:	2b40      	cmp	r3, #64	@ 0x40
 8009428:	d141      	bne.n	80094ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3314      	adds	r3, #20
 8009430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3314      	adds	r3, #20
 8009452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800945a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800946e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1d9      	bne.n	800942a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d013      	beq.n	80094a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	4a7e      	ldr	r2, [pc, #504]	@ (800967c <HAL_UART_IRQHandler+0x3e0>)
 8009484:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800948a:	4618      	mov	r0, r3
 800948c:	f7fa fd6a 	bl	8003f64 <HAL_DMA_Abort_IT>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d016      	beq.n	80094c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a4:	e00e      	b.n	80094c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f994 	bl	80097d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	e00a      	b.n	80094c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f990 	bl	80097d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	e006      	b.n	80094c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f98c 	bl	80097d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80094c2:	e175      	b.n	80097b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c4:	bf00      	nop
    return;
 80094c6:	e173      	b.n	80097b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f040 814f 	bne.w	8009770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80094d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8148 	beq.w	8009770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8141 	beq.w	8009770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094ee:	2300      	movs	r3, #0
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	60bb      	str	r3, [r7, #8]
 8009502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950e:	2b40      	cmp	r3, #64	@ 0x40
 8009510:	f040 80b6 	bne.w	8009680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8145 	beq.w	80097b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800952e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009532:	429a      	cmp	r2, r3
 8009534:	f080 813e 	bcs.w	80097b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800953e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954a:	f000 8088 	beq.w	800965e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	330c      	adds	r3, #12
 8009554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	330c      	adds	r3, #12
 8009576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800957a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800957e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1d9      	bne.n	800954e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3314      	adds	r3, #20
 80095a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3314      	adds	r3, #20
 80095ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e1      	bne.n	800959a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3314      	adds	r3, #20
 80095dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3314      	adds	r3, #20
 80095f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e3      	bne.n	80095d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800962c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800962e:	f023 0310 	bic.w	r3, r3, #16
 8009632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009640:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009642:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800964e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e3      	bne.n	800961c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009658:	4618      	mov	r0, r3
 800965a:	f7fa fc13 	bl	8003e84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800966c:	b29b      	uxth	r3, r3
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	b29b      	uxth	r3, r3
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8b7 	bl	80097e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800967a:	e09b      	b.n	80097b4 <HAL_UART_IRQHandler+0x518>
 800967c:	080099ed 	.word	0x080099ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009688:	b29b      	uxth	r3, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 808e 	beq.w	80097b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800969c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 8089 	beq.w	80097b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	330c      	adds	r3, #12
 80096ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80096ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80096cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e3      	bne.n	80096a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	623b      	str	r3, [r7, #32]
   return(result);
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3314      	adds	r3, #20
 80096fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009702:	633a      	str	r2, [r7, #48]	@ 0x30
 8009704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e3      	bne.n	80096de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	330c      	adds	r3, #12
 800972a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	e853 3f00 	ldrex	r3, [r3]
 8009732:	60fb      	str	r3, [r7, #12]
   return(result);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0310 	bic.w	r3, r3, #16
 800973a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009748:	61fa      	str	r2, [r7, #28]
 800974a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	69b9      	ldr	r1, [r7, #24]
 800974e:	69fa      	ldr	r2, [r7, #28]
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	617b      	str	r3, [r7, #20]
   return(result);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e3      	bne.n	8009724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f83d 	bl	80097e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800976e:	e023      	b.n	80097b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009778:	2b00      	cmp	r3, #0
 800977a:	d009      	beq.n	8009790 <HAL_UART_IRQHandler+0x4f4>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f943 	bl	8009a14 <UART_Transmit_IT>
    return;
 800978e:	e014      	b.n	80097ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00e      	beq.n	80097ba <HAL_UART_IRQHandler+0x51e>
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f983 	bl	8009ab4 <UART_EndTransmit_IT>
    return;
 80097ae:	e004      	b.n	80097ba <HAL_UART_IRQHandler+0x51e>
    return;
 80097b0:	bf00      	nop
 80097b2:	e002      	b.n	80097ba <HAL_UART_IRQHandler+0x51e>
      return;
 80097b4:	bf00      	nop
 80097b6:	e000      	b.n	80097ba <HAL_UART_IRQHandler+0x51e>
      return;
 80097b8:	bf00      	nop
  }
}
 80097ba:	37e8      	adds	r7, #232	@ 0xe8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009810:	e03b      	b.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009818:	d037      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981a:	f7f9 fc0d 	bl	8003038 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	6a3a      	ldr	r2, [r7, #32]
 8009826:	429a      	cmp	r2, r3
 8009828:	d302      	bcc.n	8009830 <UART_WaitOnFlagUntilTimeout+0x30>
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e03a      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d023      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b80      	cmp	r3, #128	@ 0x80
 8009846:	d020      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b40      	cmp	r3, #64	@ 0x40
 800984c:	d01d      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d116      	bne.n	800988a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f857 	bl	8009926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2208      	movs	r2, #8
 800987c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e00f      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4013      	ands	r3, r2
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	bf0c      	ite	eq
 800989a:	2301      	moveq	r3, #1
 800989c:	2300      	movne	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d0b4      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	4613      	mov	r3, r2
 80098be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	88fa      	ldrh	r2, [r7, #6]
 80098ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2222      	movs	r2, #34	@ 0x22
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0220 	orr.w	r2, r2, #32
 8009916:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009926:	b480      	push	{r7}
 8009928:	b095      	sub	sp, #84	@ 0x54
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	330c      	adds	r3, #12
 800994c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800994e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e5      	bne.n	800992e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3314      	adds	r3, #20
 8009968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	61fb      	str	r3, [r7, #28]
   return(result);
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	f023 0301 	bic.w	r3, r3, #1
 8009978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009984:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e5      	bne.n	8009962 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999a:	2b01      	cmp	r3, #1
 800999c:	d119      	bne.n	80099d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	330c      	adds	r3, #12
 80099a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f023 0310 	bic.w	r3, r3, #16
 80099b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099be:	61ba      	str	r2, [r7, #24]
 80099c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6979      	ldr	r1, [r7, #20]
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	613b      	str	r3, [r7, #16]
   return(result);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e5      	bne.n	800999e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80099e0:	bf00      	nop
 80099e2:	3754      	adds	r7, #84	@ 0x54
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7ff fee4 	bl	80097d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b21      	cmp	r3, #33	@ 0x21
 8009a26:	d13e      	bne.n	8009aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a30:	d114      	bne.n	8009a5c <UART_Transmit_IT+0x48>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d110      	bne.n	8009a5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	1c9a      	adds	r2, r3, #2
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]
 8009a5a:	e008      	b.n	8009a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	1c59      	adds	r1, r3, #1
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6211      	str	r1, [r2, #32]
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	3b01      	subs	r3, #1
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10f      	bne.n	8009aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e000      	b.n	8009aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009aa6:	2302      	movs	r3, #2
  }
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fe73 	bl	80097c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08c      	sub	sp, #48	@ 0x30
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b22      	cmp	r3, #34	@ 0x22
 8009af6:	f040 80ae 	bne.w	8009c56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b02:	d117      	bne.n	8009b34 <UART_Receive_IT+0x50>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d113      	bne.n	8009b34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	1c9a      	adds	r2, r3, #2
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b32:	e026      	b.n	8009b82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b46:	d007      	beq.n	8009b58 <UART_Receive_IT+0x74>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <UART_Receive_IT+0x82>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e008      	b.n	8009b78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d15d      	bne.n	8009c52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0220 	bic.w	r2, r2, #32
 8009ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695a      	ldr	r2, [r3, #20]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d135      	bne.n	8009c48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f023 0310 	bic.w	r3, r3, #16
 8009bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	330c      	adds	r3, #12
 8009c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c02:	623a      	str	r2, [r7, #32]
 8009c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	69f9      	ldr	r1, [r7, #28]
 8009c08:	6a3a      	ldr	r2, [r7, #32]
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e5      	bne.n	8009be2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b10      	cmp	r3, #16
 8009c22:	d10a      	bne.n	8009c3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fdd1 	bl	80097e8 <HAL_UARTEx_RxEventCallback>
 8009c46:	e002      	b.n	8009c4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7f7 fdf9 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e002      	b.n	8009c58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e000      	b.n	8009c58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009c56:	2302      	movs	r3, #2
  }
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3730      	adds	r7, #48	@ 0x30
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c64:	b0c0      	sub	sp, #256	@ 0x100
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c7c:	68d9      	ldr	r1, [r3, #12]
 8009c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	ea40 0301 	orr.w	r3, r0, r1
 8009c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009cb8:	f021 010c 	bic.w	r1, r1, #12
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cc6:	430b      	orrs	r3, r1
 8009cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cda:	6999      	ldr	r1, [r3, #24]
 8009cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	ea40 0301 	orr.w	r3, r0, r1
 8009ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b8f      	ldr	r3, [pc, #572]	@ (8009f2c <UART_SetConfig+0x2cc>)
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d005      	beq.n	8009d00 <UART_SetConfig+0xa0>
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8009f30 <UART_SetConfig+0x2d0>)
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d104      	bne.n	8009d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d00:	f7fd fcda 	bl	80076b8 <HAL_RCC_GetPCLK2Freq>
 8009d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d08:	e003      	b.n	8009d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d0a:	f7fd fcc1 	bl	8007690 <HAL_RCC_GetPCLK1Freq>
 8009d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d1c:	f040 810c 	bne.w	8009f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	1891      	adds	r1, r2, r2
 8009d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d3a:	415b      	adcs	r3, r3
 8009d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d42:	4621      	mov	r1, r4
 8009d44:	eb12 0801 	adds.w	r8, r2, r1
 8009d48:	4629      	mov	r1, r5
 8009d4a:	eb43 0901 	adc.w	r9, r3, r1
 8009d4e:	f04f 0200 	mov.w	r2, #0
 8009d52:	f04f 0300 	mov.w	r3, #0
 8009d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d62:	4690      	mov	r8, r2
 8009d64:	4699      	mov	r9, r3
 8009d66:	4623      	mov	r3, r4
 8009d68:	eb18 0303 	adds.w	r3, r8, r3
 8009d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d70:	462b      	mov	r3, r5
 8009d72:	eb49 0303 	adc.w	r3, r9, r3
 8009d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d8e:	460b      	mov	r3, r1
 8009d90:	18db      	adds	r3, r3, r3
 8009d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d94:	4613      	mov	r3, r2
 8009d96:	eb42 0303 	adc.w	r3, r2, r3
 8009d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009da4:	f7f6 ff70 	bl	8000c88 <__aeabi_uldivmod>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4b61      	ldr	r3, [pc, #388]	@ (8009f34 <UART_SetConfig+0x2d4>)
 8009dae:	fba3 2302 	umull	r2, r3, r3, r2
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	011c      	lsls	r4, r3, #4
 8009db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009dc8:	4642      	mov	r2, r8
 8009dca:	464b      	mov	r3, r9
 8009dcc:	1891      	adds	r1, r2, r2
 8009dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009dd0:	415b      	adcs	r3, r3
 8009dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009dd8:	4641      	mov	r1, r8
 8009dda:	eb12 0a01 	adds.w	sl, r2, r1
 8009dde:	4649      	mov	r1, r9
 8009de0:	eb43 0b01 	adc.w	fp, r3, r1
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009df8:	4692      	mov	sl, r2
 8009dfa:	469b      	mov	fp, r3
 8009dfc:	4643      	mov	r3, r8
 8009dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8009e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e06:	464b      	mov	r3, r9
 8009e08:	eb4b 0303 	adc.w	r3, fp, r3
 8009e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e24:	460b      	mov	r3, r1
 8009e26:	18db      	adds	r3, r3, r3
 8009e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	eb42 0303 	adc.w	r3, r2, r3
 8009e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e3a:	f7f6 ff25 	bl	8000c88 <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	4b3b      	ldr	r3, [pc, #236]	@ (8009f34 <UART_SetConfig+0x2d4>)
 8009e46:	fba3 2301 	umull	r2, r3, r3, r1
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	2264      	movs	r2, #100	@ 0x64
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	1acb      	subs	r3, r1, r3
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e5a:	4b36      	ldr	r3, [pc, #216]	@ (8009f34 <UART_SetConfig+0x2d4>)
 8009e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e68:	441c      	add	r4, r3
 8009e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	1891      	adds	r1, r2, r2
 8009e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e84:	415b      	adcs	r3, r3
 8009e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e8c:	4641      	mov	r1, r8
 8009e8e:	1851      	adds	r1, r2, r1
 8009e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e92:	4649      	mov	r1, r9
 8009e94:	414b      	adcs	r3, r1
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e98:	f04f 0200 	mov.w	r2, #0
 8009e9c:	f04f 0300 	mov.w	r3, #0
 8009ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	00cb      	lsls	r3, r1, #3
 8009ea8:	4651      	mov	r1, sl
 8009eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eae:	4651      	mov	r1, sl
 8009eb0:	00ca      	lsls	r2, r1, #3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4642      	mov	r2, r8
 8009eba:	189b      	adds	r3, r3, r2
 8009ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ec0:	464b      	mov	r3, r9
 8009ec2:	460a      	mov	r2, r1
 8009ec4:	eb42 0303 	adc.w	r3, r2, r3
 8009ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	18db      	adds	r3, r3, r3
 8009ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	eb42 0303 	adc.w	r3, r2, r3
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009ef6:	f7f6 fec7 	bl	8000c88 <__aeabi_uldivmod>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <UART_SetConfig+0x2d4>)
 8009f00:	fba3 1302 	umull	r1, r3, r3, r2
 8009f04:	095b      	lsrs	r3, r3, #5
 8009f06:	2164      	movs	r1, #100	@ 0x64
 8009f08:	fb01 f303 	mul.w	r3, r1, r3
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	3332      	adds	r3, #50	@ 0x32
 8009f12:	4a08      	ldr	r2, [pc, #32]	@ (8009f34 <UART_SetConfig+0x2d4>)
 8009f14:	fba2 2303 	umull	r2, r3, r2, r3
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	f003 0207 	and.w	r2, r3, #7
 8009f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4422      	add	r2, r4
 8009f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f28:	e106      	b.n	800a138 <UART_SetConfig+0x4d8>
 8009f2a:	bf00      	nop
 8009f2c:	40011000 	.word	0x40011000
 8009f30:	40011400 	.word	0x40011400
 8009f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	1891      	adds	r1, r2, r2
 8009f50:	6239      	str	r1, [r7, #32]
 8009f52:	415b      	adcs	r3, r3
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	1854      	adds	r4, r2, r1
 8009f5e:	4649      	mov	r1, r9
 8009f60:	eb43 0501 	adc.w	r5, r3, r1
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	00eb      	lsls	r3, r5, #3
 8009f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f72:	00e2      	lsls	r2, r4, #3
 8009f74:	4614      	mov	r4, r2
 8009f76:	461d      	mov	r5, r3
 8009f78:	4643      	mov	r3, r8
 8009f7a:	18e3      	adds	r3, r4, r3
 8009f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f80:	464b      	mov	r3, r9
 8009f82:	eb45 0303 	adc.w	r3, r5, r3
 8009f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	008b      	lsls	r3, r1, #2
 8009faa:	4621      	mov	r1, r4
 8009fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	008a      	lsls	r2, r1, #2
 8009fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fb8:	f7f6 fe66 	bl	8000c88 <__aeabi_uldivmod>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4b60      	ldr	r3, [pc, #384]	@ (800a144 <UART_SetConfig+0x4e4>)
 8009fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8009fc6:	095b      	lsrs	r3, r3, #5
 8009fc8:	011c      	lsls	r4, r3, #4
 8009fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009fdc:	4642      	mov	r2, r8
 8009fde:	464b      	mov	r3, r9
 8009fe0:	1891      	adds	r1, r2, r2
 8009fe2:	61b9      	str	r1, [r7, #24]
 8009fe4:	415b      	adcs	r3, r3
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fec:	4641      	mov	r1, r8
 8009fee:	1851      	adds	r1, r2, r1
 8009ff0:	6139      	str	r1, [r7, #16]
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	414b      	adcs	r3, r1
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	f04f 0200 	mov.w	r2, #0
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a004:	4659      	mov	r1, fp
 800a006:	00cb      	lsls	r3, r1, #3
 800a008:	4651      	mov	r1, sl
 800a00a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a00e:	4651      	mov	r1, sl
 800a010:	00ca      	lsls	r2, r1, #3
 800a012:	4610      	mov	r0, r2
 800a014:	4619      	mov	r1, r3
 800a016:	4603      	mov	r3, r0
 800a018:	4642      	mov	r2, r8
 800a01a:	189b      	adds	r3, r3, r2
 800a01c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a020:	464b      	mov	r3, r9
 800a022:	460a      	mov	r2, r1
 800a024:	eb42 0303 	adc.w	r3, r2, r3
 800a028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	f04f 0300 	mov.w	r3, #0
 800a040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a044:	4649      	mov	r1, r9
 800a046:	008b      	lsls	r3, r1, #2
 800a048:	4641      	mov	r1, r8
 800a04a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a04e:	4641      	mov	r1, r8
 800a050:	008a      	lsls	r2, r1, #2
 800a052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a056:	f7f6 fe17 	bl	8000c88 <__aeabi_uldivmod>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	4b38      	ldr	r3, [pc, #224]	@ (800a144 <UART_SetConfig+0x4e4>)
 800a062:	fba3 2301 	umull	r2, r3, r3, r1
 800a066:	095b      	lsrs	r3, r3, #5
 800a068:	2264      	movs	r2, #100	@ 0x64
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	1acb      	subs	r3, r1, r3
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	3332      	adds	r3, #50	@ 0x32
 800a074:	4a33      	ldr	r2, [pc, #204]	@ (800a144 <UART_SetConfig+0x4e4>)
 800a076:	fba2 2303 	umull	r2, r3, r2, r3
 800a07a:	095b      	lsrs	r3, r3, #5
 800a07c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a080:	441c      	add	r4, r3
 800a082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a086:	2200      	movs	r2, #0
 800a088:	673b      	str	r3, [r7, #112]	@ 0x70
 800a08a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a08c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a090:	4642      	mov	r2, r8
 800a092:	464b      	mov	r3, r9
 800a094:	1891      	adds	r1, r2, r2
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	415b      	adcs	r3, r3
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0a0:	4641      	mov	r1, r8
 800a0a2:	1851      	adds	r1, r2, r1
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	414b      	adcs	r3, r1
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	f04f 0200 	mov.w	r2, #0
 800a0b0:	f04f 0300 	mov.w	r3, #0
 800a0b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0b8:	4659      	mov	r1, fp
 800a0ba:	00cb      	lsls	r3, r1, #3
 800a0bc:	4651      	mov	r1, sl
 800a0be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0c2:	4651      	mov	r1, sl
 800a0c4:	00ca      	lsls	r2, r1, #3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4642      	mov	r2, r8
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	460a      	mov	r2, r1
 800a0d6:	eb42 0303 	adc.w	r3, r2, r3
 800a0da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0e6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a0e8:	f04f 0200 	mov.w	r2, #0
 800a0ec:	f04f 0300 	mov.w	r3, #0
 800a0f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	008b      	lsls	r3, r1, #2
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0fe:	4641      	mov	r1, r8
 800a100:	008a      	lsls	r2, r1, #2
 800a102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a106:	f7f6 fdbf 	bl	8000c88 <__aeabi_uldivmod>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <UART_SetConfig+0x4e4>)
 800a110:	fba3 1302 	umull	r1, r3, r3, r2
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	2164      	movs	r1, #100	@ 0x64
 800a118:	fb01 f303 	mul.w	r3, r1, r3
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	011b      	lsls	r3, r3, #4
 800a120:	3332      	adds	r3, #50	@ 0x32
 800a122:	4a08      	ldr	r2, [pc, #32]	@ (800a144 <UART_SetConfig+0x4e4>)
 800a124:	fba2 2303 	umull	r2, r3, r2, r3
 800a128:	095b      	lsrs	r3, r3, #5
 800a12a:	f003 020f 	and.w	r2, r3, #15
 800a12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4422      	add	r2, r4
 800a136:	609a      	str	r2, [r3, #8]
}
 800a138:	bf00      	nop
 800a13a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a13e:	46bd      	mov	sp, r7
 800a140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a144:	51eb851f 	.word	0x51eb851f

0800a148 <arm_rfft_fast_init_f32>:
 800a148:	084b      	lsrs	r3, r1, #1
 800a14a:	2b80      	cmp	r3, #128	@ 0x80
 800a14c:	b410      	push	{r4}
 800a14e:	8201      	strh	r1, [r0, #16]
 800a150:	8003      	strh	r3, [r0, #0]
 800a152:	d047      	beq.n	800a1e4 <arm_rfft_fast_init_f32+0x9c>
 800a154:	d917      	bls.n	800a186 <arm_rfft_fast_init_f32+0x3e>
 800a156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15a:	d03d      	beq.n	800a1d8 <arm_rfft_fast_init_f32+0x90>
 800a15c:	d929      	bls.n	800a1b2 <arm_rfft_fast_init_f32+0x6a>
 800a15e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a162:	d020      	beq.n	800a1a6 <arm_rfft_fast_init_f32+0x5e>
 800a164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a168:	d113      	bne.n	800a192 <arm_rfft_fast_init_f32+0x4a>
 800a16a:	4921      	ldr	r1, [pc, #132]	@ (800a1f0 <arm_rfft_fast_init_f32+0xa8>)
 800a16c:	4a21      	ldr	r2, [pc, #132]	@ (800a1f4 <arm_rfft_fast_init_f32+0xac>)
 800a16e:	4b22      	ldr	r3, [pc, #136]	@ (800a1f8 <arm_rfft_fast_init_f32+0xb0>)
 800a170:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800a174:	8184      	strh	r4, [r0, #12]
 800a176:	6081      	str	r1, [r0, #8]
 800a178:	6042      	str	r2, [r0, #4]
 800a17a:	6143      	str	r3, [r0, #20]
 800a17c:	2000      	movs	r0, #0
 800a17e:	b240      	sxtb	r0, r0
 800a180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	2b20      	cmp	r3, #32
 800a188:	d01c      	beq.n	800a1c4 <arm_rfft_fast_init_f32+0x7c>
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d006      	beq.n	800a19c <arm_rfft_fast_init_f32+0x54>
 800a18e:	2b10      	cmp	r3, #16
 800a190:	d01d      	beq.n	800a1ce <arm_rfft_fast_init_f32+0x86>
 800a192:	20ff      	movs	r0, #255	@ 0xff
 800a194:	b240      	sxtb	r0, r0
 800a196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	2438      	movs	r4, #56	@ 0x38
 800a19e:	4917      	ldr	r1, [pc, #92]	@ (800a1fc <arm_rfft_fast_init_f32+0xb4>)
 800a1a0:	4a17      	ldr	r2, [pc, #92]	@ (800a200 <arm_rfft_fast_init_f32+0xb8>)
 800a1a2:	4b18      	ldr	r3, [pc, #96]	@ (800a204 <arm_rfft_fast_init_f32+0xbc>)
 800a1a4:	e7e6      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1a6:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800a1aa:	4917      	ldr	r1, [pc, #92]	@ (800a208 <arm_rfft_fast_init_f32+0xc0>)
 800a1ac:	4a17      	ldr	r2, [pc, #92]	@ (800a20c <arm_rfft_fast_init_f32+0xc4>)
 800a1ae:	4b18      	ldr	r3, [pc, #96]	@ (800a210 <arm_rfft_fast_init_f32+0xc8>)
 800a1b0:	e7e0      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b6:	d1ec      	bne.n	800a192 <arm_rfft_fast_init_f32+0x4a>
 800a1b8:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800a1bc:	4915      	ldr	r1, [pc, #84]	@ (800a214 <arm_rfft_fast_init_f32+0xcc>)
 800a1be:	4a16      	ldr	r2, [pc, #88]	@ (800a218 <arm_rfft_fast_init_f32+0xd0>)
 800a1c0:	4b16      	ldr	r3, [pc, #88]	@ (800a21c <arm_rfft_fast_init_f32+0xd4>)
 800a1c2:	e7d7      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1c4:	2430      	movs	r4, #48	@ 0x30
 800a1c6:	4916      	ldr	r1, [pc, #88]	@ (800a220 <arm_rfft_fast_init_f32+0xd8>)
 800a1c8:	4a16      	ldr	r2, [pc, #88]	@ (800a224 <arm_rfft_fast_init_f32+0xdc>)
 800a1ca:	4b17      	ldr	r3, [pc, #92]	@ (800a228 <arm_rfft_fast_init_f32+0xe0>)
 800a1cc:	e7d2      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1ce:	2414      	movs	r4, #20
 800a1d0:	4916      	ldr	r1, [pc, #88]	@ (800a22c <arm_rfft_fast_init_f32+0xe4>)
 800a1d2:	4a17      	ldr	r2, [pc, #92]	@ (800a230 <arm_rfft_fast_init_f32+0xe8>)
 800a1d4:	4b17      	ldr	r3, [pc, #92]	@ (800a234 <arm_rfft_fast_init_f32+0xec>)
 800a1d6:	e7cd      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1d8:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800a1dc:	4916      	ldr	r1, [pc, #88]	@ (800a238 <arm_rfft_fast_init_f32+0xf0>)
 800a1de:	4a17      	ldr	r2, [pc, #92]	@ (800a23c <arm_rfft_fast_init_f32+0xf4>)
 800a1e0:	4b17      	ldr	r3, [pc, #92]	@ (800a240 <arm_rfft_fast_init_f32+0xf8>)
 800a1e2:	e7c7      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1e4:	24d0      	movs	r4, #208	@ 0xd0
 800a1e6:	4917      	ldr	r1, [pc, #92]	@ (800a244 <arm_rfft_fast_init_f32+0xfc>)
 800a1e8:	4a17      	ldr	r2, [pc, #92]	@ (800a248 <arm_rfft_fast_init_f32+0x100>)
 800a1ea:	4b18      	ldr	r3, [pc, #96]	@ (800a24c <arm_rfft_fast_init_f32+0x104>)
 800a1ec:	e7c2      	b.n	800a174 <arm_rfft_fast_init_f32+0x2c>
 800a1ee:	bf00      	nop
 800a1f0:	0801c77c 	.word	0x0801c77c
 800a1f4:	0800d974 	.word	0x0800d974
 800a1f8:	08013ae4 	.word	0x08013ae4
 800a1fc:	08011a74 	.word	0x08011a74
 800a200:	0801e53c 	.word	0x0801e53c
 800a204:	08020a2c 	.word	0x08020a2c
 800a208:	0801a464 	.word	0x0801a464
 800a20c:	08018364 	.word	0x08018364
 800a210:	08011ae4 	.word	0x08011ae4
 800a214:	080206bc 	.word	0x080206bc
 800a218:	08017ae4 	.word	0x08017ae4
 800a21c:	0801e73c 	.word	0x0801e73c
 800a220:	0801b31c 	.word	0x0801b31c
 800a224:	0801a364 	.word	0x0801a364
 800a228:	08011974 	.word	0x08011974
 800a22c:	0801b274 	.word	0x0801b274
 800a230:	080182e4 	.word	0x080182e4
 800a234:	0801b29c 	.word	0x0801b29c
 800a238:	0801ef3c 	.word	0x0801ef3c
 800a23c:	0801b77c 	.word	0x0801b77c
 800a240:	0801f2bc 	.word	0x0801f2bc
 800a244:	08020c2c 	.word	0x08020c2c
 800a248:	0801b37c 	.word	0x0801b37c
 800a24c:	080202bc 	.word	0x080202bc

0800a250 <__cvt>:
 800a250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	ec57 6b10 	vmov	r6, r7, d0
 800a258:	2f00      	cmp	r7, #0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4619      	mov	r1, r3
 800a25e:	463b      	mov	r3, r7
 800a260:	bfbb      	ittet	lt
 800a262:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a266:	461f      	movlt	r7, r3
 800a268:	2300      	movge	r3, #0
 800a26a:	232d      	movlt	r3, #45	@ 0x2d
 800a26c:	700b      	strb	r3, [r1, #0]
 800a26e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a270:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a274:	4691      	mov	r9, r2
 800a276:	f023 0820 	bic.w	r8, r3, #32
 800a27a:	bfbc      	itt	lt
 800a27c:	4632      	movlt	r2, r6
 800a27e:	4616      	movlt	r6, r2
 800a280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a284:	d005      	beq.n	800a292 <__cvt+0x42>
 800a286:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a28a:	d100      	bne.n	800a28e <__cvt+0x3e>
 800a28c:	3401      	adds	r4, #1
 800a28e:	2102      	movs	r1, #2
 800a290:	e000      	b.n	800a294 <__cvt+0x44>
 800a292:	2103      	movs	r1, #3
 800a294:	ab03      	add	r3, sp, #12
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	ab02      	add	r3, sp, #8
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	ec47 6b10 	vmov	d0, r6, r7
 800a2a0:	4653      	mov	r3, sl
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	f000 fe6c 	bl	800af80 <_dtoa_r>
 800a2a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	d119      	bne.n	800a2e4 <__cvt+0x94>
 800a2b0:	f019 0f01 	tst.w	r9, #1
 800a2b4:	d00e      	beq.n	800a2d4 <__cvt+0x84>
 800a2b6:	eb00 0904 	add.w	r9, r0, r4
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 fc21 	bl	8000b08 <__aeabi_dcmpeq>
 800a2c6:	b108      	cbz	r0, 800a2cc <__cvt+0x7c>
 800a2c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2cc:	2230      	movs	r2, #48	@ 0x30
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	454b      	cmp	r3, r9
 800a2d2:	d31e      	bcc.n	800a312 <__cvt+0xc2>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2d8:	1b5b      	subs	r3, r3, r5
 800a2da:	4628      	mov	r0, r5
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	b004      	add	sp, #16
 800a2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2e8:	eb00 0904 	add.w	r9, r0, r4
 800a2ec:	d1e5      	bne.n	800a2ba <__cvt+0x6a>
 800a2ee:	7803      	ldrb	r3, [r0, #0]
 800a2f0:	2b30      	cmp	r3, #48	@ 0x30
 800a2f2:	d10a      	bne.n	800a30a <__cvt+0xba>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f6 fc04 	bl	8000b08 <__aeabi_dcmpeq>
 800a300:	b918      	cbnz	r0, 800a30a <__cvt+0xba>
 800a302:	f1c4 0401 	rsb	r4, r4, #1
 800a306:	f8ca 4000 	str.w	r4, [sl]
 800a30a:	f8da 3000 	ldr.w	r3, [sl]
 800a30e:	4499      	add	r9, r3
 800a310:	e7d3      	b.n	800a2ba <__cvt+0x6a>
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	9103      	str	r1, [sp, #12]
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	e7d9      	b.n	800a2ce <__cvt+0x7e>

0800a31a <__exponent>:
 800a31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a31c:	2900      	cmp	r1, #0
 800a31e:	bfba      	itte	lt
 800a320:	4249      	neglt	r1, r1
 800a322:	232d      	movlt	r3, #45	@ 0x2d
 800a324:	232b      	movge	r3, #43	@ 0x2b
 800a326:	2909      	cmp	r1, #9
 800a328:	7002      	strb	r2, [r0, #0]
 800a32a:	7043      	strb	r3, [r0, #1]
 800a32c:	dd29      	ble.n	800a382 <__exponent+0x68>
 800a32e:	f10d 0307 	add.w	r3, sp, #7
 800a332:	461d      	mov	r5, r3
 800a334:	270a      	movs	r7, #10
 800a336:	461a      	mov	r2, r3
 800a338:	fbb1 f6f7 	udiv	r6, r1, r7
 800a33c:	fb07 1416 	mls	r4, r7, r6, r1
 800a340:	3430      	adds	r4, #48	@ 0x30
 800a342:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a346:	460c      	mov	r4, r1
 800a348:	2c63      	cmp	r4, #99	@ 0x63
 800a34a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a34e:	4631      	mov	r1, r6
 800a350:	dcf1      	bgt.n	800a336 <__exponent+0x1c>
 800a352:	3130      	adds	r1, #48	@ 0x30
 800a354:	1e94      	subs	r4, r2, #2
 800a356:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a35a:	1c41      	adds	r1, r0, #1
 800a35c:	4623      	mov	r3, r4
 800a35e:	42ab      	cmp	r3, r5
 800a360:	d30a      	bcc.n	800a378 <__exponent+0x5e>
 800a362:	f10d 0309 	add.w	r3, sp, #9
 800a366:	1a9b      	subs	r3, r3, r2
 800a368:	42ac      	cmp	r4, r5
 800a36a:	bf88      	it	hi
 800a36c:	2300      	movhi	r3, #0
 800a36e:	3302      	adds	r3, #2
 800a370:	4403      	add	r3, r0
 800a372:	1a18      	subs	r0, r3, r0
 800a374:	b003      	add	sp, #12
 800a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a378:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a37c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a380:	e7ed      	b.n	800a35e <__exponent+0x44>
 800a382:	2330      	movs	r3, #48	@ 0x30
 800a384:	3130      	adds	r1, #48	@ 0x30
 800a386:	7083      	strb	r3, [r0, #2]
 800a388:	70c1      	strb	r1, [r0, #3]
 800a38a:	1d03      	adds	r3, r0, #4
 800a38c:	e7f1      	b.n	800a372 <__exponent+0x58>
	...

0800a390 <_printf_float>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	b08d      	sub	sp, #52	@ 0x34
 800a396:	460c      	mov	r4, r1
 800a398:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a39c:	4616      	mov	r6, r2
 800a39e:	461f      	mov	r7, r3
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	f000 fceb 	bl	800ad7c <_localeconv_r>
 800a3a6:	6803      	ldr	r3, [r0, #0]
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f5 ff80 	bl	80002b0 <strlen>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b8:	9005      	str	r0, [sp, #20]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	f103 0208 	add.w	r2, r3, #8
 800a3c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3c8:	f8d4 b000 	ldr.w	fp, [r4]
 800a3cc:	f8c8 2000 	str.w	r2, [r8]
 800a3d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a3d8:	9307      	str	r3, [sp, #28]
 800a3da:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3e6:	4b9c      	ldr	r3, [pc, #624]	@ (800a658 <_printf_float+0x2c8>)
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ec:	f7f6 fbbe 	bl	8000b6c <__aeabi_dcmpun>
 800a3f0:	bb70      	cbnz	r0, 800a450 <_printf_float+0xc0>
 800a3f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3f6:	4b98      	ldr	r3, [pc, #608]	@ (800a658 <_printf_float+0x2c8>)
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fc:	f7f6 fb98 	bl	8000b30 <__aeabi_dcmple>
 800a400:	bb30      	cbnz	r0, 800a450 <_printf_float+0xc0>
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 fb87 	bl	8000b1c <__aeabi_dcmplt>
 800a40e:	b110      	cbz	r0, 800a416 <_printf_float+0x86>
 800a410:	232d      	movs	r3, #45	@ 0x2d
 800a412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a416:	4a91      	ldr	r2, [pc, #580]	@ (800a65c <_printf_float+0x2cc>)
 800a418:	4b91      	ldr	r3, [pc, #580]	@ (800a660 <_printf_float+0x2d0>)
 800a41a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a41e:	bf94      	ite	ls
 800a420:	4690      	movls	r8, r2
 800a422:	4698      	movhi	r8, r3
 800a424:	2303      	movs	r3, #3
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	f02b 0304 	bic.w	r3, fp, #4
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	f04f 0900 	mov.w	r9, #0
 800a432:	9700      	str	r7, [sp, #0]
 800a434:	4633      	mov	r3, r6
 800a436:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a438:	4621      	mov	r1, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f9d2 	bl	800a7e4 <_printf_common>
 800a440:	3001      	adds	r0, #1
 800a442:	f040 808d 	bne.w	800a560 <_printf_float+0x1d0>
 800a446:	f04f 30ff 	mov.w	r0, #4294967295
 800a44a:	b00d      	add	sp, #52	@ 0x34
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	4642      	mov	r2, r8
 800a452:	464b      	mov	r3, r9
 800a454:	4640      	mov	r0, r8
 800a456:	4649      	mov	r1, r9
 800a458:	f7f6 fb88 	bl	8000b6c <__aeabi_dcmpun>
 800a45c:	b140      	cbz	r0, 800a470 <_printf_float+0xe0>
 800a45e:	464b      	mov	r3, r9
 800a460:	2b00      	cmp	r3, #0
 800a462:	bfbc      	itt	lt
 800a464:	232d      	movlt	r3, #45	@ 0x2d
 800a466:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a46a:	4a7e      	ldr	r2, [pc, #504]	@ (800a664 <_printf_float+0x2d4>)
 800a46c:	4b7e      	ldr	r3, [pc, #504]	@ (800a668 <_printf_float+0x2d8>)
 800a46e:	e7d4      	b.n	800a41a <_printf_float+0x8a>
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a476:	9206      	str	r2, [sp, #24]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	d13b      	bne.n	800a4f4 <_printf_float+0x164>
 800a47c:	2306      	movs	r3, #6
 800a47e:	6063      	str	r3, [r4, #4]
 800a480:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a484:	2300      	movs	r3, #0
 800a486:	6022      	str	r2, [r4, #0]
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a48c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a490:	ab09      	add	r3, sp, #36	@ 0x24
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	6861      	ldr	r1, [r4, #4]
 800a496:	ec49 8b10 	vmov	d0, r8, r9
 800a49a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f7ff fed6 	bl	800a250 <__cvt>
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4a8:	2b47      	cmp	r3, #71	@ 0x47
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	d129      	bne.n	800a502 <_printf_float+0x172>
 800a4ae:	1cc8      	adds	r0, r1, #3
 800a4b0:	db02      	blt.n	800a4b8 <_printf_float+0x128>
 800a4b2:	6863      	ldr	r3, [r4, #4]
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	dd41      	ble.n	800a53c <_printf_float+0x1ac>
 800a4b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4bc:	fa5f fa8a 	uxtb.w	sl, sl
 800a4c0:	3901      	subs	r1, #1
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4ca:	f7ff ff26 	bl	800a31a <__exponent>
 800a4ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4d0:	1813      	adds	r3, r2, r0
 800a4d2:	2a01      	cmp	r2, #1
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	6123      	str	r3, [r4, #16]
 800a4d8:	dc02      	bgt.n	800a4e0 <_printf_float+0x150>
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	07d2      	lsls	r2, r2, #31
 800a4de:	d501      	bpl.n	800a4e4 <_printf_float+0x154>
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0a2      	beq.n	800a432 <_printf_float+0xa2>
 800a4ec:	232d      	movs	r3, #45	@ 0x2d
 800a4ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4f2:	e79e      	b.n	800a432 <_printf_float+0xa2>
 800a4f4:	9a06      	ldr	r2, [sp, #24]
 800a4f6:	2a47      	cmp	r2, #71	@ 0x47
 800a4f8:	d1c2      	bne.n	800a480 <_printf_float+0xf0>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1c0      	bne.n	800a480 <_printf_float+0xf0>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7bd      	b.n	800a47e <_printf_float+0xee>
 800a502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a506:	d9db      	bls.n	800a4c0 <_printf_float+0x130>
 800a508:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a50c:	d118      	bne.n	800a540 <_printf_float+0x1b0>
 800a50e:	2900      	cmp	r1, #0
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	dd0b      	ble.n	800a52c <_printf_float+0x19c>
 800a514:	6121      	str	r1, [r4, #16]
 800a516:	b913      	cbnz	r3, 800a51e <_printf_float+0x18e>
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	07d0      	lsls	r0, r2, #31
 800a51c:	d502      	bpl.n	800a524 <_printf_float+0x194>
 800a51e:	3301      	adds	r3, #1
 800a520:	440b      	add	r3, r1
 800a522:	6123      	str	r3, [r4, #16]
 800a524:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	e7db      	b.n	800a4e4 <_printf_float+0x154>
 800a52c:	b913      	cbnz	r3, 800a534 <_printf_float+0x1a4>
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	07d2      	lsls	r2, r2, #31
 800a532:	d501      	bpl.n	800a538 <_printf_float+0x1a8>
 800a534:	3302      	adds	r3, #2
 800a536:	e7f4      	b.n	800a522 <_printf_float+0x192>
 800a538:	2301      	movs	r3, #1
 800a53a:	e7f2      	b.n	800a522 <_printf_float+0x192>
 800a53c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a542:	4299      	cmp	r1, r3
 800a544:	db05      	blt.n	800a552 <_printf_float+0x1c2>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	6121      	str	r1, [r4, #16]
 800a54a:	07d8      	lsls	r0, r3, #31
 800a54c:	d5ea      	bpl.n	800a524 <_printf_float+0x194>
 800a54e:	1c4b      	adds	r3, r1, #1
 800a550:	e7e7      	b.n	800a522 <_printf_float+0x192>
 800a552:	2900      	cmp	r1, #0
 800a554:	bfd4      	ite	le
 800a556:	f1c1 0202 	rsble	r2, r1, #2
 800a55a:	2201      	movgt	r2, #1
 800a55c:	4413      	add	r3, r2
 800a55e:	e7e0      	b.n	800a522 <_printf_float+0x192>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	055a      	lsls	r2, r3, #21
 800a564:	d407      	bmi.n	800a576 <_printf_float+0x1e6>
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	4642      	mov	r2, r8
 800a56a:	4631      	mov	r1, r6
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b8      	blx	r7
 800a570:	3001      	adds	r0, #1
 800a572:	d12b      	bne.n	800a5cc <_printf_float+0x23c>
 800a574:	e767      	b.n	800a446 <_printf_float+0xb6>
 800a576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a57a:	f240 80dd 	bls.w	800a738 <_printf_float+0x3a8>
 800a57e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	f7f6 fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d033      	beq.n	800a5f6 <_printf_float+0x266>
 800a58e:	4a37      	ldr	r2, [pc, #220]	@ (800a66c <_printf_float+0x2dc>)
 800a590:	2301      	movs	r3, #1
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	47b8      	blx	r7
 800a598:	3001      	adds	r0, #1
 800a59a:	f43f af54 	beq.w	800a446 <_printf_float+0xb6>
 800a59e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5a2:	4543      	cmp	r3, r8
 800a5a4:	db02      	blt.n	800a5ac <_printf_float+0x21c>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	07d8      	lsls	r0, r3, #31
 800a5aa:	d50f      	bpl.n	800a5cc <_printf_float+0x23c>
 800a5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f af45 	beq.w	800a446 <_printf_float+0xb6>
 800a5bc:	f04f 0900 	mov.w	r9, #0
 800a5c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5c4:	f104 0a1a 	add.w	sl, r4, #26
 800a5c8:	45c8      	cmp	r8, r9
 800a5ca:	dc09      	bgt.n	800a5e0 <_printf_float+0x250>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	079b      	lsls	r3, r3, #30
 800a5d0:	f100 8103 	bmi.w	800a7da <_printf_float+0x44a>
 800a5d4:	68e0      	ldr	r0, [r4, #12]
 800a5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d8:	4298      	cmp	r0, r3
 800a5da:	bfb8      	it	lt
 800a5dc:	4618      	movlt	r0, r3
 800a5de:	e734      	b.n	800a44a <_printf_float+0xba>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f af2b 	beq.w	800a446 <_printf_float+0xb6>
 800a5f0:	f109 0901 	add.w	r9, r9, #1
 800a5f4:	e7e8      	b.n	800a5c8 <_printf_float+0x238>
 800a5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dc39      	bgt.n	800a670 <_printf_float+0x2e0>
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a66c <_printf_float+0x2dc>)
 800a5fe:	2301      	movs	r3, #1
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f af1d 	beq.w	800a446 <_printf_float+0xb6>
 800a60c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a610:	ea59 0303 	orrs.w	r3, r9, r3
 800a614:	d102      	bne.n	800a61c <_printf_float+0x28c>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	07d9      	lsls	r1, r3, #31
 800a61a:	d5d7      	bpl.n	800a5cc <_printf_float+0x23c>
 800a61c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	f43f af0d 	beq.w	800a446 <_printf_float+0xb6>
 800a62c:	f04f 0a00 	mov.w	sl, #0
 800a630:	f104 0b1a 	add.w	fp, r4, #26
 800a634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a636:	425b      	negs	r3, r3
 800a638:	4553      	cmp	r3, sl
 800a63a:	dc01      	bgt.n	800a640 <_printf_float+0x2b0>
 800a63c:	464b      	mov	r3, r9
 800a63e:	e793      	b.n	800a568 <_printf_float+0x1d8>
 800a640:	2301      	movs	r3, #1
 800a642:	465a      	mov	r2, fp
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	f43f aefb 	beq.w	800a446 <_printf_float+0xb6>
 800a650:	f10a 0a01 	add.w	sl, sl, #1
 800a654:	e7ee      	b.n	800a634 <_printf_float+0x2a4>
 800a656:	bf00      	nop
 800a658:	7fefffff 	.word	0x7fefffff
 800a65c:	08020dcc 	.word	0x08020dcc
 800a660:	08020dd0 	.word	0x08020dd0
 800a664:	08020dd4 	.word	0x08020dd4
 800a668:	08020dd8 	.word	0x08020dd8
 800a66c:	08020ddc 	.word	0x08020ddc
 800a670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a672:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a676:	4553      	cmp	r3, sl
 800a678:	bfa8      	it	ge
 800a67a:	4653      	movge	r3, sl
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	4699      	mov	r9, r3
 800a680:	dc36      	bgt.n	800a6f0 <_printf_float+0x360>
 800a682:	f04f 0b00 	mov.w	fp, #0
 800a686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a68a:	f104 021a 	add.w	r2, r4, #26
 800a68e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a690:	9306      	str	r3, [sp, #24]
 800a692:	eba3 0309 	sub.w	r3, r3, r9
 800a696:	455b      	cmp	r3, fp
 800a698:	dc31      	bgt.n	800a6fe <_printf_float+0x36e>
 800a69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69c:	459a      	cmp	sl, r3
 800a69e:	dc3a      	bgt.n	800a716 <_printf_float+0x386>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	07da      	lsls	r2, r3, #31
 800a6a4:	d437      	bmi.n	800a716 <_printf_float+0x386>
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	ebaa 0903 	sub.w	r9, sl, r3
 800a6ac:	9b06      	ldr	r3, [sp, #24]
 800a6ae:	ebaa 0303 	sub.w	r3, sl, r3
 800a6b2:	4599      	cmp	r9, r3
 800a6b4:	bfa8      	it	ge
 800a6b6:	4699      	movge	r9, r3
 800a6b8:	f1b9 0f00 	cmp.w	r9, #0
 800a6bc:	dc33      	bgt.n	800a726 <_printf_float+0x396>
 800a6be:	f04f 0800 	mov.w	r8, #0
 800a6c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6c6:	f104 0b1a 	add.w	fp, r4, #26
 800a6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6cc:	ebaa 0303 	sub.w	r3, sl, r3
 800a6d0:	eba3 0309 	sub.w	r3, r3, r9
 800a6d4:	4543      	cmp	r3, r8
 800a6d6:	f77f af79 	ble.w	800a5cc <_printf_float+0x23c>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	465a      	mov	r2, fp
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f43f aeae 	beq.w	800a446 <_printf_float+0xb6>
 800a6ea:	f108 0801 	add.w	r8, r8, #1
 800a6ee:	e7ec      	b.n	800a6ca <_printf_float+0x33a>
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d1c2      	bne.n	800a682 <_printf_float+0x2f2>
 800a6fc:	e6a3      	b.n	800a446 <_printf_float+0xb6>
 800a6fe:	2301      	movs	r3, #1
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	9206      	str	r2, [sp, #24]
 800a706:	47b8      	blx	r7
 800a708:	3001      	adds	r0, #1
 800a70a:	f43f ae9c 	beq.w	800a446 <_printf_float+0xb6>
 800a70e:	9a06      	ldr	r2, [sp, #24]
 800a710:	f10b 0b01 	add.w	fp, fp, #1
 800a714:	e7bb      	b.n	800a68e <_printf_float+0x2fe>
 800a716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d1c0      	bne.n	800a6a6 <_printf_float+0x316>
 800a724:	e68f      	b.n	800a446 <_printf_float+0xb6>
 800a726:	9a06      	ldr	r2, [sp, #24]
 800a728:	464b      	mov	r3, r9
 800a72a:	4442      	add	r2, r8
 800a72c:	4631      	mov	r1, r6
 800a72e:	4628      	mov	r0, r5
 800a730:	47b8      	blx	r7
 800a732:	3001      	adds	r0, #1
 800a734:	d1c3      	bne.n	800a6be <_printf_float+0x32e>
 800a736:	e686      	b.n	800a446 <_printf_float+0xb6>
 800a738:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a73c:	f1ba 0f01 	cmp.w	sl, #1
 800a740:	dc01      	bgt.n	800a746 <_printf_float+0x3b6>
 800a742:	07db      	lsls	r3, r3, #31
 800a744:	d536      	bpl.n	800a7b4 <_printf_float+0x424>
 800a746:	2301      	movs	r3, #1
 800a748:	4642      	mov	r2, r8
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f ae78 	beq.w	800a446 <_printf_float+0xb6>
 800a756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f ae70 	beq.w	800a446 <_printf_float+0xb6>
 800a766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a76a:	2200      	movs	r2, #0
 800a76c:	2300      	movs	r3, #0
 800a76e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a772:	f7f6 f9c9 	bl	8000b08 <__aeabi_dcmpeq>
 800a776:	b9c0      	cbnz	r0, 800a7aa <_printf_float+0x41a>
 800a778:	4653      	mov	r3, sl
 800a77a:	f108 0201 	add.w	r2, r8, #1
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	d10c      	bne.n	800a7a2 <_printf_float+0x412>
 800a788:	e65d      	b.n	800a446 <_printf_float+0xb6>
 800a78a:	2301      	movs	r3, #1
 800a78c:	465a      	mov	r2, fp
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	f43f ae56 	beq.w	800a446 <_printf_float+0xb6>
 800a79a:	f108 0801 	add.w	r8, r8, #1
 800a79e:	45d0      	cmp	r8, sl
 800a7a0:	dbf3      	blt.n	800a78a <_printf_float+0x3fa>
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7a8:	e6df      	b.n	800a56a <_printf_float+0x1da>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	f104 0b1a 	add.w	fp, r4, #26
 800a7b2:	e7f4      	b.n	800a79e <_printf_float+0x40e>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	e7e1      	b.n	800a77e <_printf_float+0x3ee>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	464a      	mov	r2, r9
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f43f ae3e 	beq.w	800a446 <_printf_float+0xb6>
 800a7ca:	f108 0801 	add.w	r8, r8, #1
 800a7ce:	68e3      	ldr	r3, [r4, #12]
 800a7d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	4543      	cmp	r3, r8
 800a7d6:	dcf0      	bgt.n	800a7ba <_printf_float+0x42a>
 800a7d8:	e6fc      	b.n	800a5d4 <_printf_float+0x244>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	f104 0919 	add.w	r9, r4, #25
 800a7e2:	e7f4      	b.n	800a7ce <_printf_float+0x43e>

0800a7e4 <_printf_common>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	4616      	mov	r6, r2
 800a7ea:	4698      	mov	r8, r3
 800a7ec:	688a      	ldr	r2, [r1, #8]
 800a7ee:	690b      	ldr	r3, [r1, #16]
 800a7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	bfb8      	it	lt
 800a7f8:	4613      	movlt	r3, r2
 800a7fa:	6033      	str	r3, [r6, #0]
 800a7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a800:	4607      	mov	r7, r0
 800a802:	460c      	mov	r4, r1
 800a804:	b10a      	cbz	r2, 800a80a <_printf_common+0x26>
 800a806:	3301      	adds	r3, #1
 800a808:	6033      	str	r3, [r6, #0]
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	0699      	lsls	r1, r3, #26
 800a80e:	bf42      	ittt	mi
 800a810:	6833      	ldrmi	r3, [r6, #0]
 800a812:	3302      	addmi	r3, #2
 800a814:	6033      	strmi	r3, [r6, #0]
 800a816:	6825      	ldr	r5, [r4, #0]
 800a818:	f015 0506 	ands.w	r5, r5, #6
 800a81c:	d106      	bne.n	800a82c <_printf_common+0x48>
 800a81e:	f104 0a19 	add.w	sl, r4, #25
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	6832      	ldr	r2, [r6, #0]
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	42ab      	cmp	r3, r5
 800a82a:	dc26      	bgt.n	800a87a <_printf_common+0x96>
 800a82c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	3b00      	subs	r3, #0
 800a834:	bf18      	it	ne
 800a836:	2301      	movne	r3, #1
 800a838:	0692      	lsls	r2, r2, #26
 800a83a:	d42b      	bmi.n	800a894 <_printf_common+0xb0>
 800a83c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a840:	4641      	mov	r1, r8
 800a842:	4638      	mov	r0, r7
 800a844:	47c8      	blx	r9
 800a846:	3001      	adds	r0, #1
 800a848:	d01e      	beq.n	800a888 <_printf_common+0xa4>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	f003 0306 	and.w	r3, r3, #6
 800a852:	2b04      	cmp	r3, #4
 800a854:	bf02      	ittt	eq
 800a856:	68e5      	ldreq	r5, [r4, #12]
 800a858:	6833      	ldreq	r3, [r6, #0]
 800a85a:	1aed      	subeq	r5, r5, r3
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	bf0c      	ite	eq
 800a860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a864:	2500      	movne	r5, #0
 800a866:	4293      	cmp	r3, r2
 800a868:	bfc4      	itt	gt
 800a86a:	1a9b      	subgt	r3, r3, r2
 800a86c:	18ed      	addgt	r5, r5, r3
 800a86e:	2600      	movs	r6, #0
 800a870:	341a      	adds	r4, #26
 800a872:	42b5      	cmp	r5, r6
 800a874:	d11a      	bne.n	800a8ac <_printf_common+0xc8>
 800a876:	2000      	movs	r0, #0
 800a878:	e008      	b.n	800a88c <_printf_common+0xa8>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4652      	mov	r2, sl
 800a87e:	4641      	mov	r1, r8
 800a880:	4638      	mov	r0, r7
 800a882:	47c8      	blx	r9
 800a884:	3001      	adds	r0, #1
 800a886:	d103      	bne.n	800a890 <_printf_common+0xac>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a890:	3501      	adds	r5, #1
 800a892:	e7c6      	b.n	800a822 <_printf_common+0x3e>
 800a894:	18e1      	adds	r1, r4, r3
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	2030      	movs	r0, #48	@ 0x30
 800a89a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a89e:	4422      	add	r2, r4
 800a8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	e7c7      	b.n	800a83c <_printf_common+0x58>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	47c8      	blx	r9
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d0e6      	beq.n	800a888 <_printf_common+0xa4>
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	e7d9      	b.n	800a872 <_printf_common+0x8e>
	...

0800a8c0 <_printf_i>:
 800a8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	7e0f      	ldrb	r7, [r1, #24]
 800a8c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8c8:	2f78      	cmp	r7, #120	@ 0x78
 800a8ca:	4691      	mov	r9, r2
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	469a      	mov	sl, r3
 800a8d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8d6:	d807      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8d8:	2f62      	cmp	r7, #98	@ 0x62
 800a8da:	d80a      	bhi.n	800a8f2 <_printf_i+0x32>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	f000 80d2 	beq.w	800aa86 <_printf_i+0x1c6>
 800a8e2:	2f58      	cmp	r7, #88	@ 0x58
 800a8e4:	f000 80b9 	beq.w	800aa5a <_printf_i+0x19a>
 800a8e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8f0:	e03a      	b.n	800a968 <_printf_i+0xa8>
 800a8f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8f6:	2b15      	cmp	r3, #21
 800a8f8:	d8f6      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8fa:	a101      	add	r1, pc, #4	@ (adr r1, 800a900 <_printf_i+0x40>)
 800a8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a900:	0800a959 	.word	0x0800a959
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a8e9 	.word	0x0800a8e9
 800a90c:	0800a8e9 	.word	0x0800a8e9
 800a910:	0800a8e9 	.word	0x0800a8e9
 800a914:	0800a8e9 	.word	0x0800a8e9
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a8e9 	.word	0x0800a8e9
 800a920:	0800a8e9 	.word	0x0800a8e9
 800a924:	0800a8e9 	.word	0x0800a8e9
 800a928:	0800a8e9 	.word	0x0800a8e9
 800a92c:	0800aa6d 	.word	0x0800aa6d
 800a930:	0800a997 	.word	0x0800a997
 800a934:	0800aa27 	.word	0x0800aa27
 800a938:	0800a8e9 	.word	0x0800a8e9
 800a93c:	0800a8e9 	.word	0x0800a8e9
 800a940:	0800aa8f 	.word	0x0800aa8f
 800a944:	0800a8e9 	.word	0x0800a8e9
 800a948:	0800a997 	.word	0x0800a997
 800a94c:	0800a8e9 	.word	0x0800a8e9
 800a950:	0800a8e9 	.word	0x0800a8e9
 800a954:	0800aa2f 	.word	0x0800aa2f
 800a958:	6833      	ldr	r3, [r6, #0]
 800a95a:	1d1a      	adds	r2, r3, #4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6032      	str	r2, [r6, #0]
 800a960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a968:	2301      	movs	r3, #1
 800a96a:	e09d      	b.n	800aaa8 <_printf_i+0x1e8>
 800a96c:	6833      	ldr	r3, [r6, #0]
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	6031      	str	r1, [r6, #0]
 800a974:	0606      	lsls	r6, r0, #24
 800a976:	d501      	bpl.n	800a97c <_printf_i+0xbc>
 800a978:	681d      	ldr	r5, [r3, #0]
 800a97a:	e003      	b.n	800a984 <_printf_i+0xc4>
 800a97c:	0645      	lsls	r5, r0, #25
 800a97e:	d5fb      	bpl.n	800a978 <_printf_i+0xb8>
 800a980:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a984:	2d00      	cmp	r5, #0
 800a986:	da03      	bge.n	800a990 <_printf_i+0xd0>
 800a988:	232d      	movs	r3, #45	@ 0x2d
 800a98a:	426d      	negs	r5, r5
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a990:	4859      	ldr	r0, [pc, #356]	@ (800aaf8 <_printf_i+0x238>)
 800a992:	230a      	movs	r3, #10
 800a994:	e011      	b.n	800a9ba <_printf_i+0xfa>
 800a996:	6821      	ldr	r1, [r4, #0]
 800a998:	6833      	ldr	r3, [r6, #0]
 800a99a:	0608      	lsls	r0, r1, #24
 800a99c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9a0:	d402      	bmi.n	800a9a8 <_printf_i+0xe8>
 800a9a2:	0649      	lsls	r1, r1, #25
 800a9a4:	bf48      	it	mi
 800a9a6:	b2ad      	uxthmi	r5, r5
 800a9a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9aa:	4853      	ldr	r0, [pc, #332]	@ (800aaf8 <_printf_i+0x238>)
 800a9ac:	6033      	str	r3, [r6, #0]
 800a9ae:	bf14      	ite	ne
 800a9b0:	230a      	movne	r3, #10
 800a9b2:	2308      	moveq	r3, #8
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ba:	6866      	ldr	r6, [r4, #4]
 800a9bc:	60a6      	str	r6, [r4, #8]
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	bfa2      	ittt	ge
 800a9c2:	6821      	ldrge	r1, [r4, #0]
 800a9c4:	f021 0104 	bicge.w	r1, r1, #4
 800a9c8:	6021      	strge	r1, [r4, #0]
 800a9ca:	b90d      	cbnz	r5, 800a9d0 <_printf_i+0x110>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	d04b      	beq.n	800aa68 <_printf_i+0x1a8>
 800a9d0:	4616      	mov	r6, r2
 800a9d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9d6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9da:	5dc7      	ldrb	r7, [r0, r7]
 800a9dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9e0:	462f      	mov	r7, r5
 800a9e2:	42bb      	cmp	r3, r7
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	d9f4      	bls.n	800a9d2 <_printf_i+0x112>
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10b      	bne.n	800aa04 <_printf_i+0x144>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07df      	lsls	r7, r3, #31
 800a9f0:	d508      	bpl.n	800aa04 <_printf_i+0x144>
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	6861      	ldr	r1, [r4, #4]
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	bfde      	ittt	le
 800a9fa:	2330      	movle	r3, #48	@ 0x30
 800a9fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa04:	1b92      	subs	r2, r2, r6
 800aa06:	6122      	str	r2, [r4, #16]
 800aa08:	f8cd a000 	str.w	sl, [sp]
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	aa03      	add	r2, sp, #12
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7ff fee6 	bl	800a7e4 <_printf_common>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d14a      	bne.n	800aab2 <_printf_i+0x1f2>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b004      	add	sp, #16
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	f043 0320 	orr.w	r3, r3, #32
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	4833      	ldr	r0, [pc, #204]	@ (800aafc <_printf_i+0x23c>)
 800aa30:	2778      	movs	r7, #120	@ 0x78
 800aa32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	6831      	ldr	r1, [r6, #0]
 800aa3a:	061f      	lsls	r7, r3, #24
 800aa3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa40:	d402      	bmi.n	800aa48 <_printf_i+0x188>
 800aa42:	065f      	lsls	r7, r3, #25
 800aa44:	bf48      	it	mi
 800aa46:	b2ad      	uxthmi	r5, r5
 800aa48:	6031      	str	r1, [r6, #0]
 800aa4a:	07d9      	lsls	r1, r3, #31
 800aa4c:	bf44      	itt	mi
 800aa4e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa52:	6023      	strmi	r3, [r4, #0]
 800aa54:	b11d      	cbz	r5, 800aa5e <_printf_i+0x19e>
 800aa56:	2310      	movs	r3, #16
 800aa58:	e7ac      	b.n	800a9b4 <_printf_i+0xf4>
 800aa5a:	4827      	ldr	r0, [pc, #156]	@ (800aaf8 <_printf_i+0x238>)
 800aa5c:	e7e9      	b.n	800aa32 <_printf_i+0x172>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f023 0320 	bic.w	r3, r3, #32
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	e7f6      	b.n	800aa56 <_printf_i+0x196>
 800aa68:	4616      	mov	r6, r2
 800aa6a:	e7bd      	b.n	800a9e8 <_printf_i+0x128>
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	6825      	ldr	r5, [r4, #0]
 800aa70:	6961      	ldr	r1, [r4, #20]
 800aa72:	1d18      	adds	r0, r3, #4
 800aa74:	6030      	str	r0, [r6, #0]
 800aa76:	062e      	lsls	r6, r5, #24
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0x1c0>
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	e002      	b.n	800aa86 <_printf_i+0x1c6>
 800aa80:	0668      	lsls	r0, r5, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0x1bc>
 800aa84:	8019      	strh	r1, [r3, #0]
 800aa86:	2300      	movs	r3, #0
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	4616      	mov	r6, r2
 800aa8c:	e7bc      	b.n	800aa08 <_printf_i+0x148>
 800aa8e:	6833      	ldr	r3, [r6, #0]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	6032      	str	r2, [r6, #0]
 800aa94:	681e      	ldr	r6, [r3, #0]
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7f5 fbb8 	bl	8000210 <memchr>
 800aaa0:	b108      	cbz	r0, 800aaa6 <_printf_i+0x1e6>
 800aaa2:	1b80      	subs	r0, r0, r6
 800aaa4:	6060      	str	r0, [r4, #4]
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aab0:	e7aa      	b.n	800aa08 <_printf_i+0x148>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	4632      	mov	r2, r6
 800aab6:	4649      	mov	r1, r9
 800aab8:	4640      	mov	r0, r8
 800aaba:	47d0      	blx	sl
 800aabc:	3001      	adds	r0, #1
 800aabe:	d0ad      	beq.n	800aa1c <_printf_i+0x15c>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	079b      	lsls	r3, r3, #30
 800aac4:	d413      	bmi.n	800aaee <_printf_i+0x22e>
 800aac6:	68e0      	ldr	r0, [r4, #12]
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	4298      	cmp	r0, r3
 800aacc:	bfb8      	it	lt
 800aace:	4618      	movlt	r0, r3
 800aad0:	e7a6      	b.n	800aa20 <_printf_i+0x160>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4632      	mov	r2, r6
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	47d0      	blx	sl
 800aadc:	3001      	adds	r0, #1
 800aade:	d09d      	beq.n	800aa1c <_printf_i+0x15c>
 800aae0:	3501      	adds	r5, #1
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	9903      	ldr	r1, [sp, #12]
 800aae6:	1a5b      	subs	r3, r3, r1
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dcf2      	bgt.n	800aad2 <_printf_i+0x212>
 800aaec:	e7eb      	b.n	800aac6 <_printf_i+0x206>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	f104 0619 	add.w	r6, r4, #25
 800aaf4:	e7f5      	b.n	800aae2 <_printf_i+0x222>
 800aaf6:	bf00      	nop
 800aaf8:	08020dde 	.word	0x08020dde
 800aafc:	08020def 	.word	0x08020def

0800ab00 <std>:
 800ab00:	2300      	movs	r3, #0
 800ab02:	b510      	push	{r4, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	e9c0 3300 	strd	r3, r3, [r0]
 800ab0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab0e:	6083      	str	r3, [r0, #8]
 800ab10:	8181      	strh	r1, [r0, #12]
 800ab12:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab14:	81c2      	strh	r2, [r0, #14]
 800ab16:	6183      	str	r3, [r0, #24]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	305c      	adds	r0, #92	@ 0x5c
 800ab1e:	f000 f924 	bl	800ad6a <memset>
 800ab22:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <std+0x58>)
 800ab24:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <std+0x5c>)
 800ab28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <std+0x60>)
 800ab2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x64>)
 800ab30:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x68>)
 800ab34:	6224      	str	r4, [r4, #32]
 800ab36:	429c      	cmp	r4, r3
 800ab38:	d006      	beq.n	800ab48 <std+0x48>
 800ab3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab3e:	4294      	cmp	r4, r2
 800ab40:	d002      	beq.n	800ab48 <std+0x48>
 800ab42:	33d0      	adds	r3, #208	@ 0xd0
 800ab44:	429c      	cmp	r4, r3
 800ab46:	d105      	bne.n	800ab54 <std+0x54>
 800ab48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab50:	f000 b988 	b.w	800ae64 <__retarget_lock_init_recursive>
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	bf00      	nop
 800ab58:	0800acc5 	.word	0x0800acc5
 800ab5c:	0800ace7 	.word	0x0800ace7
 800ab60:	0800ad1f 	.word	0x0800ad1f
 800ab64:	0800ad43 	.word	0x0800ad43
 800ab68:	20018d2c 	.word	0x20018d2c

0800ab6c <stdio_exit_handler>:
 800ab6c:	4a02      	ldr	r2, [pc, #8]	@ (800ab78 <stdio_exit_handler+0xc>)
 800ab6e:	4903      	ldr	r1, [pc, #12]	@ (800ab7c <stdio_exit_handler+0x10>)
 800ab70:	4803      	ldr	r0, [pc, #12]	@ (800ab80 <stdio_exit_handler+0x14>)
 800ab72:	f000 b869 	b.w	800ac48 <_fwalk_sglue>
 800ab76:	bf00      	nop
 800ab78:	2000000c 	.word	0x2000000c
 800ab7c:	0800c7c5 	.word	0x0800c7c5
 800ab80:	2000001c 	.word	0x2000001c

0800ab84 <cleanup_stdio>:
 800ab84:	6841      	ldr	r1, [r0, #4]
 800ab86:	4b0c      	ldr	r3, [pc, #48]	@ (800abb8 <cleanup_stdio+0x34>)
 800ab88:	4299      	cmp	r1, r3
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	d001      	beq.n	800ab94 <cleanup_stdio+0x10>
 800ab90:	f001 fe18 	bl	800c7c4 <_fflush_r>
 800ab94:	68a1      	ldr	r1, [r4, #8]
 800ab96:	4b09      	ldr	r3, [pc, #36]	@ (800abbc <cleanup_stdio+0x38>)
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	d002      	beq.n	800aba2 <cleanup_stdio+0x1e>
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f001 fe11 	bl	800c7c4 <_fflush_r>
 800aba2:	68e1      	ldr	r1, [r4, #12]
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <cleanup_stdio+0x3c>)
 800aba6:	4299      	cmp	r1, r3
 800aba8:	d004      	beq.n	800abb4 <cleanup_stdio+0x30>
 800abaa:	4620      	mov	r0, r4
 800abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb0:	f001 be08 	b.w	800c7c4 <_fflush_r>
 800abb4:	bd10      	pop	{r4, pc}
 800abb6:	bf00      	nop
 800abb8:	20018d2c 	.word	0x20018d2c
 800abbc:	20018d94 	.word	0x20018d94
 800abc0:	20018dfc 	.word	0x20018dfc

0800abc4 <global_stdio_init.part.0>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <global_stdio_init.part.0+0x30>)
 800abc8:	4c0b      	ldr	r4, [pc, #44]	@ (800abf8 <global_stdio_init.part.0+0x34>)
 800abca:	4a0c      	ldr	r2, [pc, #48]	@ (800abfc <global_stdio_init.part.0+0x38>)
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	4620      	mov	r0, r4
 800abd0:	2200      	movs	r2, #0
 800abd2:	2104      	movs	r1, #4
 800abd4:	f7ff ff94 	bl	800ab00 <std>
 800abd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abdc:	2201      	movs	r2, #1
 800abde:	2109      	movs	r1, #9
 800abe0:	f7ff ff8e 	bl	800ab00 <std>
 800abe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abe8:	2202      	movs	r2, #2
 800abea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abee:	2112      	movs	r1, #18
 800abf0:	f7ff bf86 	b.w	800ab00 <std>
 800abf4:	20018e64 	.word	0x20018e64
 800abf8:	20018d2c 	.word	0x20018d2c
 800abfc:	0800ab6d 	.word	0x0800ab6d

0800ac00 <__sfp_lock_acquire>:
 800ac00:	4801      	ldr	r0, [pc, #4]	@ (800ac08 <__sfp_lock_acquire+0x8>)
 800ac02:	f000 b930 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800ac06:	bf00      	nop
 800ac08:	20018e6d 	.word	0x20018e6d

0800ac0c <__sfp_lock_release>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	@ (800ac14 <__sfp_lock_release+0x8>)
 800ac0e:	f000 b92b 	b.w	800ae68 <__retarget_lock_release_recursive>
 800ac12:	bf00      	nop
 800ac14:	20018e6d 	.word	0x20018e6d

0800ac18 <__sinit>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	f7ff fff0 	bl	800ac00 <__sfp_lock_acquire>
 800ac20:	6a23      	ldr	r3, [r4, #32]
 800ac22:	b11b      	cbz	r3, 800ac2c <__sinit+0x14>
 800ac24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac28:	f7ff bff0 	b.w	800ac0c <__sfp_lock_release>
 800ac2c:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <__sinit+0x28>)
 800ac2e:	6223      	str	r3, [r4, #32]
 800ac30:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <__sinit+0x2c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1f5      	bne.n	800ac24 <__sinit+0xc>
 800ac38:	f7ff ffc4 	bl	800abc4 <global_stdio_init.part.0>
 800ac3c:	e7f2      	b.n	800ac24 <__sinit+0xc>
 800ac3e:	bf00      	nop
 800ac40:	0800ab85 	.word	0x0800ab85
 800ac44:	20018e64 	.word	0x20018e64

0800ac48 <_fwalk_sglue>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	4688      	mov	r8, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	2600      	movs	r6, #0
 800ac54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac58:	f1b9 0901 	subs.w	r9, r9, #1
 800ac5c:	d505      	bpl.n	800ac6a <_fwalk_sglue+0x22>
 800ac5e:	6824      	ldr	r4, [r4, #0]
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	d1f7      	bne.n	800ac54 <_fwalk_sglue+0xc>
 800ac64:	4630      	mov	r0, r6
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d907      	bls.n	800ac80 <_fwalk_sglue+0x38>
 800ac70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac74:	3301      	adds	r3, #1
 800ac76:	d003      	beq.n	800ac80 <_fwalk_sglue+0x38>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c0      	blx	r8
 800ac7e:	4306      	orrs	r6, r0
 800ac80:	3568      	adds	r5, #104	@ 0x68
 800ac82:	e7e9      	b.n	800ac58 <_fwalk_sglue+0x10>

0800ac84 <siprintf>:
 800ac84:	b40e      	push	{r1, r2, r3}
 800ac86:	b500      	push	{lr}
 800ac88:	b09c      	sub	sp, #112	@ 0x70
 800ac8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac8c:	9002      	str	r0, [sp, #8]
 800ac8e:	9006      	str	r0, [sp, #24]
 800ac90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac94:	4809      	ldr	r0, [pc, #36]	@ (800acbc <siprintf+0x38>)
 800ac96:	9107      	str	r1, [sp, #28]
 800ac98:	9104      	str	r1, [sp, #16]
 800ac9a:	4909      	ldr	r1, [pc, #36]	@ (800acc0 <siprintf+0x3c>)
 800ac9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca0:	9105      	str	r1, [sp, #20]
 800aca2:	6800      	ldr	r0, [r0, #0]
 800aca4:	9301      	str	r3, [sp, #4]
 800aca6:	a902      	add	r1, sp, #8
 800aca8:	f001 fc0c 	bl	800c4c4 <_svfiprintf_r>
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	2200      	movs	r2, #0
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	b01c      	add	sp, #112	@ 0x70
 800acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb8:	b003      	add	sp, #12
 800acba:	4770      	bx	lr
 800acbc:	20000018 	.word	0x20000018
 800acc0:	ffff0208 	.word	0xffff0208

0800acc4 <__sread>:
 800acc4:	b510      	push	{r4, lr}
 800acc6:	460c      	mov	r4, r1
 800acc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800accc:	f000 f87c 	bl	800adc8 <_read_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	bfab      	itete	ge
 800acd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acd6:	89a3      	ldrhlt	r3, [r4, #12]
 800acd8:	181b      	addge	r3, r3, r0
 800acda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acde:	bfac      	ite	ge
 800ace0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ace2:	81a3      	strhlt	r3, [r4, #12]
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__swrite>:
 800ace6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acea:	461f      	mov	r7, r3
 800acec:	898b      	ldrh	r3, [r1, #12]
 800acee:	05db      	lsls	r3, r3, #23
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	4616      	mov	r6, r2
 800acf6:	d505      	bpl.n	800ad04 <__swrite+0x1e>
 800acf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfc:	2302      	movs	r3, #2
 800acfe:	2200      	movs	r2, #0
 800ad00:	f000 f850 	bl	800ada4 <_lseek_r>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	4628      	mov	r0, r5
 800ad16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	f000 b867 	b.w	800adec <_write_r>

0800ad1e <__sseek>:
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	460c      	mov	r4, r1
 800ad22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad26:	f000 f83d 	bl	800ada4 <_lseek_r>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	bf15      	itete	ne
 800ad30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad3a:	81a3      	strheq	r3, [r4, #12]
 800ad3c:	bf18      	it	ne
 800ad3e:	81a3      	strhne	r3, [r4, #12]
 800ad40:	bd10      	pop	{r4, pc}

0800ad42 <__sclose>:
 800ad42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad46:	f000 b81d 	b.w	800ad84 <_close_r>

0800ad4a <memcmp>:
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	3901      	subs	r1, #1
 800ad4e:	4402      	add	r2, r0
 800ad50:	4290      	cmp	r0, r2
 800ad52:	d101      	bne.n	800ad58 <memcmp+0xe>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e005      	b.n	800ad64 <memcmp+0x1a>
 800ad58:	7803      	ldrb	r3, [r0, #0]
 800ad5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	d001      	beq.n	800ad66 <memcmp+0x1c>
 800ad62:	1b18      	subs	r0, r3, r4
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	3001      	adds	r0, #1
 800ad68:	e7f2      	b.n	800ad50 <memcmp+0x6>

0800ad6a <memset>:
 800ad6a:	4402      	add	r2, r0
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d100      	bne.n	800ad74 <memset+0xa>
 800ad72:	4770      	bx	lr
 800ad74:	f803 1b01 	strb.w	r1, [r3], #1
 800ad78:	e7f9      	b.n	800ad6e <memset+0x4>
	...

0800ad7c <_localeconv_r>:
 800ad7c:	4800      	ldr	r0, [pc, #0]	@ (800ad80 <_localeconv_r+0x4>)
 800ad7e:	4770      	bx	lr
 800ad80:	20000158 	.word	0x20000158

0800ad84 <_close_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d06      	ldr	r5, [pc, #24]	@ (800ada0 <_close_r+0x1c>)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	f7f8 f846 	bl	8002e20 <_close>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_close_r+0x1a>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_close_r+0x1a>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	20018e68 	.word	0x20018e68

0800ada4 <_lseek_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	@ (800adc4 <_lseek_r+0x20>)
 800ada8:	4604      	mov	r4, r0
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f7f8 f85b 	bl	8002e6e <_lseek>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_lseek_r+0x1e>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_lseek_r+0x1e>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	20018e68 	.word	0x20018e68

0800adc8 <_read_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	@ (800ade8 <_read_r+0x20>)
 800adcc:	4604      	mov	r4, r0
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	2200      	movs	r2, #0
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f7f7 ffe9 	bl	8002dae <_read>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_read_r+0x1e>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_read_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20018e68 	.word	0x20018e68

0800adec <_write_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	@ (800ae0c <_write_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f7 fff4 	bl	8002de8 <_write>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_write_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_write_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20018e68 	.word	0x20018e68

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	@ (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000018 	.word	0x20000018

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae54 <__libc_init_array+0x38>)
 800ae20:	4c0d      	ldr	r4, [pc, #52]	@ (800ae58 <__libc_init_array+0x3c>)
 800ae22:	1b64      	subs	r4, r4, r5
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	2600      	movs	r6, #0
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae5c <__libc_init_array+0x40>)
 800ae2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae60 <__libc_init_array+0x44>)
 800ae30:	f002 fc36 	bl	800d6a0 <_init>
 800ae34:	1b64      	subs	r4, r4, r5
 800ae36:	10a4      	asrs	r4, r4, #2
 800ae38:	2600      	movs	r6, #0
 800ae3a:	42a6      	cmp	r6, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae44:	4798      	blx	r3
 800ae46:	3601      	adds	r6, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4e:	4798      	blx	r3
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	08021188 	.word	0x08021188
 800ae58:	08021188 	.word	0x08021188
 800ae5c:	08021188 	.word	0x08021188
 800ae60:	0802118c 	.word	0x0802118c

0800ae64 <__retarget_lock_init_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_acquire_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <__retarget_lock_release_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <quorem>:
 800ae6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6e:	6903      	ldr	r3, [r0, #16]
 800ae70:	690c      	ldr	r4, [r1, #16]
 800ae72:	42a3      	cmp	r3, r4
 800ae74:	4607      	mov	r7, r0
 800ae76:	db7e      	blt.n	800af76 <quorem+0x10c>
 800ae78:	3c01      	subs	r4, #1
 800ae7a:	f101 0814 	add.w	r8, r1, #20
 800ae7e:	00a3      	lsls	r3, r4, #2
 800ae80:	f100 0514 	add.w	r5, r0, #20
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae94:	3301      	adds	r3, #1
 800ae96:	429a      	cmp	r2, r3
 800ae98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800aea0:	d32e      	bcc.n	800af00 <quorem+0x96>
 800aea2:	f04f 0a00 	mov.w	sl, #0
 800aea6:	46c4      	mov	ip, r8
 800aea8:	46ae      	mov	lr, r5
 800aeaa:	46d3      	mov	fp, sl
 800aeac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aeb0:	b298      	uxth	r0, r3
 800aeb2:	fb06 a000 	mla	r0, r6, r0, sl
 800aeb6:	0c02      	lsrs	r2, r0, #16
 800aeb8:	0c1b      	lsrs	r3, r3, #16
 800aeba:	fb06 2303 	mla	r3, r6, r3, r2
 800aebe:	f8de 2000 	ldr.w	r2, [lr]
 800aec2:	b280      	uxth	r0, r0
 800aec4:	b292      	uxth	r2, r2
 800aec6:	1a12      	subs	r2, r2, r0
 800aec8:	445a      	add	r2, fp
 800aeca:	f8de 0000 	ldr.w	r0, [lr]
 800aece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aed8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aedc:	b292      	uxth	r2, r2
 800aede:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aee2:	45e1      	cmp	r9, ip
 800aee4:	f84e 2b04 	str.w	r2, [lr], #4
 800aee8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aeec:	d2de      	bcs.n	800aeac <quorem+0x42>
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	58eb      	ldr	r3, [r5, r3]
 800aef2:	b92b      	cbnz	r3, 800af00 <quorem+0x96>
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	3b04      	subs	r3, #4
 800aef8:	429d      	cmp	r5, r3
 800aefa:	461a      	mov	r2, r3
 800aefc:	d32f      	bcc.n	800af5e <quorem+0xf4>
 800aefe:	613c      	str	r4, [r7, #16]
 800af00:	4638      	mov	r0, r7
 800af02:	f001 f97b 	bl	800c1fc <__mcmp>
 800af06:	2800      	cmp	r0, #0
 800af08:	db25      	blt.n	800af56 <quorem+0xec>
 800af0a:	4629      	mov	r1, r5
 800af0c:	2000      	movs	r0, #0
 800af0e:	f858 2b04 	ldr.w	r2, [r8], #4
 800af12:	f8d1 c000 	ldr.w	ip, [r1]
 800af16:	fa1f fe82 	uxth.w	lr, r2
 800af1a:	fa1f f38c 	uxth.w	r3, ip
 800af1e:	eba3 030e 	sub.w	r3, r3, lr
 800af22:	4403      	add	r3, r0
 800af24:	0c12      	lsrs	r2, r2, #16
 800af26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af2e:	b29b      	uxth	r3, r3
 800af30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af34:	45c1      	cmp	r9, r8
 800af36:	f841 3b04 	str.w	r3, [r1], #4
 800af3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af3e:	d2e6      	bcs.n	800af0e <quorem+0xa4>
 800af40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af48:	b922      	cbnz	r2, 800af54 <quorem+0xea>
 800af4a:	3b04      	subs	r3, #4
 800af4c:	429d      	cmp	r5, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	d30b      	bcc.n	800af6a <quorem+0x100>
 800af52:	613c      	str	r4, [r7, #16]
 800af54:	3601      	adds	r6, #1
 800af56:	4630      	mov	r0, r6
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5e:	6812      	ldr	r2, [r2, #0]
 800af60:	3b04      	subs	r3, #4
 800af62:	2a00      	cmp	r2, #0
 800af64:	d1cb      	bne.n	800aefe <quorem+0x94>
 800af66:	3c01      	subs	r4, #1
 800af68:	e7c6      	b.n	800aef8 <quorem+0x8e>
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	2a00      	cmp	r2, #0
 800af70:	d1ef      	bne.n	800af52 <quorem+0xe8>
 800af72:	3c01      	subs	r4, #1
 800af74:	e7ea      	b.n	800af4c <quorem+0xe2>
 800af76:	2000      	movs	r0, #0
 800af78:	e7ee      	b.n	800af58 <quorem+0xee>
 800af7a:	0000      	movs	r0, r0
 800af7c:	0000      	movs	r0, r0
	...

0800af80 <_dtoa_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	69c7      	ldr	r7, [r0, #28]
 800af86:	b099      	sub	sp, #100	@ 0x64
 800af88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af8c:	ec55 4b10 	vmov	r4, r5, d0
 800af90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af92:	9109      	str	r1, [sp, #36]	@ 0x24
 800af94:	4683      	mov	fp, r0
 800af96:	920e      	str	r2, [sp, #56]	@ 0x38
 800af98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af9a:	b97f      	cbnz	r7, 800afbc <_dtoa_r+0x3c>
 800af9c:	2010      	movs	r0, #16
 800af9e:	f000 fdfd 	bl	800bb9c <malloc>
 800afa2:	4602      	mov	r2, r0
 800afa4:	f8cb 001c 	str.w	r0, [fp, #28]
 800afa8:	b920      	cbnz	r0, 800afb4 <_dtoa_r+0x34>
 800afaa:	4ba7      	ldr	r3, [pc, #668]	@ (800b248 <_dtoa_r+0x2c8>)
 800afac:	21ef      	movs	r1, #239	@ 0xef
 800afae:	48a7      	ldr	r0, [pc, #668]	@ (800b24c <_dtoa_r+0x2cc>)
 800afb0:	f001 fc68 	bl	800c884 <__assert_func>
 800afb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800afb8:	6007      	str	r7, [r0, #0]
 800afba:	60c7      	str	r7, [r0, #12]
 800afbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afc0:	6819      	ldr	r1, [r3, #0]
 800afc2:	b159      	cbz	r1, 800afdc <_dtoa_r+0x5c>
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	604a      	str	r2, [r1, #4]
 800afc8:	2301      	movs	r3, #1
 800afca:	4093      	lsls	r3, r2
 800afcc:	608b      	str	r3, [r1, #8]
 800afce:	4658      	mov	r0, fp
 800afd0:	f000 feda 	bl	800bd88 <_Bfree>
 800afd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afd8:	2200      	movs	r2, #0
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	1e2b      	subs	r3, r5, #0
 800afde:	bfb9      	ittee	lt
 800afe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800afe4:	9303      	strlt	r3, [sp, #12]
 800afe6:	2300      	movge	r3, #0
 800afe8:	6033      	strge	r3, [r6, #0]
 800afea:	9f03      	ldr	r7, [sp, #12]
 800afec:	4b98      	ldr	r3, [pc, #608]	@ (800b250 <_dtoa_r+0x2d0>)
 800afee:	bfbc      	itt	lt
 800aff0:	2201      	movlt	r2, #1
 800aff2:	6032      	strlt	r2, [r6, #0]
 800aff4:	43bb      	bics	r3, r7
 800aff6:	d112      	bne.n	800b01e <_dtoa_r+0x9e>
 800aff8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800affa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b004:	4323      	orrs	r3, r4
 800b006:	f000 854d 	beq.w	800baa4 <_dtoa_r+0xb24>
 800b00a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b00c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b264 <_dtoa_r+0x2e4>
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 854f 	beq.w	800bab4 <_dtoa_r+0xb34>
 800b016:	f10a 0303 	add.w	r3, sl, #3
 800b01a:	f000 bd49 	b.w	800bab0 <_dtoa_r+0xb30>
 800b01e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	ec51 0b17 	vmov	r0, r1, d7
 800b028:	2300      	movs	r3, #0
 800b02a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b02e:	f7f5 fd6b 	bl	8000b08 <__aeabi_dcmpeq>
 800b032:	4680      	mov	r8, r0
 800b034:	b158      	cbz	r0, 800b04e <_dtoa_r+0xce>
 800b036:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b038:	2301      	movs	r3, #1
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b03e:	b113      	cbz	r3, 800b046 <_dtoa_r+0xc6>
 800b040:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b042:	4b84      	ldr	r3, [pc, #528]	@ (800b254 <_dtoa_r+0x2d4>)
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b268 <_dtoa_r+0x2e8>
 800b04a:	f000 bd33 	b.w	800bab4 <_dtoa_r+0xb34>
 800b04e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b052:	aa16      	add	r2, sp, #88	@ 0x58
 800b054:	a917      	add	r1, sp, #92	@ 0x5c
 800b056:	4658      	mov	r0, fp
 800b058:	f001 f980 	bl	800c35c <__d2b>
 800b05c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b060:	4681      	mov	r9, r0
 800b062:	2e00      	cmp	r6, #0
 800b064:	d077      	beq.n	800b156 <_dtoa_r+0x1d6>
 800b066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b068:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b07c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b080:	4619      	mov	r1, r3
 800b082:	2200      	movs	r2, #0
 800b084:	4b74      	ldr	r3, [pc, #464]	@ (800b258 <_dtoa_r+0x2d8>)
 800b086:	f7f5 f91f 	bl	80002c8 <__aeabi_dsub>
 800b08a:	a369      	add	r3, pc, #420	@ (adr r3, 800b230 <_dtoa_r+0x2b0>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 fad2 	bl	8000638 <__aeabi_dmul>
 800b094:	a368      	add	r3, pc, #416	@ (adr r3, 800b238 <_dtoa_r+0x2b8>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	f7f5 f917 	bl	80002cc <__adddf3>
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	f7f5 fa5e 	bl	8000564 <__aeabi_i2d>
 800b0a8:	a365      	add	r3, pc, #404	@ (adr r3, 800b240 <_dtoa_r+0x2c0>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 fac3 	bl	8000638 <__aeabi_dmul>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7f5 f907 	bl	80002cc <__adddf3>
 800b0be:	4604      	mov	r4, r0
 800b0c0:	460d      	mov	r5, r1
 800b0c2:	f7f5 fd69 	bl	8000b98 <__aeabi_d2iz>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 fd24 	bl	8000b1c <__aeabi_dcmplt>
 800b0d4:	b140      	cbz	r0, 800b0e8 <_dtoa_r+0x168>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7f5 fa44 	bl	8000564 <__aeabi_i2d>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	462b      	mov	r3, r5
 800b0e0:	f7f5 fd12 	bl	8000b08 <__aeabi_dcmpeq>
 800b0e4:	b900      	cbnz	r0, 800b0e8 <_dtoa_r+0x168>
 800b0e6:	3f01      	subs	r7, #1
 800b0e8:	2f16      	cmp	r7, #22
 800b0ea:	d851      	bhi.n	800b190 <_dtoa_r+0x210>
 800b0ec:	4b5b      	ldr	r3, [pc, #364]	@ (800b25c <_dtoa_r+0x2dc>)
 800b0ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0fa:	f7f5 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d048      	beq.n	800b194 <_dtoa_r+0x214>
 800b102:	3f01      	subs	r7, #1
 800b104:	2300      	movs	r3, #0
 800b106:	9312      	str	r3, [sp, #72]	@ 0x48
 800b108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b10a:	1b9b      	subs	r3, r3, r6
 800b10c:	1e5a      	subs	r2, r3, #1
 800b10e:	bf44      	itt	mi
 800b110:	f1c3 0801 	rsbmi	r8, r3, #1
 800b114:	2300      	movmi	r3, #0
 800b116:	9208      	str	r2, [sp, #32]
 800b118:	bf54      	ite	pl
 800b11a:	f04f 0800 	movpl.w	r8, #0
 800b11e:	9308      	strmi	r3, [sp, #32]
 800b120:	2f00      	cmp	r7, #0
 800b122:	db39      	blt.n	800b198 <_dtoa_r+0x218>
 800b124:	9b08      	ldr	r3, [sp, #32]
 800b126:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b128:	443b      	add	r3, r7
 800b12a:	9308      	str	r3, [sp, #32]
 800b12c:	2300      	movs	r3, #0
 800b12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b132:	2b09      	cmp	r3, #9
 800b134:	d864      	bhi.n	800b200 <_dtoa_r+0x280>
 800b136:	2b05      	cmp	r3, #5
 800b138:	bfc4      	itt	gt
 800b13a:	3b04      	subgt	r3, #4
 800b13c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	f1a3 0302 	sub.w	r3, r3, #2
 800b144:	bfcc      	ite	gt
 800b146:	2400      	movgt	r4, #0
 800b148:	2401      	movle	r4, #1
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d863      	bhi.n	800b216 <_dtoa_r+0x296>
 800b14e:	e8df f003 	tbb	[pc, r3]
 800b152:	372a      	.short	0x372a
 800b154:	5535      	.short	0x5535
 800b156:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b15a:	441e      	add	r6, r3
 800b15c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b160:	2b20      	cmp	r3, #32
 800b162:	bfc1      	itttt	gt
 800b164:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b168:	409f      	lslgt	r7, r3
 800b16a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b16e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b172:	bfd6      	itet	le
 800b174:	f1c3 0320 	rsble	r3, r3, #32
 800b178:	ea47 0003 	orrgt.w	r0, r7, r3
 800b17c:	fa04 f003 	lslle.w	r0, r4, r3
 800b180:	f7f5 f9e0 	bl	8000544 <__aeabi_ui2d>
 800b184:	2201      	movs	r2, #1
 800b186:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b18a:	3e01      	subs	r6, #1
 800b18c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b18e:	e777      	b.n	800b080 <_dtoa_r+0x100>
 800b190:	2301      	movs	r3, #1
 800b192:	e7b8      	b.n	800b106 <_dtoa_r+0x186>
 800b194:	9012      	str	r0, [sp, #72]	@ 0x48
 800b196:	e7b7      	b.n	800b108 <_dtoa_r+0x188>
 800b198:	427b      	negs	r3, r7
 800b19a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b19c:	2300      	movs	r3, #0
 800b19e:	eba8 0807 	sub.w	r8, r8, r7
 800b1a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1a4:	e7c4      	b.n	800b130 <_dtoa_r+0x1b0>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dc35      	bgt.n	800b21c <_dtoa_r+0x29c>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	9307      	str	r3, [sp, #28]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1ba:	e00b      	b.n	800b1d4 <_dtoa_r+0x254>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e7f3      	b.n	800b1a8 <_dtoa_r+0x228>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	bfb8      	it	lt
 800b1d2:	2301      	movlt	r3, #1
 800b1d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b1d8:	2100      	movs	r1, #0
 800b1da:	2204      	movs	r2, #4
 800b1dc:	f102 0514 	add.w	r5, r2, #20
 800b1e0:	429d      	cmp	r5, r3
 800b1e2:	d91f      	bls.n	800b224 <_dtoa_r+0x2a4>
 800b1e4:	6041      	str	r1, [r0, #4]
 800b1e6:	4658      	mov	r0, fp
 800b1e8:	f000 fd8e 	bl	800bd08 <_Balloc>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d13c      	bne.n	800b26c <_dtoa_r+0x2ec>
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b260 <_dtoa_r+0x2e0>)
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1fa:	e6d8      	b.n	800afae <_dtoa_r+0x2e>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e7e0      	b.n	800b1c2 <_dtoa_r+0x242>
 800b200:	2401      	movs	r4, #1
 800b202:	2300      	movs	r3, #0
 800b204:	9309      	str	r3, [sp, #36]	@ 0x24
 800b206:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b208:	f04f 33ff 	mov.w	r3, #4294967295
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	2200      	movs	r2, #0
 800b212:	2312      	movs	r3, #18
 800b214:	e7d0      	b.n	800b1b8 <_dtoa_r+0x238>
 800b216:	2301      	movs	r3, #1
 800b218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b21a:	e7f5      	b.n	800b208 <_dtoa_r+0x288>
 800b21c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	9307      	str	r3, [sp, #28]
 800b222:	e7d7      	b.n	800b1d4 <_dtoa_r+0x254>
 800b224:	3101      	adds	r1, #1
 800b226:	0052      	lsls	r2, r2, #1
 800b228:	e7d8      	b.n	800b1dc <_dtoa_r+0x25c>
 800b22a:	bf00      	nop
 800b22c:	f3af 8000 	nop.w
 800b230:	636f4361 	.word	0x636f4361
 800b234:	3fd287a7 	.word	0x3fd287a7
 800b238:	8b60c8b3 	.word	0x8b60c8b3
 800b23c:	3fc68a28 	.word	0x3fc68a28
 800b240:	509f79fb 	.word	0x509f79fb
 800b244:	3fd34413 	.word	0x3fd34413
 800b248:	08020e0d 	.word	0x08020e0d
 800b24c:	08020e24 	.word	0x08020e24
 800b250:	7ff00000 	.word	0x7ff00000
 800b254:	08020ddd 	.word	0x08020ddd
 800b258:	3ff80000 	.word	0x3ff80000
 800b25c:	08020f20 	.word	0x08020f20
 800b260:	08020e7c 	.word	0x08020e7c
 800b264:	08020e09 	.word	0x08020e09
 800b268:	08020ddc 	.word	0x08020ddc
 800b26c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b270:	6018      	str	r0, [r3, #0]
 800b272:	9b07      	ldr	r3, [sp, #28]
 800b274:	2b0e      	cmp	r3, #14
 800b276:	f200 80a4 	bhi.w	800b3c2 <_dtoa_r+0x442>
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	f000 80a1 	beq.w	800b3c2 <_dtoa_r+0x442>
 800b280:	2f00      	cmp	r7, #0
 800b282:	dd33      	ble.n	800b2ec <_dtoa_r+0x36c>
 800b284:	4bad      	ldr	r3, [pc, #692]	@ (800b53c <_dtoa_r+0x5bc>)
 800b286:	f007 020f 	and.w	r2, r7, #15
 800b28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b28e:	ed93 7b00 	vldr	d7, [r3]
 800b292:	05f8      	lsls	r0, r7, #23
 800b294:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b298:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b29c:	d516      	bpl.n	800b2cc <_dtoa_r+0x34c>
 800b29e:	4ba8      	ldr	r3, [pc, #672]	@ (800b540 <_dtoa_r+0x5c0>)
 800b2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2a8:	f7f5 faf0 	bl	800088c <__aeabi_ddiv>
 800b2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b0:	f004 040f 	and.w	r4, r4, #15
 800b2b4:	2603      	movs	r6, #3
 800b2b6:	4da2      	ldr	r5, [pc, #648]	@ (800b540 <_dtoa_r+0x5c0>)
 800b2b8:	b954      	cbnz	r4, 800b2d0 <_dtoa_r+0x350>
 800b2ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c2:	f7f5 fae3 	bl	800088c <__aeabi_ddiv>
 800b2c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ca:	e028      	b.n	800b31e <_dtoa_r+0x39e>
 800b2cc:	2602      	movs	r6, #2
 800b2ce:	e7f2      	b.n	800b2b6 <_dtoa_r+0x336>
 800b2d0:	07e1      	lsls	r1, r4, #31
 800b2d2:	d508      	bpl.n	800b2e6 <_dtoa_r+0x366>
 800b2d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2dc:	f7f5 f9ac 	bl	8000638 <__aeabi_dmul>
 800b2e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2e4:	3601      	adds	r6, #1
 800b2e6:	1064      	asrs	r4, r4, #1
 800b2e8:	3508      	adds	r5, #8
 800b2ea:	e7e5      	b.n	800b2b8 <_dtoa_r+0x338>
 800b2ec:	f000 80d2 	beq.w	800b494 <_dtoa_r+0x514>
 800b2f0:	427c      	negs	r4, r7
 800b2f2:	4b92      	ldr	r3, [pc, #584]	@ (800b53c <_dtoa_r+0x5bc>)
 800b2f4:	4d92      	ldr	r5, [pc, #584]	@ (800b540 <_dtoa_r+0x5c0>)
 800b2f6:	f004 020f 	and.w	r2, r4, #15
 800b2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b306:	f7f5 f997 	bl	8000638 <__aeabi_dmul>
 800b30a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30e:	1124      	asrs	r4, r4, #4
 800b310:	2300      	movs	r3, #0
 800b312:	2602      	movs	r6, #2
 800b314:	2c00      	cmp	r4, #0
 800b316:	f040 80b2 	bne.w	800b47e <_dtoa_r+0x4fe>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1d3      	bne.n	800b2c6 <_dtoa_r+0x346>
 800b31e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b320:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80b7 	beq.w	800b498 <_dtoa_r+0x518>
 800b32a:	4b86      	ldr	r3, [pc, #536]	@ (800b544 <_dtoa_r+0x5c4>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f5 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	f000 80ae 	beq.w	800b498 <_dtoa_r+0x518>
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 80aa 	beq.w	800b498 <_dtoa_r+0x518>
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd37      	ble.n	800b3ba <_dtoa_r+0x43a>
 800b34a:	1e7b      	subs	r3, r7, #1
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	4620      	mov	r0, r4
 800b350:	4b7d      	ldr	r3, [pc, #500]	@ (800b548 <_dtoa_r+0x5c8>)
 800b352:	2200      	movs	r2, #0
 800b354:	4629      	mov	r1, r5
 800b356:	f7f5 f96f 	bl	8000638 <__aeabi_dmul>
 800b35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35e:	9c00      	ldr	r4, [sp, #0]
 800b360:	3601      	adds	r6, #1
 800b362:	4630      	mov	r0, r6
 800b364:	f7f5 f8fe 	bl	8000564 <__aeabi_i2d>
 800b368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b36c:	f7f5 f964 	bl	8000638 <__aeabi_dmul>
 800b370:	4b76      	ldr	r3, [pc, #472]	@ (800b54c <_dtoa_r+0x5cc>)
 800b372:	2200      	movs	r2, #0
 800b374:	f7f4 ffaa 	bl	80002cc <__adddf3>
 800b378:	4605      	mov	r5, r0
 800b37a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b37e:	2c00      	cmp	r4, #0
 800b380:	f040 808d 	bne.w	800b49e <_dtoa_r+0x51e>
 800b384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b388:	4b71      	ldr	r3, [pc, #452]	@ (800b550 <_dtoa_r+0x5d0>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	f7f4 ff9c 	bl	80002c8 <__aeabi_dsub>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b398:	462a      	mov	r2, r5
 800b39a:	4633      	mov	r3, r6
 800b39c:	f7f5 fbdc 	bl	8000b58 <__aeabi_dcmpgt>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f040 828b 	bne.w	800b8bc <_dtoa_r+0x93c>
 800b3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3b0:	f7f5 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f040 8128 	bne.w	800b60a <_dtoa_r+0x68a>
 800b3ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b3c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f2c0 815a 	blt.w	800b67e <_dtoa_r+0x6fe>
 800b3ca:	2f0e      	cmp	r7, #14
 800b3cc:	f300 8157 	bgt.w	800b67e <_dtoa_r+0x6fe>
 800b3d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b53c <_dtoa_r+0x5bc>)
 800b3d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3d6:	ed93 7b00 	vldr	d7, [r3]
 800b3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	ed8d 7b00 	vstr	d7, [sp]
 800b3e2:	da03      	bge.n	800b3ec <_dtoa_r+0x46c>
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f340 8101 	ble.w	800b5ee <_dtoa_r+0x66e>
 800b3ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3f0:	4656      	mov	r6, sl
 800b3f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f5 fa47 	bl	800088c <__aeabi_ddiv>
 800b3fe:	f7f5 fbcb 	bl	8000b98 <__aeabi_d2iz>
 800b402:	4680      	mov	r8, r0
 800b404:	f7f5 f8ae 	bl	8000564 <__aeabi_i2d>
 800b408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b41c:	f7f4 ff54 	bl	80002c8 <__aeabi_dsub>
 800b420:	f806 4b01 	strb.w	r4, [r6], #1
 800b424:	9d07      	ldr	r5, [sp, #28]
 800b426:	eba6 040a 	sub.w	r4, r6, sl
 800b42a:	42a5      	cmp	r5, r4
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	f040 8117 	bne.w	800b662 <_dtoa_r+0x6e2>
 800b434:	f7f4 ff4a 	bl	80002cc <__adddf3>
 800b438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b43c:	4604      	mov	r4, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	f7f5 fb8a 	bl	8000b58 <__aeabi_dcmpgt>
 800b444:	2800      	cmp	r0, #0
 800b446:	f040 80f9 	bne.w	800b63c <_dtoa_r+0x6bc>
 800b44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f7f5 fb59 	bl	8000b08 <__aeabi_dcmpeq>
 800b456:	b118      	cbz	r0, 800b460 <_dtoa_r+0x4e0>
 800b458:	f018 0f01 	tst.w	r8, #1
 800b45c:	f040 80ee 	bne.w	800b63c <_dtoa_r+0x6bc>
 800b460:	4649      	mov	r1, r9
 800b462:	4658      	mov	r0, fp
 800b464:	f000 fc90 	bl	800bd88 <_Bfree>
 800b468:	2300      	movs	r3, #0
 800b46a:	7033      	strb	r3, [r6, #0]
 800b46c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b46e:	3701      	adds	r7, #1
 800b470:	601f      	str	r7, [r3, #0]
 800b472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 831d 	beq.w	800bab4 <_dtoa_r+0xb34>
 800b47a:	601e      	str	r6, [r3, #0]
 800b47c:	e31a      	b.n	800bab4 <_dtoa_r+0xb34>
 800b47e:	07e2      	lsls	r2, r4, #31
 800b480:	d505      	bpl.n	800b48e <_dtoa_r+0x50e>
 800b482:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b486:	f7f5 f8d7 	bl	8000638 <__aeabi_dmul>
 800b48a:	3601      	adds	r6, #1
 800b48c:	2301      	movs	r3, #1
 800b48e:	1064      	asrs	r4, r4, #1
 800b490:	3508      	adds	r5, #8
 800b492:	e73f      	b.n	800b314 <_dtoa_r+0x394>
 800b494:	2602      	movs	r6, #2
 800b496:	e742      	b.n	800b31e <_dtoa_r+0x39e>
 800b498:	9c07      	ldr	r4, [sp, #28]
 800b49a:	9704      	str	r7, [sp, #16]
 800b49c:	e761      	b.n	800b362 <_dtoa_r+0x3e2>
 800b49e:	4b27      	ldr	r3, [pc, #156]	@ (800b53c <_dtoa_r+0x5bc>)
 800b4a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4aa:	4454      	add	r4, sl
 800b4ac:	2900      	cmp	r1, #0
 800b4ae:	d053      	beq.n	800b558 <_dtoa_r+0x5d8>
 800b4b0:	4928      	ldr	r1, [pc, #160]	@ (800b554 <_dtoa_r+0x5d4>)
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f7f5 f9ea 	bl	800088c <__aeabi_ddiv>
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	462a      	mov	r2, r5
 800b4bc:	f7f4 ff04 	bl	80002c8 <__aeabi_dsub>
 800b4c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4c4:	4656      	mov	r6, sl
 800b4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ca:	f7f5 fb65 	bl	8000b98 <__aeabi_d2iz>
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	f7f5 f848 	bl	8000564 <__aeabi_i2d>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4dc:	f7f4 fef4 	bl	80002c8 <__aeabi_dsub>
 800b4e0:	3530      	adds	r5, #48	@ 0x30
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4ea:	f806 5b01 	strb.w	r5, [r6], #1
 800b4ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4f2:	f7f5 fb13 	bl	8000b1c <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d171      	bne.n	800b5de <_dtoa_r+0x65e>
 800b4fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4fe:	4911      	ldr	r1, [pc, #68]	@ (800b544 <_dtoa_r+0x5c4>)
 800b500:	2000      	movs	r0, #0
 800b502:	f7f4 fee1 	bl	80002c8 <__aeabi_dsub>
 800b506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b50a:	f7f5 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f040 8095 	bne.w	800b63e <_dtoa_r+0x6be>
 800b514:	42a6      	cmp	r6, r4
 800b516:	f43f af50 	beq.w	800b3ba <_dtoa_r+0x43a>
 800b51a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b51e:	4b0a      	ldr	r3, [pc, #40]	@ (800b548 <_dtoa_r+0x5c8>)
 800b520:	2200      	movs	r2, #0
 800b522:	f7f5 f889 	bl	8000638 <__aeabi_dmul>
 800b526:	4b08      	ldr	r3, [pc, #32]	@ (800b548 <_dtoa_r+0x5c8>)
 800b528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b52c:	2200      	movs	r2, #0
 800b52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_dmul>
 800b536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b53a:	e7c4      	b.n	800b4c6 <_dtoa_r+0x546>
 800b53c:	08020f20 	.word	0x08020f20
 800b540:	08020ef8 	.word	0x08020ef8
 800b544:	3ff00000 	.word	0x3ff00000
 800b548:	40240000 	.word	0x40240000
 800b54c:	401c0000 	.word	0x401c0000
 800b550:	40140000 	.word	0x40140000
 800b554:	3fe00000 	.word	0x3fe00000
 800b558:	4631      	mov	r1, r6
 800b55a:	4628      	mov	r0, r5
 800b55c:	f7f5 f86c 	bl	8000638 <__aeabi_dmul>
 800b560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b564:	9415      	str	r4, [sp, #84]	@ 0x54
 800b566:	4656      	mov	r6, sl
 800b568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b56c:	f7f5 fb14 	bl	8000b98 <__aeabi_d2iz>
 800b570:	4605      	mov	r5, r0
 800b572:	f7f4 fff7 	bl	8000564 <__aeabi_i2d>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b57e:	f7f4 fea3 	bl	80002c8 <__aeabi_dsub>
 800b582:	3530      	adds	r5, #48	@ 0x30
 800b584:	f806 5b01 	strb.w	r5, [r6], #1
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	42a6      	cmp	r6, r4
 800b58e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	d124      	bne.n	800b5e2 <_dtoa_r+0x662>
 800b598:	4bac      	ldr	r3, [pc, #688]	@ (800b84c <_dtoa_r+0x8cc>)
 800b59a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b59e:	f7f4 fe95 	bl	80002cc <__adddf3>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5aa:	f7f5 fad5 	bl	8000b58 <__aeabi_dcmpgt>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d145      	bne.n	800b63e <_dtoa_r+0x6be>
 800b5b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5b6:	49a5      	ldr	r1, [pc, #660]	@ (800b84c <_dtoa_r+0x8cc>)
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f7f4 fe85 	bl	80002c8 <__aeabi_dsub>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c6:	f7f5 faa9 	bl	8000b1c <__aeabi_dcmplt>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	f43f aef5 	beq.w	800b3ba <_dtoa_r+0x43a>
 800b5d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5d2:	1e73      	subs	r3, r6, #1
 800b5d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5da:	2b30      	cmp	r3, #48	@ 0x30
 800b5dc:	d0f8      	beq.n	800b5d0 <_dtoa_r+0x650>
 800b5de:	9f04      	ldr	r7, [sp, #16]
 800b5e0:	e73e      	b.n	800b460 <_dtoa_r+0x4e0>
 800b5e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b850 <_dtoa_r+0x8d0>)
 800b5e4:	f7f5 f828 	bl	8000638 <__aeabi_dmul>
 800b5e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ec:	e7bc      	b.n	800b568 <_dtoa_r+0x5e8>
 800b5ee:	d10c      	bne.n	800b60a <_dtoa_r+0x68a>
 800b5f0:	4b98      	ldr	r3, [pc, #608]	@ (800b854 <_dtoa_r+0x8d4>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f8:	f7f5 f81e 	bl	8000638 <__aeabi_dmul>
 800b5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b600:	f7f5 faa0 	bl	8000b44 <__aeabi_dcmpge>
 800b604:	2800      	cmp	r0, #0
 800b606:	f000 8157 	beq.w	800b8b8 <_dtoa_r+0x938>
 800b60a:	2400      	movs	r4, #0
 800b60c:	4625      	mov	r5, r4
 800b60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b610:	43db      	mvns	r3, r3
 800b612:	9304      	str	r3, [sp, #16]
 800b614:	4656      	mov	r6, sl
 800b616:	2700      	movs	r7, #0
 800b618:	4621      	mov	r1, r4
 800b61a:	4658      	mov	r0, fp
 800b61c:	f000 fbb4 	bl	800bd88 <_Bfree>
 800b620:	2d00      	cmp	r5, #0
 800b622:	d0dc      	beq.n	800b5de <_dtoa_r+0x65e>
 800b624:	b12f      	cbz	r7, 800b632 <_dtoa_r+0x6b2>
 800b626:	42af      	cmp	r7, r5
 800b628:	d003      	beq.n	800b632 <_dtoa_r+0x6b2>
 800b62a:	4639      	mov	r1, r7
 800b62c:	4658      	mov	r0, fp
 800b62e:	f000 fbab 	bl	800bd88 <_Bfree>
 800b632:	4629      	mov	r1, r5
 800b634:	4658      	mov	r0, fp
 800b636:	f000 fba7 	bl	800bd88 <_Bfree>
 800b63a:	e7d0      	b.n	800b5de <_dtoa_r+0x65e>
 800b63c:	9704      	str	r7, [sp, #16]
 800b63e:	4633      	mov	r3, r6
 800b640:	461e      	mov	r6, r3
 800b642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b646:	2a39      	cmp	r2, #57	@ 0x39
 800b648:	d107      	bne.n	800b65a <_dtoa_r+0x6da>
 800b64a:	459a      	cmp	sl, r3
 800b64c:	d1f8      	bne.n	800b640 <_dtoa_r+0x6c0>
 800b64e:	9a04      	ldr	r2, [sp, #16]
 800b650:	3201      	adds	r2, #1
 800b652:	9204      	str	r2, [sp, #16]
 800b654:	2230      	movs	r2, #48	@ 0x30
 800b656:	f88a 2000 	strb.w	r2, [sl]
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	3201      	adds	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	e7bd      	b.n	800b5de <_dtoa_r+0x65e>
 800b662:	4b7b      	ldr	r3, [pc, #492]	@ (800b850 <_dtoa_r+0x8d0>)
 800b664:	2200      	movs	r2, #0
 800b666:	f7f4 ffe7 	bl	8000638 <__aeabi_dmul>
 800b66a:	2200      	movs	r2, #0
 800b66c:	2300      	movs	r3, #0
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	f7f5 fa49 	bl	8000b08 <__aeabi_dcmpeq>
 800b676:	2800      	cmp	r0, #0
 800b678:	f43f aebb 	beq.w	800b3f2 <_dtoa_r+0x472>
 800b67c:	e6f0      	b.n	800b460 <_dtoa_r+0x4e0>
 800b67e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b680:	2a00      	cmp	r2, #0
 800b682:	f000 80db 	beq.w	800b83c <_dtoa_r+0x8bc>
 800b686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b688:	2a01      	cmp	r2, #1
 800b68a:	f300 80bf 	bgt.w	800b80c <_dtoa_r+0x88c>
 800b68e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b690:	2a00      	cmp	r2, #0
 800b692:	f000 80b7 	beq.w	800b804 <_dtoa_r+0x884>
 800b696:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b69a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b69c:	4646      	mov	r6, r8
 800b69e:	9a08      	ldr	r2, [sp, #32]
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	441a      	add	r2, r3
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	4498      	add	r8, r3
 800b6a8:	9208      	str	r2, [sp, #32]
 800b6aa:	f000 fc21 	bl	800bef0 <__i2b>
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	b15e      	cbz	r6, 800b6ca <_dtoa_r+0x74a>
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dd08      	ble.n	800b6ca <_dtoa_r+0x74a>
 800b6b8:	42b3      	cmp	r3, r6
 800b6ba:	9a08      	ldr	r2, [sp, #32]
 800b6bc:	bfa8      	it	ge
 800b6be:	4633      	movge	r3, r6
 800b6c0:	eba8 0803 	sub.w	r8, r8, r3
 800b6c4:	1af6      	subs	r6, r6, r3
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	9308      	str	r3, [sp, #32]
 800b6ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6cc:	b1f3      	cbz	r3, 800b70c <_dtoa_r+0x78c>
 800b6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 80b7 	beq.w	800b844 <_dtoa_r+0x8c4>
 800b6d6:	b18c      	cbz	r4, 800b6fc <_dtoa_r+0x77c>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4658      	mov	r0, fp
 800b6de:	f000 fcc7 	bl	800c070 <__pow5mult>
 800b6e2:	464a      	mov	r2, r9
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	4658      	mov	r0, fp
 800b6ea:	f000 fc17 	bl	800bf1c <__multiply>
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	9004      	str	r0, [sp, #16]
 800b6f2:	4658      	mov	r0, fp
 800b6f4:	f000 fb48 	bl	800bd88 <_Bfree>
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	4699      	mov	r9, r3
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6fe:	1b1a      	subs	r2, r3, r4
 800b700:	d004      	beq.n	800b70c <_dtoa_r+0x78c>
 800b702:	4649      	mov	r1, r9
 800b704:	4658      	mov	r0, fp
 800b706:	f000 fcb3 	bl	800c070 <__pow5mult>
 800b70a:	4681      	mov	r9, r0
 800b70c:	2101      	movs	r1, #1
 800b70e:	4658      	mov	r0, fp
 800b710:	f000 fbee 	bl	800bef0 <__i2b>
 800b714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b716:	4604      	mov	r4, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 81cf 	beq.w	800babc <_dtoa_r+0xb3c>
 800b71e:	461a      	mov	r2, r3
 800b720:	4601      	mov	r1, r0
 800b722:	4658      	mov	r0, fp
 800b724:	f000 fca4 	bl	800c070 <__pow5mult>
 800b728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	4604      	mov	r4, r0
 800b72e:	f300 8095 	bgt.w	800b85c <_dtoa_r+0x8dc>
 800b732:	9b02      	ldr	r3, [sp, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	f040 8087 	bne.w	800b848 <_dtoa_r+0x8c8>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 8089 	bne.w	800b858 <_dtoa_r+0x8d8>
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b74c:	0d1b      	lsrs	r3, r3, #20
 800b74e:	051b      	lsls	r3, r3, #20
 800b750:	b12b      	cbz	r3, 800b75e <_dtoa_r+0x7de>
 800b752:	9b08      	ldr	r3, [sp, #32]
 800b754:	3301      	adds	r3, #1
 800b756:	9308      	str	r3, [sp, #32]
 800b758:	f108 0801 	add.w	r8, r8, #1
 800b75c:	2301      	movs	r3, #1
 800b75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 81b0 	beq.w	800bac8 <_dtoa_r+0xb48>
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b76e:	6918      	ldr	r0, [r3, #16]
 800b770:	f000 fb72 	bl	800be58 <__hi0bits>
 800b774:	f1c0 0020 	rsb	r0, r0, #32
 800b778:	9b08      	ldr	r3, [sp, #32]
 800b77a:	4418      	add	r0, r3
 800b77c:	f010 001f 	ands.w	r0, r0, #31
 800b780:	d077      	beq.n	800b872 <_dtoa_r+0x8f2>
 800b782:	f1c0 0320 	rsb	r3, r0, #32
 800b786:	2b04      	cmp	r3, #4
 800b788:	dd6b      	ble.n	800b862 <_dtoa_r+0x8e2>
 800b78a:	9b08      	ldr	r3, [sp, #32]
 800b78c:	f1c0 001c 	rsb	r0, r0, #28
 800b790:	4403      	add	r3, r0
 800b792:	4480      	add	r8, r0
 800b794:	4406      	add	r6, r0
 800b796:	9308      	str	r3, [sp, #32]
 800b798:	f1b8 0f00 	cmp.w	r8, #0
 800b79c:	dd05      	ble.n	800b7aa <_dtoa_r+0x82a>
 800b79e:	4649      	mov	r1, r9
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	4658      	mov	r0, fp
 800b7a4:	f000 fcbe 	bl	800c124 <__lshift>
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	9b08      	ldr	r3, [sp, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd05      	ble.n	800b7bc <_dtoa_r+0x83c>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4658      	mov	r0, fp
 800b7b6:	f000 fcb5 	bl	800c124 <__lshift>
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d059      	beq.n	800b876 <_dtoa_r+0x8f6>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4648      	mov	r0, r9
 800b7c6:	f000 fd19 	bl	800c1fc <__mcmp>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	da53      	bge.n	800b876 <_dtoa_r+0x8f6>
 800b7ce:	1e7b      	subs	r3, r7, #1
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	220a      	movs	r2, #10
 800b7d8:	4658      	mov	r0, fp
 800b7da:	f000 faf7 	bl	800bdcc <__multadd>
 800b7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7e0:	4681      	mov	r9, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 8172 	beq.w	800bacc <_dtoa_r+0xb4c>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	220a      	movs	r2, #10
 800b7ee:	4658      	mov	r0, fp
 800b7f0:	f000 faec 	bl	800bdcc <__multadd>
 800b7f4:	9b00      	ldr	r3, [sp, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	dc67      	bgt.n	800b8cc <_dtoa_r+0x94c>
 800b7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	dc41      	bgt.n	800b886 <_dtoa_r+0x906>
 800b802:	e063      	b.n	800b8cc <_dtoa_r+0x94c>
 800b804:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b80a:	e746      	b.n	800b69a <_dtoa_r+0x71a>
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	1e5c      	subs	r4, r3, #1
 800b810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b812:	42a3      	cmp	r3, r4
 800b814:	bfbf      	itttt	lt
 800b816:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b818:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b81a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b81c:	1ae3      	sublt	r3, r4, r3
 800b81e:	bfb4      	ite	lt
 800b820:	18d2      	addlt	r2, r2, r3
 800b822:	1b1c      	subge	r4, r3, r4
 800b824:	9b07      	ldr	r3, [sp, #28]
 800b826:	bfbc      	itt	lt
 800b828:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b82a:	2400      	movlt	r4, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfb5      	itete	lt
 800b830:	eba8 0603 	sublt.w	r6, r8, r3
 800b834:	9b07      	ldrge	r3, [sp, #28]
 800b836:	2300      	movlt	r3, #0
 800b838:	4646      	movge	r6, r8
 800b83a:	e730      	b.n	800b69e <_dtoa_r+0x71e>
 800b83c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b83e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b840:	4646      	mov	r6, r8
 800b842:	e735      	b.n	800b6b0 <_dtoa_r+0x730>
 800b844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b846:	e75c      	b.n	800b702 <_dtoa_r+0x782>
 800b848:	2300      	movs	r3, #0
 800b84a:	e788      	b.n	800b75e <_dtoa_r+0x7de>
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	40240000 	.word	0x40240000
 800b854:	40140000 	.word	0x40140000
 800b858:	9b02      	ldr	r3, [sp, #8]
 800b85a:	e780      	b.n	800b75e <_dtoa_r+0x7de>
 800b85c:	2300      	movs	r3, #0
 800b85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b860:	e782      	b.n	800b768 <_dtoa_r+0x7e8>
 800b862:	d099      	beq.n	800b798 <_dtoa_r+0x818>
 800b864:	9a08      	ldr	r2, [sp, #32]
 800b866:	331c      	adds	r3, #28
 800b868:	441a      	add	r2, r3
 800b86a:	4498      	add	r8, r3
 800b86c:	441e      	add	r6, r3
 800b86e:	9208      	str	r2, [sp, #32]
 800b870:	e792      	b.n	800b798 <_dtoa_r+0x818>
 800b872:	4603      	mov	r3, r0
 800b874:	e7f6      	b.n	800b864 <_dtoa_r+0x8e4>
 800b876:	9b07      	ldr	r3, [sp, #28]
 800b878:	9704      	str	r7, [sp, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dc20      	bgt.n	800b8c0 <_dtoa_r+0x940>
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b882:	2b02      	cmp	r3, #2
 800b884:	dd1e      	ble.n	800b8c4 <_dtoa_r+0x944>
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f47f aec0 	bne.w	800b60e <_dtoa_r+0x68e>
 800b88e:	4621      	mov	r1, r4
 800b890:	2205      	movs	r2, #5
 800b892:	4658      	mov	r0, fp
 800b894:	f000 fa9a 	bl	800bdcc <__multadd>
 800b898:	4601      	mov	r1, r0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4648      	mov	r0, r9
 800b89e:	f000 fcad 	bl	800c1fc <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f77f aeb3 	ble.w	800b60e <_dtoa_r+0x68e>
 800b8a8:	4656      	mov	r6, sl
 800b8aa:	2331      	movs	r3, #49	@ 0x31
 800b8ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b8b0:	9b04      	ldr	r3, [sp, #16]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	e6ae      	b.n	800b616 <_dtoa_r+0x696>
 800b8b8:	9c07      	ldr	r4, [sp, #28]
 800b8ba:	9704      	str	r7, [sp, #16]
 800b8bc:	4625      	mov	r5, r4
 800b8be:	e7f3      	b.n	800b8a8 <_dtoa_r+0x928>
 800b8c0:	9b07      	ldr	r3, [sp, #28]
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 8104 	beq.w	800bad4 <_dtoa_r+0xb54>
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	dd05      	ble.n	800b8dc <_dtoa_r+0x95c>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	4658      	mov	r0, fp
 800b8d6:	f000 fc25 	bl	800c124 <__lshift>
 800b8da:	4605      	mov	r5, r0
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d05a      	beq.n	800b998 <_dtoa_r+0xa18>
 800b8e2:	6869      	ldr	r1, [r5, #4]
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 fa0f 	bl	800bd08 <_Balloc>
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	b928      	cbnz	r0, 800b8fa <_dtoa_r+0x97a>
 800b8ee:	4b84      	ldr	r3, [pc, #528]	@ (800bb00 <_dtoa_r+0xb80>)
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8f6:	f7ff bb5a 	b.w	800afae <_dtoa_r+0x2e>
 800b8fa:	692a      	ldr	r2, [r5, #16]
 800b8fc:	3202      	adds	r2, #2
 800b8fe:	0092      	lsls	r2, r2, #2
 800b900:	f105 010c 	add.w	r1, r5, #12
 800b904:	300c      	adds	r0, #12
 800b906:	f000 ffaf 	bl	800c868 <memcpy>
 800b90a:	2201      	movs	r2, #1
 800b90c:	4631      	mov	r1, r6
 800b90e:	4658      	mov	r0, fp
 800b910:	f000 fc08 	bl	800c124 <__lshift>
 800b914:	f10a 0301 	add.w	r3, sl, #1
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	9b00      	ldr	r3, [sp, #0]
 800b91c:	4453      	add	r3, sl
 800b91e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b920:	9b02      	ldr	r3, [sp, #8]
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	462f      	mov	r7, r5
 800b928:	930a      	str	r3, [sp, #40]	@ 0x28
 800b92a:	4605      	mov	r5, r0
 800b92c:	9b07      	ldr	r3, [sp, #28]
 800b92e:	4621      	mov	r1, r4
 800b930:	3b01      	subs	r3, #1
 800b932:	4648      	mov	r0, r9
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f7ff fa98 	bl	800ae6a <quorem>
 800b93a:	4639      	mov	r1, r7
 800b93c:	9002      	str	r0, [sp, #8]
 800b93e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b942:	4648      	mov	r0, r9
 800b944:	f000 fc5a 	bl	800c1fc <__mcmp>
 800b948:	462a      	mov	r2, r5
 800b94a:	9008      	str	r0, [sp, #32]
 800b94c:	4621      	mov	r1, r4
 800b94e:	4658      	mov	r0, fp
 800b950:	f000 fc70 	bl	800c234 <__mdiff>
 800b954:	68c2      	ldr	r2, [r0, #12]
 800b956:	4606      	mov	r6, r0
 800b958:	bb02      	cbnz	r2, 800b99c <_dtoa_r+0xa1c>
 800b95a:	4601      	mov	r1, r0
 800b95c:	4648      	mov	r0, r9
 800b95e:	f000 fc4d 	bl	800c1fc <__mcmp>
 800b962:	4602      	mov	r2, r0
 800b964:	4631      	mov	r1, r6
 800b966:	4658      	mov	r0, fp
 800b968:	920e      	str	r2, [sp, #56]	@ 0x38
 800b96a:	f000 fa0d 	bl	800bd88 <_Bfree>
 800b96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b972:	9e07      	ldr	r6, [sp, #28]
 800b974:	ea43 0102 	orr.w	r1, r3, r2
 800b978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97a:	4319      	orrs	r1, r3
 800b97c:	d110      	bne.n	800b9a0 <_dtoa_r+0xa20>
 800b97e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b982:	d029      	beq.n	800b9d8 <_dtoa_r+0xa58>
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd02      	ble.n	800b990 <_dtoa_r+0xa10>
 800b98a:	9b02      	ldr	r3, [sp, #8]
 800b98c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b990:	9b00      	ldr	r3, [sp, #0]
 800b992:	f883 8000 	strb.w	r8, [r3]
 800b996:	e63f      	b.n	800b618 <_dtoa_r+0x698>
 800b998:	4628      	mov	r0, r5
 800b99a:	e7bb      	b.n	800b914 <_dtoa_r+0x994>
 800b99c:	2201      	movs	r2, #1
 800b99e:	e7e1      	b.n	800b964 <_dtoa_r+0x9e4>
 800b9a0:	9b08      	ldr	r3, [sp, #32]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	db04      	blt.n	800b9b0 <_dtoa_r+0xa30>
 800b9a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	d120      	bne.n	800b9f2 <_dtoa_r+0xa72>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	dded      	ble.n	800b990 <_dtoa_r+0xa10>
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4658      	mov	r0, fp
 800b9ba:	f000 fbb3 	bl	800c124 <__lshift>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4681      	mov	r9, r0
 800b9c2:	f000 fc1b 	bl	800c1fc <__mcmp>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	dc03      	bgt.n	800b9d2 <_dtoa_r+0xa52>
 800b9ca:	d1e1      	bne.n	800b990 <_dtoa_r+0xa10>
 800b9cc:	f018 0f01 	tst.w	r8, #1
 800b9d0:	d0de      	beq.n	800b990 <_dtoa_r+0xa10>
 800b9d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9d6:	d1d8      	bne.n	800b98a <_dtoa_r+0xa0a>
 800b9d8:	9a00      	ldr	r2, [sp, #0]
 800b9da:	2339      	movs	r3, #57	@ 0x39
 800b9dc:	7013      	strb	r3, [r2, #0]
 800b9de:	4633      	mov	r3, r6
 800b9e0:	461e      	mov	r6, r3
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9e8:	2a39      	cmp	r2, #57	@ 0x39
 800b9ea:	d052      	beq.n	800ba92 <_dtoa_r+0xb12>
 800b9ec:	3201      	adds	r2, #1
 800b9ee:	701a      	strb	r2, [r3, #0]
 800b9f0:	e612      	b.n	800b618 <_dtoa_r+0x698>
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	dd07      	ble.n	800ba06 <_dtoa_r+0xa86>
 800b9f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9fa:	d0ed      	beq.n	800b9d8 <_dtoa_r+0xa58>
 800b9fc:	9a00      	ldr	r2, [sp, #0]
 800b9fe:	f108 0301 	add.w	r3, r8, #1
 800ba02:	7013      	strb	r3, [r2, #0]
 800ba04:	e608      	b.n	800b618 <_dtoa_r+0x698>
 800ba06:	9b07      	ldr	r3, [sp, #28]
 800ba08:	9a07      	ldr	r2, [sp, #28]
 800ba0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d028      	beq.n	800ba66 <_dtoa_r+0xae6>
 800ba14:	4649      	mov	r1, r9
 800ba16:	2300      	movs	r3, #0
 800ba18:	220a      	movs	r2, #10
 800ba1a:	4658      	mov	r0, fp
 800ba1c:	f000 f9d6 	bl	800bdcc <__multadd>
 800ba20:	42af      	cmp	r7, r5
 800ba22:	4681      	mov	r9, r0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	f04f 020a 	mov.w	r2, #10
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	4658      	mov	r0, fp
 800ba30:	d107      	bne.n	800ba42 <_dtoa_r+0xac2>
 800ba32:	f000 f9cb 	bl	800bdcc <__multadd>
 800ba36:	4607      	mov	r7, r0
 800ba38:	4605      	mov	r5, r0
 800ba3a:	9b07      	ldr	r3, [sp, #28]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	e774      	b.n	800b92c <_dtoa_r+0x9ac>
 800ba42:	f000 f9c3 	bl	800bdcc <__multadd>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4607      	mov	r7, r0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f000 f9bc 	bl	800bdcc <__multadd>
 800ba54:	4605      	mov	r5, r0
 800ba56:	e7f0      	b.n	800ba3a <_dtoa_r+0xaba>
 800ba58:	9b00      	ldr	r3, [sp, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfcc      	ite	gt
 800ba5e:	461e      	movgt	r6, r3
 800ba60:	2601      	movle	r6, #1
 800ba62:	4456      	add	r6, sl
 800ba64:	2700      	movs	r7, #0
 800ba66:	4649      	mov	r1, r9
 800ba68:	2201      	movs	r2, #1
 800ba6a:	4658      	mov	r0, fp
 800ba6c:	f000 fb5a 	bl	800c124 <__lshift>
 800ba70:	4621      	mov	r1, r4
 800ba72:	4681      	mov	r9, r0
 800ba74:	f000 fbc2 	bl	800c1fc <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	dcb0      	bgt.n	800b9de <_dtoa_r+0xa5e>
 800ba7c:	d102      	bne.n	800ba84 <_dtoa_r+0xb04>
 800ba7e:	f018 0f01 	tst.w	r8, #1
 800ba82:	d1ac      	bne.n	800b9de <_dtoa_r+0xa5e>
 800ba84:	4633      	mov	r3, r6
 800ba86:	461e      	mov	r6, r3
 800ba88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba8c:	2a30      	cmp	r2, #48	@ 0x30
 800ba8e:	d0fa      	beq.n	800ba86 <_dtoa_r+0xb06>
 800ba90:	e5c2      	b.n	800b618 <_dtoa_r+0x698>
 800ba92:	459a      	cmp	sl, r3
 800ba94:	d1a4      	bne.n	800b9e0 <_dtoa_r+0xa60>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	2331      	movs	r3, #49	@ 0x31
 800ba9e:	f88a 3000 	strb.w	r3, [sl]
 800baa2:	e5b9      	b.n	800b618 <_dtoa_r+0x698>
 800baa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb04 <_dtoa_r+0xb84>
 800baaa:	b11b      	cbz	r3, 800bab4 <_dtoa_r+0xb34>
 800baac:	f10a 0308 	add.w	r3, sl, #8
 800bab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	4650      	mov	r0, sl
 800bab6:	b019      	add	sp, #100	@ 0x64
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babe:	2b01      	cmp	r3, #1
 800bac0:	f77f ae37 	ble.w	800b732 <_dtoa_r+0x7b2>
 800bac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac8:	2001      	movs	r0, #1
 800baca:	e655      	b.n	800b778 <_dtoa_r+0x7f8>
 800bacc:	9b00      	ldr	r3, [sp, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f77f aed6 	ble.w	800b880 <_dtoa_r+0x900>
 800bad4:	4656      	mov	r6, sl
 800bad6:	4621      	mov	r1, r4
 800bad8:	4648      	mov	r0, r9
 800bada:	f7ff f9c6 	bl	800ae6a <quorem>
 800bade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bae2:	f806 8b01 	strb.w	r8, [r6], #1
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	eba6 020a 	sub.w	r2, r6, sl
 800baec:	4293      	cmp	r3, r2
 800baee:	ddb3      	ble.n	800ba58 <_dtoa_r+0xad8>
 800baf0:	4649      	mov	r1, r9
 800baf2:	2300      	movs	r3, #0
 800baf4:	220a      	movs	r2, #10
 800baf6:	4658      	mov	r0, fp
 800baf8:	f000 f968 	bl	800bdcc <__multadd>
 800bafc:	4681      	mov	r9, r0
 800bafe:	e7ea      	b.n	800bad6 <_dtoa_r+0xb56>
 800bb00:	08020e7c 	.word	0x08020e7c
 800bb04:	08020e00 	.word	0x08020e00

0800bb08 <_free_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	2900      	cmp	r1, #0
 800bb0e:	d041      	beq.n	800bb94 <_free_r+0x8c>
 800bb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb14:	1f0c      	subs	r4, r1, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfb8      	it	lt
 800bb1a:	18e4      	addlt	r4, r4, r3
 800bb1c:	f000 f8e8 	bl	800bcf0 <__malloc_lock>
 800bb20:	4a1d      	ldr	r2, [pc, #116]	@ (800bb98 <_free_r+0x90>)
 800bb22:	6813      	ldr	r3, [r2, #0]
 800bb24:	b933      	cbnz	r3, 800bb34 <_free_r+0x2c>
 800bb26:	6063      	str	r3, [r4, #4]
 800bb28:	6014      	str	r4, [r2, #0]
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb30:	f000 b8e4 	b.w	800bcfc <__malloc_unlock>
 800bb34:	42a3      	cmp	r3, r4
 800bb36:	d908      	bls.n	800bb4a <_free_r+0x42>
 800bb38:	6820      	ldr	r0, [r4, #0]
 800bb3a:	1821      	adds	r1, r4, r0
 800bb3c:	428b      	cmp	r3, r1
 800bb3e:	bf01      	itttt	eq
 800bb40:	6819      	ldreq	r1, [r3, #0]
 800bb42:	685b      	ldreq	r3, [r3, #4]
 800bb44:	1809      	addeq	r1, r1, r0
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	e7ed      	b.n	800bb26 <_free_r+0x1e>
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	b10b      	cbz	r3, 800bb54 <_free_r+0x4c>
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	d9fa      	bls.n	800bb4a <_free_r+0x42>
 800bb54:	6811      	ldr	r1, [r2, #0]
 800bb56:	1850      	adds	r0, r2, r1
 800bb58:	42a0      	cmp	r0, r4
 800bb5a:	d10b      	bne.n	800bb74 <_free_r+0x6c>
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	4401      	add	r1, r0
 800bb60:	1850      	adds	r0, r2, r1
 800bb62:	4283      	cmp	r3, r0
 800bb64:	6011      	str	r1, [r2, #0]
 800bb66:	d1e0      	bne.n	800bb2a <_free_r+0x22>
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	6053      	str	r3, [r2, #4]
 800bb6e:	4408      	add	r0, r1
 800bb70:	6010      	str	r0, [r2, #0]
 800bb72:	e7da      	b.n	800bb2a <_free_r+0x22>
 800bb74:	d902      	bls.n	800bb7c <_free_r+0x74>
 800bb76:	230c      	movs	r3, #12
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	e7d6      	b.n	800bb2a <_free_r+0x22>
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	1821      	adds	r1, r4, r0
 800bb80:	428b      	cmp	r3, r1
 800bb82:	bf04      	itt	eq
 800bb84:	6819      	ldreq	r1, [r3, #0]
 800bb86:	685b      	ldreq	r3, [r3, #4]
 800bb88:	6063      	str	r3, [r4, #4]
 800bb8a:	bf04      	itt	eq
 800bb8c:	1809      	addeq	r1, r1, r0
 800bb8e:	6021      	streq	r1, [r4, #0]
 800bb90:	6054      	str	r4, [r2, #4]
 800bb92:	e7ca      	b.n	800bb2a <_free_r+0x22>
 800bb94:	bd38      	pop	{r3, r4, r5, pc}
 800bb96:	bf00      	nop
 800bb98:	20018e74 	.word	0x20018e74

0800bb9c <malloc>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	@ (800bba8 <malloc+0xc>)
 800bb9e:	4601      	mov	r1, r0
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	f000 b825 	b.w	800bbf0 <_malloc_r>
 800bba6:	bf00      	nop
 800bba8:	20000018 	.word	0x20000018

0800bbac <sbrk_aligned>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	4e0f      	ldr	r6, [pc, #60]	@ (800bbec <sbrk_aligned+0x40>)
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	6831      	ldr	r1, [r6, #0]
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	b911      	cbnz	r1, 800bbbe <sbrk_aligned+0x12>
 800bbb8:	f000 fe46 	bl	800c848 <_sbrk_r>
 800bbbc:	6030      	str	r0, [r6, #0]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f000 fe41 	bl	800c848 <_sbrk_r>
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	d103      	bne.n	800bbd2 <sbrk_aligned+0x26>
 800bbca:	f04f 34ff 	mov.w	r4, #4294967295
 800bbce:	4620      	mov	r0, r4
 800bbd0:	bd70      	pop	{r4, r5, r6, pc}
 800bbd2:	1cc4      	adds	r4, r0, #3
 800bbd4:	f024 0403 	bic.w	r4, r4, #3
 800bbd8:	42a0      	cmp	r0, r4
 800bbda:	d0f8      	beq.n	800bbce <sbrk_aligned+0x22>
 800bbdc:	1a21      	subs	r1, r4, r0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 fe32 	bl	800c848 <_sbrk_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d1f2      	bne.n	800bbce <sbrk_aligned+0x22>
 800bbe8:	e7ef      	b.n	800bbca <sbrk_aligned+0x1e>
 800bbea:	bf00      	nop
 800bbec:	20018e70 	.word	0x20018e70

0800bbf0 <_malloc_r>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	1ccd      	adds	r5, r1, #3
 800bbf6:	f025 0503 	bic.w	r5, r5, #3
 800bbfa:	3508      	adds	r5, #8
 800bbfc:	2d0c      	cmp	r5, #12
 800bbfe:	bf38      	it	cc
 800bc00:	250c      	movcc	r5, #12
 800bc02:	2d00      	cmp	r5, #0
 800bc04:	4606      	mov	r6, r0
 800bc06:	db01      	blt.n	800bc0c <_malloc_r+0x1c>
 800bc08:	42a9      	cmp	r1, r5
 800bc0a:	d904      	bls.n	800bc16 <_malloc_r+0x26>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	6033      	str	r3, [r6, #0]
 800bc10:	2000      	movs	r0, #0
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcec <_malloc_r+0xfc>
 800bc1a:	f000 f869 	bl	800bcf0 <__malloc_lock>
 800bc1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc22:	461c      	mov	r4, r3
 800bc24:	bb44      	cbnz	r4, 800bc78 <_malloc_r+0x88>
 800bc26:	4629      	mov	r1, r5
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7ff ffbf 	bl	800bbac <sbrk_aligned>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	4604      	mov	r4, r0
 800bc32:	d158      	bne.n	800bce6 <_malloc_r+0xf6>
 800bc34:	f8d8 4000 	ldr.w	r4, [r8]
 800bc38:	4627      	mov	r7, r4
 800bc3a:	2f00      	cmp	r7, #0
 800bc3c:	d143      	bne.n	800bcc6 <_malloc_r+0xd6>
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	d04b      	beq.n	800bcda <_malloc_r+0xea>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	4639      	mov	r1, r7
 800bc46:	4630      	mov	r0, r6
 800bc48:	eb04 0903 	add.w	r9, r4, r3
 800bc4c:	f000 fdfc 	bl	800c848 <_sbrk_r>
 800bc50:	4581      	cmp	r9, r0
 800bc52:	d142      	bne.n	800bcda <_malloc_r+0xea>
 800bc54:	6821      	ldr	r1, [r4, #0]
 800bc56:	1a6d      	subs	r5, r5, r1
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ffa6 	bl	800bbac <sbrk_aligned>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d03a      	beq.n	800bcda <_malloc_r+0xea>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	442b      	add	r3, r5
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	bb62      	cbnz	r2, 800bccc <_malloc_r+0xdc>
 800bc72:	f8c8 7000 	str.w	r7, [r8]
 800bc76:	e00f      	b.n	800bc98 <_malloc_r+0xa8>
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	1b52      	subs	r2, r2, r5
 800bc7c:	d420      	bmi.n	800bcc0 <_malloc_r+0xd0>
 800bc7e:	2a0b      	cmp	r2, #11
 800bc80:	d917      	bls.n	800bcb2 <_malloc_r+0xc2>
 800bc82:	1961      	adds	r1, r4, r5
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	6025      	str	r5, [r4, #0]
 800bc88:	bf18      	it	ne
 800bc8a:	6059      	strne	r1, [r3, #4]
 800bc8c:	6863      	ldr	r3, [r4, #4]
 800bc8e:	bf08      	it	eq
 800bc90:	f8c8 1000 	streq.w	r1, [r8]
 800bc94:	5162      	str	r2, [r4, r5]
 800bc96:	604b      	str	r3, [r1, #4]
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f000 f82f 	bl	800bcfc <__malloc_unlock>
 800bc9e:	f104 000b 	add.w	r0, r4, #11
 800bca2:	1d23      	adds	r3, r4, #4
 800bca4:	f020 0007 	bic.w	r0, r0, #7
 800bca8:	1ac2      	subs	r2, r0, r3
 800bcaa:	bf1c      	itt	ne
 800bcac:	1a1b      	subne	r3, r3, r0
 800bcae:	50a3      	strne	r3, [r4, r2]
 800bcb0:	e7af      	b.n	800bc12 <_malloc_r+0x22>
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	42a3      	cmp	r3, r4
 800bcb6:	bf0c      	ite	eq
 800bcb8:	f8c8 2000 	streq.w	r2, [r8]
 800bcbc:	605a      	strne	r2, [r3, #4]
 800bcbe:	e7eb      	b.n	800bc98 <_malloc_r+0xa8>
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	6864      	ldr	r4, [r4, #4]
 800bcc4:	e7ae      	b.n	800bc24 <_malloc_r+0x34>
 800bcc6:	463c      	mov	r4, r7
 800bcc8:	687f      	ldr	r7, [r7, #4]
 800bcca:	e7b6      	b.n	800bc3a <_malloc_r+0x4a>
 800bccc:	461a      	mov	r2, r3
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	42a3      	cmp	r3, r4
 800bcd2:	d1fb      	bne.n	800bccc <_malloc_r+0xdc>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6053      	str	r3, [r2, #4]
 800bcd8:	e7de      	b.n	800bc98 <_malloc_r+0xa8>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	4630      	mov	r0, r6
 800bce0:	f000 f80c 	bl	800bcfc <__malloc_unlock>
 800bce4:	e794      	b.n	800bc10 <_malloc_r+0x20>
 800bce6:	6005      	str	r5, [r0, #0]
 800bce8:	e7d6      	b.n	800bc98 <_malloc_r+0xa8>
 800bcea:	bf00      	nop
 800bcec:	20018e74 	.word	0x20018e74

0800bcf0 <__malloc_lock>:
 800bcf0:	4801      	ldr	r0, [pc, #4]	@ (800bcf8 <__malloc_lock+0x8>)
 800bcf2:	f7ff b8b8 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800bcf6:	bf00      	nop
 800bcf8:	20018e6c 	.word	0x20018e6c

0800bcfc <__malloc_unlock>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	@ (800bd04 <__malloc_unlock+0x8>)
 800bcfe:	f7ff b8b3 	b.w	800ae68 <__retarget_lock_release_recursive>
 800bd02:	bf00      	nop
 800bd04:	20018e6c 	.word	0x20018e6c

0800bd08 <_Balloc>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	69c6      	ldr	r6, [r0, #28]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	b976      	cbnz	r6, 800bd30 <_Balloc+0x28>
 800bd12:	2010      	movs	r0, #16
 800bd14:	f7ff ff42 	bl	800bb9c <malloc>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	61e0      	str	r0, [r4, #28]
 800bd1c:	b920      	cbnz	r0, 800bd28 <_Balloc+0x20>
 800bd1e:	4b18      	ldr	r3, [pc, #96]	@ (800bd80 <_Balloc+0x78>)
 800bd20:	4818      	ldr	r0, [pc, #96]	@ (800bd84 <_Balloc+0x7c>)
 800bd22:	216b      	movs	r1, #107	@ 0x6b
 800bd24:	f000 fdae 	bl	800c884 <__assert_func>
 800bd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd2c:	6006      	str	r6, [r0, #0]
 800bd2e:	60c6      	str	r6, [r0, #12]
 800bd30:	69e6      	ldr	r6, [r4, #28]
 800bd32:	68f3      	ldr	r3, [r6, #12]
 800bd34:	b183      	cbz	r3, 800bd58 <_Balloc+0x50>
 800bd36:	69e3      	ldr	r3, [r4, #28]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd3e:	b9b8      	cbnz	r0, 800bd70 <_Balloc+0x68>
 800bd40:	2101      	movs	r1, #1
 800bd42:	fa01 f605 	lsl.w	r6, r1, r5
 800bd46:	1d72      	adds	r2, r6, #5
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fdb8 	bl	800c8c0 <_calloc_r>
 800bd50:	b160      	cbz	r0, 800bd6c <_Balloc+0x64>
 800bd52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd56:	e00e      	b.n	800bd76 <_Balloc+0x6e>
 800bd58:	2221      	movs	r2, #33	@ 0x21
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fdaf 	bl	800c8c0 <_calloc_r>
 800bd62:	69e3      	ldr	r3, [r4, #28]
 800bd64:	60f0      	str	r0, [r6, #12]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e4      	bne.n	800bd36 <_Balloc+0x2e>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	6802      	ldr	r2, [r0, #0]
 800bd72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd76:	2300      	movs	r3, #0
 800bd78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd7c:	e7f7      	b.n	800bd6e <_Balloc+0x66>
 800bd7e:	bf00      	nop
 800bd80:	08020e0d 	.word	0x08020e0d
 800bd84:	08020e8d 	.word	0x08020e8d

0800bd88 <_Bfree>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	69c6      	ldr	r6, [r0, #28]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b976      	cbnz	r6, 800bdb0 <_Bfree+0x28>
 800bd92:	2010      	movs	r0, #16
 800bd94:	f7ff ff02 	bl	800bb9c <malloc>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	61e8      	str	r0, [r5, #28]
 800bd9c:	b920      	cbnz	r0, 800bda8 <_Bfree+0x20>
 800bd9e:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <_Bfree+0x3c>)
 800bda0:	4809      	ldr	r0, [pc, #36]	@ (800bdc8 <_Bfree+0x40>)
 800bda2:	218f      	movs	r1, #143	@ 0x8f
 800bda4:	f000 fd6e 	bl	800c884 <__assert_func>
 800bda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdac:	6006      	str	r6, [r0, #0]
 800bdae:	60c6      	str	r6, [r0, #12]
 800bdb0:	b13c      	cbz	r4, 800bdc2 <_Bfree+0x3a>
 800bdb2:	69eb      	ldr	r3, [r5, #28]
 800bdb4:	6862      	ldr	r2, [r4, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdbc:	6021      	str	r1, [r4, #0]
 800bdbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	08020e0d 	.word	0x08020e0d
 800bdc8:	08020e8d 	.word	0x08020e8d

0800bdcc <__multadd>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	690d      	ldr	r5, [r1, #16]
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	461e      	mov	r6, r3
 800bdd8:	f101 0c14 	add.w	ip, r1, #20
 800bddc:	2000      	movs	r0, #0
 800bdde:	f8dc 3000 	ldr.w	r3, [ip]
 800bde2:	b299      	uxth	r1, r3
 800bde4:	fb02 6101 	mla	r1, r2, r1, r6
 800bde8:	0c1e      	lsrs	r6, r3, #16
 800bdea:	0c0b      	lsrs	r3, r1, #16
 800bdec:	fb02 3306 	mla	r3, r2, r6, r3
 800bdf0:	b289      	uxth	r1, r1
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdf8:	4285      	cmp	r5, r0
 800bdfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bdfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be02:	dcec      	bgt.n	800bdde <__multadd+0x12>
 800be04:	b30e      	cbz	r6, 800be4a <__multadd+0x7e>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	42ab      	cmp	r3, r5
 800be0a:	dc19      	bgt.n	800be40 <__multadd+0x74>
 800be0c:	6861      	ldr	r1, [r4, #4]
 800be0e:	4638      	mov	r0, r7
 800be10:	3101      	adds	r1, #1
 800be12:	f7ff ff79 	bl	800bd08 <_Balloc>
 800be16:	4680      	mov	r8, r0
 800be18:	b928      	cbnz	r0, 800be26 <__multadd+0x5a>
 800be1a:	4602      	mov	r2, r0
 800be1c:	4b0c      	ldr	r3, [pc, #48]	@ (800be50 <__multadd+0x84>)
 800be1e:	480d      	ldr	r0, [pc, #52]	@ (800be54 <__multadd+0x88>)
 800be20:	21ba      	movs	r1, #186	@ 0xba
 800be22:	f000 fd2f 	bl	800c884 <__assert_func>
 800be26:	6922      	ldr	r2, [r4, #16]
 800be28:	3202      	adds	r2, #2
 800be2a:	f104 010c 	add.w	r1, r4, #12
 800be2e:	0092      	lsls	r2, r2, #2
 800be30:	300c      	adds	r0, #12
 800be32:	f000 fd19 	bl	800c868 <memcpy>
 800be36:	4621      	mov	r1, r4
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff ffa5 	bl	800bd88 <_Bfree>
 800be3e:	4644      	mov	r4, r8
 800be40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be44:	3501      	adds	r5, #1
 800be46:	615e      	str	r6, [r3, #20]
 800be48:	6125      	str	r5, [r4, #16]
 800be4a:	4620      	mov	r0, r4
 800be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be50:	08020e7c 	.word	0x08020e7c
 800be54:	08020e8d 	.word	0x08020e8d

0800be58 <__hi0bits>:
 800be58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be5c:	4603      	mov	r3, r0
 800be5e:	bf36      	itet	cc
 800be60:	0403      	lslcc	r3, r0, #16
 800be62:	2000      	movcs	r0, #0
 800be64:	2010      	movcc	r0, #16
 800be66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be6a:	bf3c      	itt	cc
 800be6c:	021b      	lslcc	r3, r3, #8
 800be6e:	3008      	addcc	r0, #8
 800be70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be74:	bf3c      	itt	cc
 800be76:	011b      	lslcc	r3, r3, #4
 800be78:	3004      	addcc	r0, #4
 800be7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be7e:	bf3c      	itt	cc
 800be80:	009b      	lslcc	r3, r3, #2
 800be82:	3002      	addcc	r0, #2
 800be84:	2b00      	cmp	r3, #0
 800be86:	db05      	blt.n	800be94 <__hi0bits+0x3c>
 800be88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be8c:	f100 0001 	add.w	r0, r0, #1
 800be90:	bf08      	it	eq
 800be92:	2020      	moveq	r0, #32
 800be94:	4770      	bx	lr

0800be96 <__lo0bits>:
 800be96:	6803      	ldr	r3, [r0, #0]
 800be98:	4602      	mov	r2, r0
 800be9a:	f013 0007 	ands.w	r0, r3, #7
 800be9e:	d00b      	beq.n	800beb8 <__lo0bits+0x22>
 800bea0:	07d9      	lsls	r1, r3, #31
 800bea2:	d421      	bmi.n	800bee8 <__lo0bits+0x52>
 800bea4:	0798      	lsls	r0, r3, #30
 800bea6:	bf49      	itett	mi
 800bea8:	085b      	lsrmi	r3, r3, #1
 800beaa:	089b      	lsrpl	r3, r3, #2
 800beac:	2001      	movmi	r0, #1
 800beae:	6013      	strmi	r3, [r2, #0]
 800beb0:	bf5c      	itt	pl
 800beb2:	6013      	strpl	r3, [r2, #0]
 800beb4:	2002      	movpl	r0, #2
 800beb6:	4770      	bx	lr
 800beb8:	b299      	uxth	r1, r3
 800beba:	b909      	cbnz	r1, 800bec0 <__lo0bits+0x2a>
 800bebc:	0c1b      	lsrs	r3, r3, #16
 800bebe:	2010      	movs	r0, #16
 800bec0:	b2d9      	uxtb	r1, r3
 800bec2:	b909      	cbnz	r1, 800bec8 <__lo0bits+0x32>
 800bec4:	3008      	adds	r0, #8
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	0719      	lsls	r1, r3, #28
 800beca:	bf04      	itt	eq
 800becc:	091b      	lsreq	r3, r3, #4
 800bece:	3004      	addeq	r0, #4
 800bed0:	0799      	lsls	r1, r3, #30
 800bed2:	bf04      	itt	eq
 800bed4:	089b      	lsreq	r3, r3, #2
 800bed6:	3002      	addeq	r0, #2
 800bed8:	07d9      	lsls	r1, r3, #31
 800beda:	d403      	bmi.n	800bee4 <__lo0bits+0x4e>
 800bedc:	085b      	lsrs	r3, r3, #1
 800bede:	f100 0001 	add.w	r0, r0, #1
 800bee2:	d003      	beq.n	800beec <__lo0bits+0x56>
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	4770      	bx	lr
 800bee8:	2000      	movs	r0, #0
 800beea:	4770      	bx	lr
 800beec:	2020      	movs	r0, #32
 800beee:	4770      	bx	lr

0800bef0 <__i2b>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	460c      	mov	r4, r1
 800bef4:	2101      	movs	r1, #1
 800bef6:	f7ff ff07 	bl	800bd08 <_Balloc>
 800befa:	4602      	mov	r2, r0
 800befc:	b928      	cbnz	r0, 800bf0a <__i2b+0x1a>
 800befe:	4b05      	ldr	r3, [pc, #20]	@ (800bf14 <__i2b+0x24>)
 800bf00:	4805      	ldr	r0, [pc, #20]	@ (800bf18 <__i2b+0x28>)
 800bf02:	f240 1145 	movw	r1, #325	@ 0x145
 800bf06:	f000 fcbd 	bl	800c884 <__assert_func>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	6144      	str	r4, [r0, #20]
 800bf0e:	6103      	str	r3, [r0, #16]
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	bf00      	nop
 800bf14:	08020e7c 	.word	0x08020e7c
 800bf18:	08020e8d 	.word	0x08020e8d

0800bf1c <__multiply>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	4614      	mov	r4, r2
 800bf22:	690a      	ldr	r2, [r1, #16]
 800bf24:	6923      	ldr	r3, [r4, #16]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	bfa8      	it	ge
 800bf2a:	4623      	movge	r3, r4
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	bfa4      	itt	ge
 800bf30:	460c      	movge	r4, r1
 800bf32:	461f      	movge	r7, r3
 800bf34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf3c:	68a3      	ldr	r3, [r4, #8]
 800bf3e:	6861      	ldr	r1, [r4, #4]
 800bf40:	eb0a 0609 	add.w	r6, sl, r9
 800bf44:	42b3      	cmp	r3, r6
 800bf46:	b085      	sub	sp, #20
 800bf48:	bfb8      	it	lt
 800bf4a:	3101      	addlt	r1, #1
 800bf4c:	f7ff fedc 	bl	800bd08 <_Balloc>
 800bf50:	b930      	cbnz	r0, 800bf60 <__multiply+0x44>
 800bf52:	4602      	mov	r2, r0
 800bf54:	4b44      	ldr	r3, [pc, #272]	@ (800c068 <__multiply+0x14c>)
 800bf56:	4845      	ldr	r0, [pc, #276]	@ (800c06c <__multiply+0x150>)
 800bf58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf5c:	f000 fc92 	bl	800c884 <__assert_func>
 800bf60:	f100 0514 	add.w	r5, r0, #20
 800bf64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf68:	462b      	mov	r3, r5
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4543      	cmp	r3, r8
 800bf6e:	d321      	bcc.n	800bfb4 <__multiply+0x98>
 800bf70:	f107 0114 	add.w	r1, r7, #20
 800bf74:	f104 0214 	add.w	r2, r4, #20
 800bf78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf80:	9302      	str	r3, [sp, #8]
 800bf82:	1b13      	subs	r3, r2, r4
 800bf84:	3b15      	subs	r3, #21
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	f104 0715 	add.w	r7, r4, #21
 800bf90:	42ba      	cmp	r2, r7
 800bf92:	bf38      	it	cc
 800bf94:	2304      	movcc	r3, #4
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	9b02      	ldr	r3, [sp, #8]
 800bf9a:	9103      	str	r1, [sp, #12]
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	d80c      	bhi.n	800bfba <__multiply+0x9e>
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	dd03      	ble.n	800bfac <__multiply+0x90>
 800bfa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d05b      	beq.n	800c064 <__multiply+0x148>
 800bfac:	6106      	str	r6, [r0, #16]
 800bfae:	b005      	add	sp, #20
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	f843 2b04 	str.w	r2, [r3], #4
 800bfb8:	e7d8      	b.n	800bf6c <__multiply+0x50>
 800bfba:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfbe:	f1ba 0f00 	cmp.w	sl, #0
 800bfc2:	d024      	beq.n	800c00e <__multiply+0xf2>
 800bfc4:	f104 0e14 	add.w	lr, r4, #20
 800bfc8:	46a9      	mov	r9, r5
 800bfca:	f04f 0c00 	mov.w	ip, #0
 800bfce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfd2:	f8d9 3000 	ldr.w	r3, [r9]
 800bfd6:	fa1f fb87 	uxth.w	fp, r7
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfe0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bfe4:	f8d9 7000 	ldr.w	r7, [r9]
 800bfe8:	4463      	add	r3, ip
 800bfea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bfee:	fb0a c70b 	mla	r7, sl, fp, ip
 800bff2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bffc:	4572      	cmp	r2, lr
 800bffe:	f849 3b04 	str.w	r3, [r9], #4
 800c002:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c006:	d8e2      	bhi.n	800bfce <__multiply+0xb2>
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	f845 c003 	str.w	ip, [r5, r3]
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c014:	3104      	adds	r1, #4
 800c016:	f1b9 0f00 	cmp.w	r9, #0
 800c01a:	d021      	beq.n	800c060 <__multiply+0x144>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	f104 0c14 	add.w	ip, r4, #20
 800c022:	46ae      	mov	lr, r5
 800c024:	f04f 0a00 	mov.w	sl, #0
 800c028:	f8bc b000 	ldrh.w	fp, [ip]
 800c02c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c030:	fb09 770b 	mla	r7, r9, fp, r7
 800c034:	4457      	add	r7, sl
 800c036:	b29b      	uxth	r3, r3
 800c038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c03c:	f84e 3b04 	str.w	r3, [lr], #4
 800c040:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c048:	f8be 3000 	ldrh.w	r3, [lr]
 800c04c:	fb09 330a 	mla	r3, r9, sl, r3
 800c050:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c054:	4562      	cmp	r2, ip
 800c056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c05a:	d8e5      	bhi.n	800c028 <__multiply+0x10c>
 800c05c:	9f01      	ldr	r7, [sp, #4]
 800c05e:	51eb      	str	r3, [r5, r7]
 800c060:	3504      	adds	r5, #4
 800c062:	e799      	b.n	800bf98 <__multiply+0x7c>
 800c064:	3e01      	subs	r6, #1
 800c066:	e79b      	b.n	800bfa0 <__multiply+0x84>
 800c068:	08020e7c 	.word	0x08020e7c
 800c06c:	08020e8d 	.word	0x08020e8d

0800c070 <__pow5mult>:
 800c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c074:	4615      	mov	r5, r2
 800c076:	f012 0203 	ands.w	r2, r2, #3
 800c07a:	4607      	mov	r7, r0
 800c07c:	460e      	mov	r6, r1
 800c07e:	d007      	beq.n	800c090 <__pow5mult+0x20>
 800c080:	4c25      	ldr	r4, [pc, #148]	@ (800c118 <__pow5mult+0xa8>)
 800c082:	3a01      	subs	r2, #1
 800c084:	2300      	movs	r3, #0
 800c086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c08a:	f7ff fe9f 	bl	800bdcc <__multadd>
 800c08e:	4606      	mov	r6, r0
 800c090:	10ad      	asrs	r5, r5, #2
 800c092:	d03d      	beq.n	800c110 <__pow5mult+0xa0>
 800c094:	69fc      	ldr	r4, [r7, #28]
 800c096:	b97c      	cbnz	r4, 800c0b8 <__pow5mult+0x48>
 800c098:	2010      	movs	r0, #16
 800c09a:	f7ff fd7f 	bl	800bb9c <malloc>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	61f8      	str	r0, [r7, #28]
 800c0a2:	b928      	cbnz	r0, 800c0b0 <__pow5mult+0x40>
 800c0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c11c <__pow5mult+0xac>)
 800c0a6:	481e      	ldr	r0, [pc, #120]	@ (800c120 <__pow5mult+0xb0>)
 800c0a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0ac:	f000 fbea 	bl	800c884 <__assert_func>
 800c0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0b4:	6004      	str	r4, [r0, #0]
 800c0b6:	60c4      	str	r4, [r0, #12]
 800c0b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0c0:	b94c      	cbnz	r4, 800c0d6 <__pow5mult+0x66>
 800c0c2:	f240 2171 	movw	r1, #625	@ 0x271
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff ff12 	bl	800bef0 <__i2b>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	6003      	str	r3, [r0, #0]
 800c0d6:	f04f 0900 	mov.w	r9, #0
 800c0da:	07eb      	lsls	r3, r5, #31
 800c0dc:	d50a      	bpl.n	800c0f4 <__pow5mult+0x84>
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	f7ff ff1a 	bl	800bf1c <__multiply>
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4680      	mov	r8, r0
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff fe4b 	bl	800bd88 <_Bfree>
 800c0f2:	4646      	mov	r6, r8
 800c0f4:	106d      	asrs	r5, r5, #1
 800c0f6:	d00b      	beq.n	800c110 <__pow5mult+0xa0>
 800c0f8:	6820      	ldr	r0, [r4, #0]
 800c0fa:	b938      	cbnz	r0, 800c10c <__pow5mult+0x9c>
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	4621      	mov	r1, r4
 800c100:	4638      	mov	r0, r7
 800c102:	f7ff ff0b 	bl	800bf1c <__multiply>
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	f8c0 9000 	str.w	r9, [r0]
 800c10c:	4604      	mov	r4, r0
 800c10e:	e7e4      	b.n	800c0da <__pow5mult+0x6a>
 800c110:	4630      	mov	r0, r6
 800c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c116:	bf00      	nop
 800c118:	08020ee8 	.word	0x08020ee8
 800c11c:	08020e0d 	.word	0x08020e0d
 800c120:	08020e8d 	.word	0x08020e8d

0800c124 <__lshift>:
 800c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c128:	460c      	mov	r4, r1
 800c12a:	6849      	ldr	r1, [r1, #4]
 800c12c:	6923      	ldr	r3, [r4, #16]
 800c12e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c132:	68a3      	ldr	r3, [r4, #8]
 800c134:	4607      	mov	r7, r0
 800c136:	4691      	mov	r9, r2
 800c138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c13c:	f108 0601 	add.w	r6, r8, #1
 800c140:	42b3      	cmp	r3, r6
 800c142:	db0b      	blt.n	800c15c <__lshift+0x38>
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff fddf 	bl	800bd08 <_Balloc>
 800c14a:	4605      	mov	r5, r0
 800c14c:	b948      	cbnz	r0, 800c162 <__lshift+0x3e>
 800c14e:	4602      	mov	r2, r0
 800c150:	4b28      	ldr	r3, [pc, #160]	@ (800c1f4 <__lshift+0xd0>)
 800c152:	4829      	ldr	r0, [pc, #164]	@ (800c1f8 <__lshift+0xd4>)
 800c154:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c158:	f000 fb94 	bl	800c884 <__assert_func>
 800c15c:	3101      	adds	r1, #1
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	e7ee      	b.n	800c140 <__lshift+0x1c>
 800c162:	2300      	movs	r3, #0
 800c164:	f100 0114 	add.w	r1, r0, #20
 800c168:	f100 0210 	add.w	r2, r0, #16
 800c16c:	4618      	mov	r0, r3
 800c16e:	4553      	cmp	r3, sl
 800c170:	db33      	blt.n	800c1da <__lshift+0xb6>
 800c172:	6920      	ldr	r0, [r4, #16]
 800c174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c178:	f104 0314 	add.w	r3, r4, #20
 800c17c:	f019 091f 	ands.w	r9, r9, #31
 800c180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c188:	d02b      	beq.n	800c1e2 <__lshift+0xbe>
 800c18a:	f1c9 0e20 	rsb	lr, r9, #32
 800c18e:	468a      	mov	sl, r1
 800c190:	2200      	movs	r2, #0
 800c192:	6818      	ldr	r0, [r3, #0]
 800c194:	fa00 f009 	lsl.w	r0, r0, r9
 800c198:	4310      	orrs	r0, r2
 800c19a:	f84a 0b04 	str.w	r0, [sl], #4
 800c19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a2:	459c      	cmp	ip, r3
 800c1a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1a8:	d8f3      	bhi.n	800c192 <__lshift+0x6e>
 800c1aa:	ebac 0304 	sub.w	r3, ip, r4
 800c1ae:	3b15      	subs	r3, #21
 800c1b0:	f023 0303 	bic.w	r3, r3, #3
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	f104 0015 	add.w	r0, r4, #21
 800c1ba:	4584      	cmp	ip, r0
 800c1bc:	bf38      	it	cc
 800c1be:	2304      	movcc	r3, #4
 800c1c0:	50ca      	str	r2, [r1, r3]
 800c1c2:	b10a      	cbz	r2, 800c1c8 <__lshift+0xa4>
 800c1c4:	f108 0602 	add.w	r6, r8, #2
 800c1c8:	3e01      	subs	r6, #1
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	612e      	str	r6, [r5, #16]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	f7ff fdda 	bl	800bd88 <_Bfree>
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1de:	3301      	adds	r3, #1
 800c1e0:	e7c5      	b.n	800c16e <__lshift+0x4a>
 800c1e2:	3904      	subs	r1, #4
 800c1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1ec:	459c      	cmp	ip, r3
 800c1ee:	d8f9      	bhi.n	800c1e4 <__lshift+0xc0>
 800c1f0:	e7ea      	b.n	800c1c8 <__lshift+0xa4>
 800c1f2:	bf00      	nop
 800c1f4:	08020e7c 	.word	0x08020e7c
 800c1f8:	08020e8d 	.word	0x08020e8d

0800c1fc <__mcmp>:
 800c1fc:	690a      	ldr	r2, [r1, #16]
 800c1fe:	4603      	mov	r3, r0
 800c200:	6900      	ldr	r0, [r0, #16]
 800c202:	1a80      	subs	r0, r0, r2
 800c204:	b530      	push	{r4, r5, lr}
 800c206:	d10e      	bne.n	800c226 <__mcmp+0x2a>
 800c208:	3314      	adds	r3, #20
 800c20a:	3114      	adds	r1, #20
 800c20c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c21c:	4295      	cmp	r5, r2
 800c21e:	d003      	beq.n	800c228 <__mcmp+0x2c>
 800c220:	d205      	bcs.n	800c22e <__mcmp+0x32>
 800c222:	f04f 30ff 	mov.w	r0, #4294967295
 800c226:	bd30      	pop	{r4, r5, pc}
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d3f3      	bcc.n	800c214 <__mcmp+0x18>
 800c22c:	e7fb      	b.n	800c226 <__mcmp+0x2a>
 800c22e:	2001      	movs	r0, #1
 800c230:	e7f9      	b.n	800c226 <__mcmp+0x2a>
	...

0800c234 <__mdiff>:
 800c234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	4689      	mov	r9, r1
 800c23a:	4606      	mov	r6, r0
 800c23c:	4611      	mov	r1, r2
 800c23e:	4648      	mov	r0, r9
 800c240:	4614      	mov	r4, r2
 800c242:	f7ff ffdb 	bl	800c1fc <__mcmp>
 800c246:	1e05      	subs	r5, r0, #0
 800c248:	d112      	bne.n	800c270 <__mdiff+0x3c>
 800c24a:	4629      	mov	r1, r5
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7ff fd5b 	bl	800bd08 <_Balloc>
 800c252:	4602      	mov	r2, r0
 800c254:	b928      	cbnz	r0, 800c262 <__mdiff+0x2e>
 800c256:	4b3f      	ldr	r3, [pc, #252]	@ (800c354 <__mdiff+0x120>)
 800c258:	f240 2137 	movw	r1, #567	@ 0x237
 800c25c:	483e      	ldr	r0, [pc, #248]	@ (800c358 <__mdiff+0x124>)
 800c25e:	f000 fb11 	bl	800c884 <__assert_func>
 800c262:	2301      	movs	r3, #1
 800c264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c268:	4610      	mov	r0, r2
 800c26a:	b003      	add	sp, #12
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c270:	bfbc      	itt	lt
 800c272:	464b      	movlt	r3, r9
 800c274:	46a1      	movlt	r9, r4
 800c276:	4630      	mov	r0, r6
 800c278:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c27c:	bfba      	itte	lt
 800c27e:	461c      	movlt	r4, r3
 800c280:	2501      	movlt	r5, #1
 800c282:	2500      	movge	r5, #0
 800c284:	f7ff fd40 	bl	800bd08 <_Balloc>
 800c288:	4602      	mov	r2, r0
 800c28a:	b918      	cbnz	r0, 800c294 <__mdiff+0x60>
 800c28c:	4b31      	ldr	r3, [pc, #196]	@ (800c354 <__mdiff+0x120>)
 800c28e:	f240 2145 	movw	r1, #581	@ 0x245
 800c292:	e7e3      	b.n	800c25c <__mdiff+0x28>
 800c294:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c298:	6926      	ldr	r6, [r4, #16]
 800c29a:	60c5      	str	r5, [r0, #12]
 800c29c:	f109 0310 	add.w	r3, r9, #16
 800c2a0:	f109 0514 	add.w	r5, r9, #20
 800c2a4:	f104 0e14 	add.w	lr, r4, #20
 800c2a8:	f100 0b14 	add.w	fp, r0, #20
 800c2ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	46d9      	mov	r9, fp
 800c2b8:	f04f 0c00 	mov.w	ip, #0
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	fa1f f38a 	uxth.w	r3, sl
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	b283      	uxth	r3, r0
 800c2d0:	1acb      	subs	r3, r1, r3
 800c2d2:	0c00      	lsrs	r0, r0, #16
 800c2d4:	4463      	add	r3, ip
 800c2d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2e4:	4576      	cmp	r6, lr
 800c2e6:	f849 3b04 	str.w	r3, [r9], #4
 800c2ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2ee:	d8e5      	bhi.n	800c2bc <__mdiff+0x88>
 800c2f0:	1b33      	subs	r3, r6, r4
 800c2f2:	3b15      	subs	r3, #21
 800c2f4:	f023 0303 	bic.w	r3, r3, #3
 800c2f8:	3415      	adds	r4, #21
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	42a6      	cmp	r6, r4
 800c2fe:	bf38      	it	cc
 800c300:	2304      	movcc	r3, #4
 800c302:	441d      	add	r5, r3
 800c304:	445b      	add	r3, fp
 800c306:	461e      	mov	r6, r3
 800c308:	462c      	mov	r4, r5
 800c30a:	4544      	cmp	r4, r8
 800c30c:	d30e      	bcc.n	800c32c <__mdiff+0xf8>
 800c30e:	f108 0103 	add.w	r1, r8, #3
 800c312:	1b49      	subs	r1, r1, r5
 800c314:	f021 0103 	bic.w	r1, r1, #3
 800c318:	3d03      	subs	r5, #3
 800c31a:	45a8      	cmp	r8, r5
 800c31c:	bf38      	it	cc
 800c31e:	2100      	movcc	r1, #0
 800c320:	440b      	add	r3, r1
 800c322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c326:	b191      	cbz	r1, 800c34e <__mdiff+0x11a>
 800c328:	6117      	str	r7, [r2, #16]
 800c32a:	e79d      	b.n	800c268 <__mdiff+0x34>
 800c32c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c330:	46e6      	mov	lr, ip
 800c332:	0c08      	lsrs	r0, r1, #16
 800c334:	fa1c fc81 	uxtah	ip, ip, r1
 800c338:	4471      	add	r1, lr
 800c33a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c33e:	b289      	uxth	r1, r1
 800c340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c344:	f846 1b04 	str.w	r1, [r6], #4
 800c348:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c34c:	e7dd      	b.n	800c30a <__mdiff+0xd6>
 800c34e:	3f01      	subs	r7, #1
 800c350:	e7e7      	b.n	800c322 <__mdiff+0xee>
 800c352:	bf00      	nop
 800c354:	08020e7c 	.word	0x08020e7c
 800c358:	08020e8d 	.word	0x08020e8d

0800c35c <__d2b>:
 800c35c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c360:	460f      	mov	r7, r1
 800c362:	2101      	movs	r1, #1
 800c364:	ec59 8b10 	vmov	r8, r9, d0
 800c368:	4616      	mov	r6, r2
 800c36a:	f7ff fccd 	bl	800bd08 <_Balloc>
 800c36e:	4604      	mov	r4, r0
 800c370:	b930      	cbnz	r0, 800c380 <__d2b+0x24>
 800c372:	4602      	mov	r2, r0
 800c374:	4b23      	ldr	r3, [pc, #140]	@ (800c404 <__d2b+0xa8>)
 800c376:	4824      	ldr	r0, [pc, #144]	@ (800c408 <__d2b+0xac>)
 800c378:	f240 310f 	movw	r1, #783	@ 0x30f
 800c37c:	f000 fa82 	bl	800c884 <__assert_func>
 800c380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c388:	b10d      	cbz	r5, 800c38e <__d2b+0x32>
 800c38a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	f1b8 0300 	subs.w	r3, r8, #0
 800c394:	d023      	beq.n	800c3de <__d2b+0x82>
 800c396:	4668      	mov	r0, sp
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	f7ff fd7c 	bl	800be96 <__lo0bits>
 800c39e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3a2:	b1d0      	cbz	r0, 800c3da <__d2b+0x7e>
 800c3a4:	f1c0 0320 	rsb	r3, r0, #32
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	430b      	orrs	r3, r1
 800c3ae:	40c2      	lsrs	r2, r0
 800c3b0:	6163      	str	r3, [r4, #20]
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	9b01      	ldr	r3, [sp, #4]
 800c3b6:	61a3      	str	r3, [r4, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bf0c      	ite	eq
 800c3bc:	2201      	moveq	r2, #1
 800c3be:	2202      	movne	r2, #2
 800c3c0:	6122      	str	r2, [r4, #16]
 800c3c2:	b1a5      	cbz	r5, 800c3ee <__d2b+0x92>
 800c3c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3c8:	4405      	add	r5, r0
 800c3ca:	603d      	str	r5, [r7, #0]
 800c3cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3d0:	6030      	str	r0, [r6, #0]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	b003      	add	sp, #12
 800c3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3da:	6161      	str	r1, [r4, #20]
 800c3dc:	e7ea      	b.n	800c3b4 <__d2b+0x58>
 800c3de:	a801      	add	r0, sp, #4
 800c3e0:	f7ff fd59 	bl	800be96 <__lo0bits>
 800c3e4:	9b01      	ldr	r3, [sp, #4]
 800c3e6:	6163      	str	r3, [r4, #20]
 800c3e8:	3020      	adds	r0, #32
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	e7e8      	b.n	800c3c0 <__d2b+0x64>
 800c3ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3f6:	6038      	str	r0, [r7, #0]
 800c3f8:	6918      	ldr	r0, [r3, #16]
 800c3fa:	f7ff fd2d 	bl	800be58 <__hi0bits>
 800c3fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c402:	e7e5      	b.n	800c3d0 <__d2b+0x74>
 800c404:	08020e7c 	.word	0x08020e7c
 800c408:	08020e8d 	.word	0x08020e8d

0800c40c <__ssputs_r>:
 800c40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	688e      	ldr	r6, [r1, #8]
 800c412:	461f      	mov	r7, r3
 800c414:	42be      	cmp	r6, r7
 800c416:	680b      	ldr	r3, [r1, #0]
 800c418:	4682      	mov	sl, r0
 800c41a:	460c      	mov	r4, r1
 800c41c:	4690      	mov	r8, r2
 800c41e:	d82d      	bhi.n	800c47c <__ssputs_r+0x70>
 800c420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c428:	d026      	beq.n	800c478 <__ssputs_r+0x6c>
 800c42a:	6965      	ldr	r5, [r4, #20]
 800c42c:	6909      	ldr	r1, [r1, #16]
 800c42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c432:	eba3 0901 	sub.w	r9, r3, r1
 800c436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c43a:	1c7b      	adds	r3, r7, #1
 800c43c:	444b      	add	r3, r9
 800c43e:	106d      	asrs	r5, r5, #1
 800c440:	429d      	cmp	r5, r3
 800c442:	bf38      	it	cc
 800c444:	461d      	movcc	r5, r3
 800c446:	0553      	lsls	r3, r2, #21
 800c448:	d527      	bpl.n	800c49a <__ssputs_r+0x8e>
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7ff fbd0 	bl	800bbf0 <_malloc_r>
 800c450:	4606      	mov	r6, r0
 800c452:	b360      	cbz	r0, 800c4ae <__ssputs_r+0xa2>
 800c454:	6921      	ldr	r1, [r4, #16]
 800c456:	464a      	mov	r2, r9
 800c458:	f000 fa06 	bl	800c868 <memcpy>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	6126      	str	r6, [r4, #16]
 800c46a:	6165      	str	r5, [r4, #20]
 800c46c:	444e      	add	r6, r9
 800c46e:	eba5 0509 	sub.w	r5, r5, r9
 800c472:	6026      	str	r6, [r4, #0]
 800c474:	60a5      	str	r5, [r4, #8]
 800c476:	463e      	mov	r6, r7
 800c478:	42be      	cmp	r6, r7
 800c47a:	d900      	bls.n	800c47e <__ssputs_r+0x72>
 800c47c:	463e      	mov	r6, r7
 800c47e:	6820      	ldr	r0, [r4, #0]
 800c480:	4632      	mov	r2, r6
 800c482:	4641      	mov	r1, r8
 800c484:	f000 f9c6 	bl	800c814 <memmove>
 800c488:	68a3      	ldr	r3, [r4, #8]
 800c48a:	1b9b      	subs	r3, r3, r6
 800c48c:	60a3      	str	r3, [r4, #8]
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	4433      	add	r3, r6
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49a:	462a      	mov	r2, r5
 800c49c:	f000 fa36 	bl	800c90c <_realloc_r>
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d1e0      	bne.n	800c468 <__ssputs_r+0x5c>
 800c4a6:	6921      	ldr	r1, [r4, #16]
 800c4a8:	4650      	mov	r0, sl
 800c4aa:	f7ff fb2d 	bl	800bb08 <_free_r>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	f8ca 3000 	str.w	r3, [sl]
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	e7e9      	b.n	800c496 <__ssputs_r+0x8a>
	...

0800c4c4 <_svfiprintf_r>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	4698      	mov	r8, r3
 800c4ca:	898b      	ldrh	r3, [r1, #12]
 800c4cc:	061b      	lsls	r3, r3, #24
 800c4ce:	b09d      	sub	sp, #116	@ 0x74
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	d510      	bpl.n	800c4fa <_svfiprintf_r+0x36>
 800c4d8:	690b      	ldr	r3, [r1, #16]
 800c4da:	b973      	cbnz	r3, 800c4fa <_svfiprintf_r+0x36>
 800c4dc:	2140      	movs	r1, #64	@ 0x40
 800c4de:	f7ff fb87 	bl	800bbf0 <_malloc_r>
 800c4e2:	6028      	str	r0, [r5, #0]
 800c4e4:	6128      	str	r0, [r5, #16]
 800c4e6:	b930      	cbnz	r0, 800c4f6 <_svfiprintf_r+0x32>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	b01d      	add	sp, #116	@ 0x74
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	2340      	movs	r3, #64	@ 0x40
 800c4f8:	616b      	str	r3, [r5, #20]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4fe:	2320      	movs	r3, #32
 800c500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c504:	f8cd 800c 	str.w	r8, [sp, #12]
 800c508:	2330      	movs	r3, #48	@ 0x30
 800c50a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6a8 <_svfiprintf_r+0x1e4>
 800c50e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c512:	f04f 0901 	mov.w	r9, #1
 800c516:	4623      	mov	r3, r4
 800c518:	469a      	mov	sl, r3
 800c51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c51e:	b10a      	cbz	r2, 800c524 <_svfiprintf_r+0x60>
 800c520:	2a25      	cmp	r2, #37	@ 0x25
 800c522:	d1f9      	bne.n	800c518 <_svfiprintf_r+0x54>
 800c524:	ebba 0b04 	subs.w	fp, sl, r4
 800c528:	d00b      	beq.n	800c542 <_svfiprintf_r+0x7e>
 800c52a:	465b      	mov	r3, fp
 800c52c:	4622      	mov	r2, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ff6b 	bl	800c40c <__ssputs_r>
 800c536:	3001      	adds	r0, #1
 800c538:	f000 80a7 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c53e:	445a      	add	r2, fp
 800c540:	9209      	str	r2, [sp, #36]	@ 0x24
 800c542:	f89a 3000 	ldrb.w	r3, [sl]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 809f 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c54c:	2300      	movs	r3, #0
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c556:	f10a 0a01 	add.w	sl, sl, #1
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	9307      	str	r3, [sp, #28]
 800c55e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c562:	931a      	str	r3, [sp, #104]	@ 0x68
 800c564:	4654      	mov	r4, sl
 800c566:	2205      	movs	r2, #5
 800c568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56c:	484e      	ldr	r0, [pc, #312]	@ (800c6a8 <_svfiprintf_r+0x1e4>)
 800c56e:	f7f3 fe4f 	bl	8000210 <memchr>
 800c572:	9a04      	ldr	r2, [sp, #16]
 800c574:	b9d8      	cbnz	r0, 800c5ae <_svfiprintf_r+0xea>
 800c576:	06d0      	lsls	r0, r2, #27
 800c578:	bf44      	itt	mi
 800c57a:	2320      	movmi	r3, #32
 800c57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c580:	0711      	lsls	r1, r2, #28
 800c582:	bf44      	itt	mi
 800c584:	232b      	movmi	r3, #43	@ 0x2b
 800c586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c58a:	f89a 3000 	ldrb.w	r3, [sl]
 800c58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c590:	d015      	beq.n	800c5be <_svfiprintf_r+0xfa>
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	4654      	mov	r4, sl
 800c596:	2000      	movs	r0, #0
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4621      	mov	r1, r4
 800c59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a2:	3b30      	subs	r3, #48	@ 0x30
 800c5a4:	2b09      	cmp	r3, #9
 800c5a6:	d94b      	bls.n	800c640 <_svfiprintf_r+0x17c>
 800c5a8:	b1b0      	cbz	r0, 800c5d8 <_svfiprintf_r+0x114>
 800c5aa:	9207      	str	r2, [sp, #28]
 800c5ac:	e014      	b.n	800c5d8 <_svfiprintf_r+0x114>
 800c5ae:	eba0 0308 	sub.w	r3, r0, r8
 800c5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	46a2      	mov	sl, r4
 800c5bc:	e7d2      	b.n	800c564 <_svfiprintf_r+0xa0>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	1d19      	adds	r1, r3, #4
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	9103      	str	r1, [sp, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bfbb      	ittet	lt
 800c5ca:	425b      	neglt	r3, r3
 800c5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d0:	9307      	strge	r3, [sp, #28]
 800c5d2:	9307      	strlt	r3, [sp, #28]
 800c5d4:	bfb8      	it	lt
 800c5d6:	9204      	strlt	r2, [sp, #16]
 800c5d8:	7823      	ldrb	r3, [r4, #0]
 800c5da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5dc:	d10a      	bne.n	800c5f4 <_svfiprintf_r+0x130>
 800c5de:	7863      	ldrb	r3, [r4, #1]
 800c5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e2:	d132      	bne.n	800c64a <_svfiprintf_r+0x186>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d1a      	adds	r2, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9203      	str	r2, [sp, #12]
 800c5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5f0:	3402      	adds	r4, #2
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6b8 <_svfiprintf_r+0x1f4>
 800c5f8:	7821      	ldrb	r1, [r4, #0]
 800c5fa:	2203      	movs	r2, #3
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	f7f3 fe07 	bl	8000210 <memchr>
 800c602:	b138      	cbz	r0, 800c614 <_svfiprintf_r+0x150>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	eba0 000a 	sub.w	r0, r0, sl
 800c60a:	2240      	movs	r2, #64	@ 0x40
 800c60c:	4082      	lsls	r2, r0
 800c60e:	4313      	orrs	r3, r2
 800c610:	3401      	adds	r4, #1
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c618:	4824      	ldr	r0, [pc, #144]	@ (800c6ac <_svfiprintf_r+0x1e8>)
 800c61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c61e:	2206      	movs	r2, #6
 800c620:	f7f3 fdf6 	bl	8000210 <memchr>
 800c624:	2800      	cmp	r0, #0
 800c626:	d036      	beq.n	800c696 <_svfiprintf_r+0x1d2>
 800c628:	4b21      	ldr	r3, [pc, #132]	@ (800c6b0 <_svfiprintf_r+0x1ec>)
 800c62a:	bb1b      	cbnz	r3, 800c674 <_svfiprintf_r+0x1b0>
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	3307      	adds	r3, #7
 800c630:	f023 0307 	bic.w	r3, r3, #7
 800c634:	3308      	adds	r3, #8
 800c636:	9303      	str	r3, [sp, #12]
 800c638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63a:	4433      	add	r3, r6
 800c63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c63e:	e76a      	b.n	800c516 <_svfiprintf_r+0x52>
 800c640:	fb0c 3202 	mla	r2, ip, r2, r3
 800c644:	460c      	mov	r4, r1
 800c646:	2001      	movs	r0, #1
 800c648:	e7a8      	b.n	800c59c <_svfiprintf_r+0xd8>
 800c64a:	2300      	movs	r3, #0
 800c64c:	3401      	adds	r4, #1
 800c64e:	9305      	str	r3, [sp, #20]
 800c650:	4619      	mov	r1, r3
 800c652:	f04f 0c0a 	mov.w	ip, #10
 800c656:	4620      	mov	r0, r4
 800c658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c65c:	3a30      	subs	r2, #48	@ 0x30
 800c65e:	2a09      	cmp	r2, #9
 800c660:	d903      	bls.n	800c66a <_svfiprintf_r+0x1a6>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0c6      	beq.n	800c5f4 <_svfiprintf_r+0x130>
 800c666:	9105      	str	r1, [sp, #20]
 800c668:	e7c4      	b.n	800c5f4 <_svfiprintf_r+0x130>
 800c66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66e:	4604      	mov	r4, r0
 800c670:	2301      	movs	r3, #1
 800c672:	e7f0      	b.n	800c656 <_svfiprintf_r+0x192>
 800c674:	ab03      	add	r3, sp, #12
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	462a      	mov	r2, r5
 800c67a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b4 <_svfiprintf_r+0x1f0>)
 800c67c:	a904      	add	r1, sp, #16
 800c67e:	4638      	mov	r0, r7
 800c680:	f7fd fe86 	bl	800a390 <_printf_float>
 800c684:	1c42      	adds	r2, r0, #1
 800c686:	4606      	mov	r6, r0
 800c688:	d1d6      	bne.n	800c638 <_svfiprintf_r+0x174>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	065b      	lsls	r3, r3, #25
 800c68e:	f53f af2d 	bmi.w	800c4ec <_svfiprintf_r+0x28>
 800c692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c694:	e72c      	b.n	800c4f0 <_svfiprintf_r+0x2c>
 800c696:	ab03      	add	r3, sp, #12
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	462a      	mov	r2, r5
 800c69c:	4b05      	ldr	r3, [pc, #20]	@ (800c6b4 <_svfiprintf_r+0x1f0>)
 800c69e:	a904      	add	r1, sp, #16
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7fe f90d 	bl	800a8c0 <_printf_i>
 800c6a6:	e7ed      	b.n	800c684 <_svfiprintf_r+0x1c0>
 800c6a8:	08020fe8 	.word	0x08020fe8
 800c6ac:	08020ff2 	.word	0x08020ff2
 800c6b0:	0800a391 	.word	0x0800a391
 800c6b4:	0800c40d 	.word	0x0800c40d
 800c6b8:	08020fee 	.word	0x08020fee

0800c6bc <__sflush_r>:
 800c6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c4:	0716      	lsls	r6, r2, #28
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	d454      	bmi.n	800c776 <__sflush_r+0xba>
 800c6cc:	684b      	ldr	r3, [r1, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dc02      	bgt.n	800c6d8 <__sflush_r+0x1c>
 800c6d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd48      	ble.n	800c76a <__sflush_r+0xae>
 800c6d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	d045      	beq.n	800c76a <__sflush_r+0xae>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6e4:	682f      	ldr	r7, [r5, #0]
 800c6e6:	6a21      	ldr	r1, [r4, #32]
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	d030      	beq.n	800c74e <__sflush_r+0x92>
 800c6ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	0759      	lsls	r1, r3, #29
 800c6f2:	d505      	bpl.n	800c700 <__sflush_r+0x44>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6fa:	b10b      	cbz	r3, 800c700 <__sflush_r+0x44>
 800c6fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	2300      	movs	r3, #0
 800c702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c704:	6a21      	ldr	r1, [r4, #32]
 800c706:	4628      	mov	r0, r5
 800c708:	47b0      	blx	r6
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	d106      	bne.n	800c71e <__sflush_r+0x62>
 800c710:	6829      	ldr	r1, [r5, #0]
 800c712:	291d      	cmp	r1, #29
 800c714:	d82b      	bhi.n	800c76e <__sflush_r+0xb2>
 800c716:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c0 <__sflush_r+0x104>)
 800c718:	410a      	asrs	r2, r1
 800c71a:	07d6      	lsls	r6, r2, #31
 800c71c:	d427      	bmi.n	800c76e <__sflush_r+0xb2>
 800c71e:	2200      	movs	r2, #0
 800c720:	6062      	str	r2, [r4, #4]
 800c722:	04d9      	lsls	r1, r3, #19
 800c724:	6922      	ldr	r2, [r4, #16]
 800c726:	6022      	str	r2, [r4, #0]
 800c728:	d504      	bpl.n	800c734 <__sflush_r+0x78>
 800c72a:	1c42      	adds	r2, r0, #1
 800c72c:	d101      	bne.n	800c732 <__sflush_r+0x76>
 800c72e:	682b      	ldr	r3, [r5, #0]
 800c730:	b903      	cbnz	r3, 800c734 <__sflush_r+0x78>
 800c732:	6560      	str	r0, [r4, #84]	@ 0x54
 800c734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c736:	602f      	str	r7, [r5, #0]
 800c738:	b1b9      	cbz	r1, 800c76a <__sflush_r+0xae>
 800c73a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c73e:	4299      	cmp	r1, r3
 800c740:	d002      	beq.n	800c748 <__sflush_r+0x8c>
 800c742:	4628      	mov	r0, r5
 800c744:	f7ff f9e0 	bl	800bb08 <_free_r>
 800c748:	2300      	movs	r3, #0
 800c74a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c74c:	e00d      	b.n	800c76a <__sflush_r+0xae>
 800c74e:	2301      	movs	r3, #1
 800c750:	4628      	mov	r0, r5
 800c752:	47b0      	blx	r6
 800c754:	4602      	mov	r2, r0
 800c756:	1c50      	adds	r0, r2, #1
 800c758:	d1c9      	bne.n	800c6ee <__sflush_r+0x32>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c6      	beq.n	800c6ee <__sflush_r+0x32>
 800c760:	2b1d      	cmp	r3, #29
 800c762:	d001      	beq.n	800c768 <__sflush_r+0xac>
 800c764:	2b16      	cmp	r3, #22
 800c766:	d11e      	bne.n	800c7a6 <__sflush_r+0xea>
 800c768:	602f      	str	r7, [r5, #0]
 800c76a:	2000      	movs	r0, #0
 800c76c:	e022      	b.n	800c7b4 <__sflush_r+0xf8>
 800c76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c772:	b21b      	sxth	r3, r3
 800c774:	e01b      	b.n	800c7ae <__sflush_r+0xf2>
 800c776:	690f      	ldr	r7, [r1, #16]
 800c778:	2f00      	cmp	r7, #0
 800c77a:	d0f6      	beq.n	800c76a <__sflush_r+0xae>
 800c77c:	0793      	lsls	r3, r2, #30
 800c77e:	680e      	ldr	r6, [r1, #0]
 800c780:	bf08      	it	eq
 800c782:	694b      	ldreq	r3, [r1, #20]
 800c784:	600f      	str	r7, [r1, #0]
 800c786:	bf18      	it	ne
 800c788:	2300      	movne	r3, #0
 800c78a:	eba6 0807 	sub.w	r8, r6, r7
 800c78e:	608b      	str	r3, [r1, #8]
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	dde9      	ble.n	800c76a <__sflush_r+0xae>
 800c796:	6a21      	ldr	r1, [r4, #32]
 800c798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c79a:	4643      	mov	r3, r8
 800c79c:	463a      	mov	r2, r7
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b0      	blx	r6
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	dc08      	bgt.n	800c7b8 <__sflush_r+0xfc>
 800c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	4407      	add	r7, r0
 800c7ba:	eba8 0800 	sub.w	r8, r8, r0
 800c7be:	e7e7      	b.n	800c790 <__sflush_r+0xd4>
 800c7c0:	dfbffffe 	.word	0xdfbffffe

0800c7c4 <_fflush_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	690b      	ldr	r3, [r1, #16]
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b913      	cbnz	r3, 800c7d4 <_fflush_r+0x10>
 800c7ce:	2500      	movs	r5, #0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	b118      	cbz	r0, 800c7de <_fflush_r+0x1a>
 800c7d6:	6a03      	ldr	r3, [r0, #32]
 800c7d8:	b90b      	cbnz	r3, 800c7de <_fflush_r+0x1a>
 800c7da:	f7fe fa1d 	bl	800ac18 <__sinit>
 800c7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0f3      	beq.n	800c7ce <_fflush_r+0xa>
 800c7e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7e8:	07d0      	lsls	r0, r2, #31
 800c7ea:	d404      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7ec:	0599      	lsls	r1, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f2:	f7fe fb38 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	f7ff ff5f 	bl	800c6bc <__sflush_r>
 800c7fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c800:	07da      	lsls	r2, r3, #31
 800c802:	4605      	mov	r5, r0
 800c804:	d4e4      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	059b      	lsls	r3, r3, #22
 800c80a:	d4e1      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c80e:	f7fe fb2b 	bl	800ae68 <__retarget_lock_release_recursive>
 800c812:	e7dd      	b.n	800c7d0 <_fflush_r+0xc>

0800c814 <memmove>:
 800c814:	4288      	cmp	r0, r1
 800c816:	b510      	push	{r4, lr}
 800c818:	eb01 0402 	add.w	r4, r1, r2
 800c81c:	d902      	bls.n	800c824 <memmove+0x10>
 800c81e:	4284      	cmp	r4, r0
 800c820:	4623      	mov	r3, r4
 800c822:	d807      	bhi.n	800c834 <memmove+0x20>
 800c824:	1e43      	subs	r3, r0, #1
 800c826:	42a1      	cmp	r1, r4
 800c828:	d008      	beq.n	800c83c <memmove+0x28>
 800c82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c832:	e7f8      	b.n	800c826 <memmove+0x12>
 800c834:	4402      	add	r2, r0
 800c836:	4601      	mov	r1, r0
 800c838:	428a      	cmp	r2, r1
 800c83a:	d100      	bne.n	800c83e <memmove+0x2a>
 800c83c:	bd10      	pop	{r4, pc}
 800c83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c846:	e7f7      	b.n	800c838 <memmove+0x24>

0800c848 <_sbrk_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	@ (800c864 <_sbrk_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f6 fb18 	bl	8002e88 <_sbrk>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_sbrk_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_sbrk_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	20018e68 	.word	0x20018e68

0800c868 <memcpy>:
 800c868:	440a      	add	r2, r1
 800c86a:	4291      	cmp	r1, r2
 800c86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c870:	d100      	bne.n	800c874 <memcpy+0xc>
 800c872:	4770      	bx	lr
 800c874:	b510      	push	{r4, lr}
 800c876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c87e:	4291      	cmp	r1, r2
 800c880:	d1f9      	bne.n	800c876 <memcpy+0xe>
 800c882:	bd10      	pop	{r4, pc}

0800c884 <__assert_func>:
 800c884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c886:	4614      	mov	r4, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	4b09      	ldr	r3, [pc, #36]	@ (800c8b0 <__assert_func+0x2c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4605      	mov	r5, r0
 800c890:	68d8      	ldr	r0, [r3, #12]
 800c892:	b954      	cbnz	r4, 800c8aa <__assert_func+0x26>
 800c894:	4b07      	ldr	r3, [pc, #28]	@ (800c8b4 <__assert_func+0x30>)
 800c896:	461c      	mov	r4, r3
 800c898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c89c:	9100      	str	r1, [sp, #0]
 800c89e:	462b      	mov	r3, r5
 800c8a0:	4905      	ldr	r1, [pc, #20]	@ (800c8b8 <__assert_func+0x34>)
 800c8a2:	f000 f86f 	bl	800c984 <fiprintf>
 800c8a6:	f000 f87f 	bl	800c9a8 <abort>
 800c8aa:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__assert_func+0x38>)
 800c8ac:	e7f4      	b.n	800c898 <__assert_func+0x14>
 800c8ae:	bf00      	nop
 800c8b0:	20000018 	.word	0x20000018
 800c8b4:	0802103e 	.word	0x0802103e
 800c8b8:	08021010 	.word	0x08021010
 800c8bc:	08021003 	.word	0x08021003

0800c8c0 <_calloc_r>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	fba1 5402 	umull	r5, r4, r1, r2
 800c8c6:	b93c      	cbnz	r4, 800c8d8 <_calloc_r+0x18>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7ff f991 	bl	800bbf0 <_malloc_r>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	b928      	cbnz	r0, 800c8de <_calloc_r+0x1e>
 800c8d2:	2600      	movs	r6, #0
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	220c      	movs	r2, #12
 800c8da:	6002      	str	r2, [r0, #0]
 800c8dc:	e7f9      	b.n	800c8d2 <_calloc_r+0x12>
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	f7fe fa42 	bl	800ad6a <memset>
 800c8e6:	e7f5      	b.n	800c8d4 <_calloc_r+0x14>

0800c8e8 <__ascii_mbtowc>:
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	b901      	cbnz	r1, 800c8ee <__ascii_mbtowc+0x6>
 800c8ec:	a901      	add	r1, sp, #4
 800c8ee:	b142      	cbz	r2, 800c902 <__ascii_mbtowc+0x1a>
 800c8f0:	b14b      	cbz	r3, 800c906 <__ascii_mbtowc+0x1e>
 800c8f2:	7813      	ldrb	r3, [r2, #0]
 800c8f4:	600b      	str	r3, [r1, #0]
 800c8f6:	7812      	ldrb	r2, [r2, #0]
 800c8f8:	1e10      	subs	r0, r2, #0
 800c8fa:	bf18      	it	ne
 800c8fc:	2001      	movne	r0, #1
 800c8fe:	b002      	add	sp, #8
 800c900:	4770      	bx	lr
 800c902:	4610      	mov	r0, r2
 800c904:	e7fb      	b.n	800c8fe <__ascii_mbtowc+0x16>
 800c906:	f06f 0001 	mvn.w	r0, #1
 800c90a:	e7f8      	b.n	800c8fe <__ascii_mbtowc+0x16>

0800c90c <_realloc_r>:
 800c90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c910:	4680      	mov	r8, r0
 800c912:	4615      	mov	r5, r2
 800c914:	460c      	mov	r4, r1
 800c916:	b921      	cbnz	r1, 800c922 <_realloc_r+0x16>
 800c918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c91c:	4611      	mov	r1, r2
 800c91e:	f7ff b967 	b.w	800bbf0 <_malloc_r>
 800c922:	b92a      	cbnz	r2, 800c930 <_realloc_r+0x24>
 800c924:	f7ff f8f0 	bl	800bb08 <_free_r>
 800c928:	2400      	movs	r4, #0
 800c92a:	4620      	mov	r0, r4
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	f000 f841 	bl	800c9b6 <_malloc_usable_size_r>
 800c934:	4285      	cmp	r5, r0
 800c936:	4606      	mov	r6, r0
 800c938:	d802      	bhi.n	800c940 <_realloc_r+0x34>
 800c93a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c93e:	d8f4      	bhi.n	800c92a <_realloc_r+0x1e>
 800c940:	4629      	mov	r1, r5
 800c942:	4640      	mov	r0, r8
 800c944:	f7ff f954 	bl	800bbf0 <_malloc_r>
 800c948:	4607      	mov	r7, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d0ec      	beq.n	800c928 <_realloc_r+0x1c>
 800c94e:	42b5      	cmp	r5, r6
 800c950:	462a      	mov	r2, r5
 800c952:	4621      	mov	r1, r4
 800c954:	bf28      	it	cs
 800c956:	4632      	movcs	r2, r6
 800c958:	f7ff ff86 	bl	800c868 <memcpy>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4640      	mov	r0, r8
 800c960:	f7ff f8d2 	bl	800bb08 <_free_r>
 800c964:	463c      	mov	r4, r7
 800c966:	e7e0      	b.n	800c92a <_realloc_r+0x1e>

0800c968 <__ascii_wctomb>:
 800c968:	4603      	mov	r3, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	b141      	cbz	r1, 800c980 <__ascii_wctomb+0x18>
 800c96e:	2aff      	cmp	r2, #255	@ 0xff
 800c970:	d904      	bls.n	800c97c <__ascii_wctomb+0x14>
 800c972:	228a      	movs	r2, #138	@ 0x8a
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	f04f 30ff 	mov.w	r0, #4294967295
 800c97a:	4770      	bx	lr
 800c97c:	700a      	strb	r2, [r1, #0]
 800c97e:	2001      	movs	r0, #1
 800c980:	4770      	bx	lr
	...

0800c984 <fiprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b503      	push	{r0, r1, lr}
 800c988:	4601      	mov	r1, r0
 800c98a:	ab03      	add	r3, sp, #12
 800c98c:	4805      	ldr	r0, [pc, #20]	@ (800c9a4 <fiprintf+0x20>)
 800c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c992:	6800      	ldr	r0, [r0, #0]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	f000 f83f 	bl	800ca18 <_vfiprintf_r>
 800c99a:	b002      	add	sp, #8
 800c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a0:	b003      	add	sp, #12
 800c9a2:	4770      	bx	lr
 800c9a4:	20000018 	.word	0x20000018

0800c9a8 <abort>:
 800c9a8:	b508      	push	{r3, lr}
 800c9aa:	2006      	movs	r0, #6
 800c9ac:	f000 fa08 	bl	800cdc0 <raise>
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	f7f6 f9f1 	bl	8002d98 <_exit>

0800c9b6 <_malloc_usable_size_r>:
 800c9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ba:	1f18      	subs	r0, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfbc      	itt	lt
 800c9c0:	580b      	ldrlt	r3, [r1, r0]
 800c9c2:	18c0      	addlt	r0, r0, r3
 800c9c4:	4770      	bx	lr

0800c9c6 <__sfputc_r>:
 800c9c6:	6893      	ldr	r3, [r2, #8]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	b410      	push	{r4}
 800c9ce:	6093      	str	r3, [r2, #8]
 800c9d0:	da08      	bge.n	800c9e4 <__sfputc_r+0x1e>
 800c9d2:	6994      	ldr	r4, [r2, #24]
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	db01      	blt.n	800c9dc <__sfputc_r+0x16>
 800c9d8:	290a      	cmp	r1, #10
 800c9da:	d103      	bne.n	800c9e4 <__sfputc_r+0x1e>
 800c9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e0:	f000 b932 	b.w	800cc48 <__swbuf_r>
 800c9e4:	6813      	ldr	r3, [r2, #0]
 800c9e6:	1c58      	adds	r0, r3, #1
 800c9e8:	6010      	str	r0, [r2, #0]
 800c9ea:	7019      	strb	r1, [r3, #0]
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <__sfputs_r>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	460f      	mov	r7, r1
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	18d5      	adds	r5, r2, r3
 800c9fe:	42ac      	cmp	r4, r5
 800ca00:	d101      	bne.n	800ca06 <__sfputs_r+0x12>
 800ca02:	2000      	movs	r0, #0
 800ca04:	e007      	b.n	800ca16 <__sfputs_r+0x22>
 800ca06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0a:	463a      	mov	r2, r7
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff ffda 	bl	800c9c6 <__sfputc_r>
 800ca12:	1c43      	adds	r3, r0, #1
 800ca14:	d1f3      	bne.n	800c9fe <__sfputs_r+0xa>
 800ca16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca18 <_vfiprintf_r>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	460d      	mov	r5, r1
 800ca1e:	b09d      	sub	sp, #116	@ 0x74
 800ca20:	4614      	mov	r4, r2
 800ca22:	4698      	mov	r8, r3
 800ca24:	4606      	mov	r6, r0
 800ca26:	b118      	cbz	r0, 800ca30 <_vfiprintf_r+0x18>
 800ca28:	6a03      	ldr	r3, [r0, #32]
 800ca2a:	b90b      	cbnz	r3, 800ca30 <_vfiprintf_r+0x18>
 800ca2c:	f7fe f8f4 	bl	800ac18 <__sinit>
 800ca30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca32:	07d9      	lsls	r1, r3, #31
 800ca34:	d405      	bmi.n	800ca42 <_vfiprintf_r+0x2a>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	059a      	lsls	r2, r3, #22
 800ca3a:	d402      	bmi.n	800ca42 <_vfiprintf_r+0x2a>
 800ca3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca3e:	f7fe fa12 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	071b      	lsls	r3, r3, #28
 800ca46:	d501      	bpl.n	800ca4c <_vfiprintf_r+0x34>
 800ca48:	692b      	ldr	r3, [r5, #16]
 800ca4a:	b99b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x5c>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f000 f938 	bl	800ccc4 <__swsetup_r>
 800ca54:	b170      	cbz	r0, 800ca74 <_vfiprintf_r+0x5c>
 800ca56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca58:	07dc      	lsls	r4, r3, #31
 800ca5a:	d504      	bpl.n	800ca66 <_vfiprintf_r+0x4e>
 800ca5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca60:	b01d      	add	sp, #116	@ 0x74
 800ca62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	0598      	lsls	r0, r3, #22
 800ca6a:	d4f7      	bmi.n	800ca5c <_vfiprintf_r+0x44>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6e:	f7fe f9fb 	bl	800ae68 <__retarget_lock_release_recursive>
 800ca72:	e7f3      	b.n	800ca5c <_vfiprintf_r+0x44>
 800ca74:	2300      	movs	r3, #0
 800ca76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca82:	2330      	movs	r3, #48	@ 0x30
 800ca84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc34 <_vfiprintf_r+0x21c>
 800ca88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca8c:	f04f 0901 	mov.w	r9, #1
 800ca90:	4623      	mov	r3, r4
 800ca92:	469a      	mov	sl, r3
 800ca94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca98:	b10a      	cbz	r2, 800ca9e <_vfiprintf_r+0x86>
 800ca9a:	2a25      	cmp	r2, #37	@ 0x25
 800ca9c:	d1f9      	bne.n	800ca92 <_vfiprintf_r+0x7a>
 800ca9e:	ebba 0b04 	subs.w	fp, sl, r4
 800caa2:	d00b      	beq.n	800cabc <_vfiprintf_r+0xa4>
 800caa4:	465b      	mov	r3, fp
 800caa6:	4622      	mov	r2, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ffa2 	bl	800c9f4 <__sfputs_r>
 800cab0:	3001      	adds	r0, #1
 800cab2:	f000 80a7 	beq.w	800cc04 <_vfiprintf_r+0x1ec>
 800cab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cab8:	445a      	add	r2, fp
 800caba:	9209      	str	r2, [sp, #36]	@ 0x24
 800cabc:	f89a 3000 	ldrb.w	r3, [sl]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 809f 	beq.w	800cc04 <_vfiprintf_r+0x1ec>
 800cac6:	2300      	movs	r3, #0
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad0:	f10a 0a01 	add.w	sl, sl, #1
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cadc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cade:	4654      	mov	r4, sl
 800cae0:	2205      	movs	r2, #5
 800cae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae6:	4853      	ldr	r0, [pc, #332]	@ (800cc34 <_vfiprintf_r+0x21c>)
 800cae8:	f7f3 fb92 	bl	8000210 <memchr>
 800caec:	9a04      	ldr	r2, [sp, #16]
 800caee:	b9d8      	cbnz	r0, 800cb28 <_vfiprintf_r+0x110>
 800caf0:	06d1      	lsls	r1, r2, #27
 800caf2:	bf44      	itt	mi
 800caf4:	2320      	movmi	r3, #32
 800caf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cafa:	0713      	lsls	r3, r2, #28
 800cafc:	bf44      	itt	mi
 800cafe:	232b      	movmi	r3, #43	@ 0x2b
 800cb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0a:	d015      	beq.n	800cb38 <_vfiprintf_r+0x120>
 800cb0c:	9a07      	ldr	r2, [sp, #28]
 800cb0e:	4654      	mov	r4, sl
 800cb10:	2000      	movs	r0, #0
 800cb12:	f04f 0c0a 	mov.w	ip, #10
 800cb16:	4621      	mov	r1, r4
 800cb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb1c:	3b30      	subs	r3, #48	@ 0x30
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	d94b      	bls.n	800cbba <_vfiprintf_r+0x1a2>
 800cb22:	b1b0      	cbz	r0, 800cb52 <_vfiprintf_r+0x13a>
 800cb24:	9207      	str	r2, [sp, #28]
 800cb26:	e014      	b.n	800cb52 <_vfiprintf_r+0x13a>
 800cb28:	eba0 0308 	sub.w	r3, r0, r8
 800cb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb30:	4313      	orrs	r3, r2
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	46a2      	mov	sl, r4
 800cb36:	e7d2      	b.n	800cade <_vfiprintf_r+0xc6>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	1d19      	adds	r1, r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	9103      	str	r1, [sp, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bfbb      	ittet	lt
 800cb44:	425b      	neglt	r3, r3
 800cb46:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4a:	9307      	strge	r3, [sp, #28]
 800cb4c:	9307      	strlt	r3, [sp, #28]
 800cb4e:	bfb8      	it	lt
 800cb50:	9204      	strlt	r2, [sp, #16]
 800cb52:	7823      	ldrb	r3, [r4, #0]
 800cb54:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb56:	d10a      	bne.n	800cb6e <_vfiprintf_r+0x156>
 800cb58:	7863      	ldrb	r3, [r4, #1]
 800cb5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb5c:	d132      	bne.n	800cbc4 <_vfiprintf_r+0x1ac>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	1d1a      	adds	r2, r3, #4
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	9203      	str	r2, [sp, #12]
 800cb66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb6a:	3402      	adds	r4, #2
 800cb6c:	9305      	str	r3, [sp, #20]
 800cb6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc44 <_vfiprintf_r+0x22c>
 800cb72:	7821      	ldrb	r1, [r4, #0]
 800cb74:	2203      	movs	r2, #3
 800cb76:	4650      	mov	r0, sl
 800cb78:	f7f3 fb4a 	bl	8000210 <memchr>
 800cb7c:	b138      	cbz	r0, 800cb8e <_vfiprintf_r+0x176>
 800cb7e:	9b04      	ldr	r3, [sp, #16]
 800cb80:	eba0 000a 	sub.w	r0, r0, sl
 800cb84:	2240      	movs	r2, #64	@ 0x40
 800cb86:	4082      	lsls	r2, r0
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	3401      	adds	r4, #1
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb92:	4829      	ldr	r0, [pc, #164]	@ (800cc38 <_vfiprintf_r+0x220>)
 800cb94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb98:	2206      	movs	r2, #6
 800cb9a:	f7f3 fb39 	bl	8000210 <memchr>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d03f      	beq.n	800cc22 <_vfiprintf_r+0x20a>
 800cba2:	4b26      	ldr	r3, [pc, #152]	@ (800cc3c <_vfiprintf_r+0x224>)
 800cba4:	bb1b      	cbnz	r3, 800cbee <_vfiprintf_r+0x1d6>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	3307      	adds	r3, #7
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	3308      	adds	r3, #8
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb4:	443b      	add	r3, r7
 800cbb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb8:	e76a      	b.n	800ca90 <_vfiprintf_r+0x78>
 800cbba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7a8      	b.n	800cb16 <_vfiprintf_r+0xfe>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	3401      	adds	r4, #1
 800cbc8:	9305      	str	r3, [sp, #20]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	f04f 0c0a 	mov.w	ip, #10
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd6:	3a30      	subs	r2, #48	@ 0x30
 800cbd8:	2a09      	cmp	r2, #9
 800cbda:	d903      	bls.n	800cbe4 <_vfiprintf_r+0x1cc>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d0c6      	beq.n	800cb6e <_vfiprintf_r+0x156>
 800cbe0:	9105      	str	r1, [sp, #20]
 800cbe2:	e7c4      	b.n	800cb6e <_vfiprintf_r+0x156>
 800cbe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe8:	4604      	mov	r4, r0
 800cbea:	2301      	movs	r3, #1
 800cbec:	e7f0      	b.n	800cbd0 <_vfiprintf_r+0x1b8>
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4b12      	ldr	r3, [pc, #72]	@ (800cc40 <_vfiprintf_r+0x228>)
 800cbf6:	a904      	add	r1, sp, #16
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7fd fbc9 	bl	800a390 <_printf_float>
 800cbfe:	4607      	mov	r7, r0
 800cc00:	1c78      	adds	r0, r7, #1
 800cc02:	d1d6      	bne.n	800cbb2 <_vfiprintf_r+0x19a>
 800cc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	d405      	bmi.n	800cc16 <_vfiprintf_r+0x1fe>
 800cc0a:	89ab      	ldrh	r3, [r5, #12]
 800cc0c:	059a      	lsls	r2, r3, #22
 800cc0e:	d402      	bmi.n	800cc16 <_vfiprintf_r+0x1fe>
 800cc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc12:	f7fe f929 	bl	800ae68 <__retarget_lock_release_recursive>
 800cc16:	89ab      	ldrh	r3, [r5, #12]
 800cc18:	065b      	lsls	r3, r3, #25
 800cc1a:	f53f af1f 	bmi.w	800ca5c <_vfiprintf_r+0x44>
 800cc1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc20:	e71e      	b.n	800ca60 <_vfiprintf_r+0x48>
 800cc22:	ab03      	add	r3, sp, #12
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	462a      	mov	r2, r5
 800cc28:	4b05      	ldr	r3, [pc, #20]	@ (800cc40 <_vfiprintf_r+0x228>)
 800cc2a:	a904      	add	r1, sp, #16
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f7fd fe47 	bl	800a8c0 <_printf_i>
 800cc32:	e7e4      	b.n	800cbfe <_vfiprintf_r+0x1e6>
 800cc34:	08020fe8 	.word	0x08020fe8
 800cc38:	08020ff2 	.word	0x08020ff2
 800cc3c:	0800a391 	.word	0x0800a391
 800cc40:	0800c9f5 	.word	0x0800c9f5
 800cc44:	08020fee 	.word	0x08020fee

0800cc48 <__swbuf_r>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	460e      	mov	r6, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	4605      	mov	r5, r0
 800cc50:	b118      	cbz	r0, 800cc5a <__swbuf_r+0x12>
 800cc52:	6a03      	ldr	r3, [r0, #32]
 800cc54:	b90b      	cbnz	r3, 800cc5a <__swbuf_r+0x12>
 800cc56:	f7fd ffdf 	bl	800ac18 <__sinit>
 800cc5a:	69a3      	ldr	r3, [r4, #24]
 800cc5c:	60a3      	str	r3, [r4, #8]
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	071a      	lsls	r2, r3, #28
 800cc62:	d501      	bpl.n	800cc68 <__swbuf_r+0x20>
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	b943      	cbnz	r3, 800cc7a <__swbuf_r+0x32>
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f000 f82a 	bl	800ccc4 <__swsetup_r>
 800cc70:	b118      	cbz	r0, 800cc7a <__swbuf_r+0x32>
 800cc72:	f04f 37ff 	mov.w	r7, #4294967295
 800cc76:	4638      	mov	r0, r7
 800cc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	6922      	ldr	r2, [r4, #16]
 800cc7e:	1a98      	subs	r0, r3, r2
 800cc80:	6963      	ldr	r3, [r4, #20]
 800cc82:	b2f6      	uxtb	r6, r6
 800cc84:	4283      	cmp	r3, r0
 800cc86:	4637      	mov	r7, r6
 800cc88:	dc05      	bgt.n	800cc96 <__swbuf_r+0x4e>
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f7ff fd99 	bl	800c7c4 <_fflush_r>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d1ed      	bne.n	800cc72 <__swbuf_r+0x2a>
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	60a3      	str	r3, [r4, #8]
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	6022      	str	r2, [r4, #0]
 800cca2:	701e      	strb	r6, [r3, #0]
 800cca4:	6962      	ldr	r2, [r4, #20]
 800cca6:	1c43      	adds	r3, r0, #1
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d004      	beq.n	800ccb6 <__swbuf_r+0x6e>
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	07db      	lsls	r3, r3, #31
 800ccb0:	d5e1      	bpl.n	800cc76 <__swbuf_r+0x2e>
 800ccb2:	2e0a      	cmp	r6, #10
 800ccb4:	d1df      	bne.n	800cc76 <__swbuf_r+0x2e>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f7ff fd83 	bl	800c7c4 <_fflush_r>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0d9      	beq.n	800cc76 <__swbuf_r+0x2e>
 800ccc2:	e7d6      	b.n	800cc72 <__swbuf_r+0x2a>

0800ccc4 <__swsetup_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4b29      	ldr	r3, [pc, #164]	@ (800cd6c <__swsetup_r+0xa8>)
 800ccc8:	4605      	mov	r5, r0
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	460c      	mov	r4, r1
 800ccce:	b118      	cbz	r0, 800ccd8 <__swsetup_r+0x14>
 800ccd0:	6a03      	ldr	r3, [r0, #32]
 800ccd2:	b90b      	cbnz	r3, 800ccd8 <__swsetup_r+0x14>
 800ccd4:	f7fd ffa0 	bl	800ac18 <__sinit>
 800ccd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccdc:	0719      	lsls	r1, r3, #28
 800ccde:	d422      	bmi.n	800cd26 <__swsetup_r+0x62>
 800cce0:	06da      	lsls	r2, r3, #27
 800cce2:	d407      	bmi.n	800ccf4 <__swsetup_r+0x30>
 800cce4:	2209      	movs	r2, #9
 800cce6:	602a      	str	r2, [r5, #0]
 800cce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf2:	e033      	b.n	800cd5c <__swsetup_r+0x98>
 800ccf4:	0758      	lsls	r0, r3, #29
 800ccf6:	d512      	bpl.n	800cd1e <__swsetup_r+0x5a>
 800ccf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccfa:	b141      	cbz	r1, 800cd0e <__swsetup_r+0x4a>
 800ccfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd00:	4299      	cmp	r1, r3
 800cd02:	d002      	beq.n	800cd0a <__swsetup_r+0x46>
 800cd04:	4628      	mov	r0, r5
 800cd06:	f7fe feff 	bl	800bb08 <_free_r>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	2300      	movs	r3, #0
 800cd18:	6063      	str	r3, [r4, #4]
 800cd1a:	6923      	ldr	r3, [r4, #16]
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f043 0308 	orr.w	r3, r3, #8
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	6923      	ldr	r3, [r4, #16]
 800cd28:	b94b      	cbnz	r3, 800cd3e <__swsetup_r+0x7a>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd34:	d003      	beq.n	800cd3e <__swsetup_r+0x7a>
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f000 f883 	bl	800ce44 <__smakebuf_r>
 800cd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd42:	f013 0201 	ands.w	r2, r3, #1
 800cd46:	d00a      	beq.n	800cd5e <__swsetup_r+0x9a>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	60a2      	str	r2, [r4, #8]
 800cd4c:	6962      	ldr	r2, [r4, #20]
 800cd4e:	4252      	negs	r2, r2
 800cd50:	61a2      	str	r2, [r4, #24]
 800cd52:	6922      	ldr	r2, [r4, #16]
 800cd54:	b942      	cbnz	r2, 800cd68 <__swsetup_r+0xa4>
 800cd56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd5a:	d1c5      	bne.n	800cce8 <__swsetup_r+0x24>
 800cd5c:	bd38      	pop	{r3, r4, r5, pc}
 800cd5e:	0799      	lsls	r1, r3, #30
 800cd60:	bf58      	it	pl
 800cd62:	6962      	ldrpl	r2, [r4, #20]
 800cd64:	60a2      	str	r2, [r4, #8]
 800cd66:	e7f4      	b.n	800cd52 <__swsetup_r+0x8e>
 800cd68:	2000      	movs	r0, #0
 800cd6a:	e7f7      	b.n	800cd5c <__swsetup_r+0x98>
 800cd6c:	20000018 	.word	0x20000018

0800cd70 <_raise_r>:
 800cd70:	291f      	cmp	r1, #31
 800cd72:	b538      	push	{r3, r4, r5, lr}
 800cd74:	4605      	mov	r5, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	d904      	bls.n	800cd84 <_raise_r+0x14>
 800cd7a:	2316      	movs	r3, #22
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd86:	b112      	cbz	r2, 800cd8e <_raise_r+0x1e>
 800cd88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd8c:	b94b      	cbnz	r3, 800cda2 <_raise_r+0x32>
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 f830 	bl	800cdf4 <_getpid_r>
 800cd94:	4622      	mov	r2, r4
 800cd96:	4601      	mov	r1, r0
 800cd98:	4628      	mov	r0, r5
 800cd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd9e:	f000 b817 	b.w	800cdd0 <_kill_r>
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d00a      	beq.n	800cdbc <_raise_r+0x4c>
 800cda6:	1c59      	adds	r1, r3, #1
 800cda8:	d103      	bne.n	800cdb2 <_raise_r+0x42>
 800cdaa:	2316      	movs	r3, #22
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	2001      	movs	r0, #1
 800cdb0:	e7e7      	b.n	800cd82 <_raise_r+0x12>
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4798      	blx	r3
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	e7e0      	b.n	800cd82 <_raise_r+0x12>

0800cdc0 <raise>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	@ (800cdcc <raise+0xc>)
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f7ff bfd3 	b.w	800cd70 <_raise_r>
 800cdca:	bf00      	nop
 800cdcc:	20000018 	.word	0x20000018

0800cdd0 <_kill_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d07      	ldr	r5, [pc, #28]	@ (800cdf0 <_kill_r+0x20>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	4611      	mov	r1, r2
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	f7f5 ffcb 	bl	8002d78 <_kill>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	d102      	bne.n	800cdec <_kill_r+0x1c>
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	b103      	cbz	r3, 800cdec <_kill_r+0x1c>
 800cdea:	6023      	str	r3, [r4, #0]
 800cdec:	bd38      	pop	{r3, r4, r5, pc}
 800cdee:	bf00      	nop
 800cdf0:	20018e68 	.word	0x20018e68

0800cdf4 <_getpid_r>:
 800cdf4:	f7f5 bfb8 	b.w	8002d68 <_getpid>

0800cdf8 <__swhatbuf_r>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce00:	2900      	cmp	r1, #0
 800ce02:	b096      	sub	sp, #88	@ 0x58
 800ce04:	4615      	mov	r5, r2
 800ce06:	461e      	mov	r6, r3
 800ce08:	da0d      	bge.n	800ce26 <__swhatbuf_r+0x2e>
 800ce0a:	89a3      	ldrh	r3, [r4, #12]
 800ce0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce10:	f04f 0100 	mov.w	r1, #0
 800ce14:	bf14      	ite	ne
 800ce16:	2340      	movne	r3, #64	@ 0x40
 800ce18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	6031      	str	r1, [r6, #0]
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	b016      	add	sp, #88	@ 0x58
 800ce24:	bd70      	pop	{r4, r5, r6, pc}
 800ce26:	466a      	mov	r2, sp
 800ce28:	f000 f848 	bl	800cebc <_fstat_r>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	dbec      	blt.n	800ce0a <__swhatbuf_r+0x12>
 800ce30:	9901      	ldr	r1, [sp, #4]
 800ce32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce3a:	4259      	negs	r1, r3
 800ce3c:	4159      	adcs	r1, r3
 800ce3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce42:	e7eb      	b.n	800ce1c <__swhatbuf_r+0x24>

0800ce44 <__smakebuf_r>:
 800ce44:	898b      	ldrh	r3, [r1, #12]
 800ce46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce48:	079d      	lsls	r5, r3, #30
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	d507      	bpl.n	800ce60 <__smakebuf_r+0x1c>
 800ce50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	2301      	movs	r3, #1
 800ce5a:	6163      	str	r3, [r4, #20]
 800ce5c:	b003      	add	sp, #12
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	ab01      	add	r3, sp, #4
 800ce62:	466a      	mov	r2, sp
 800ce64:	f7ff ffc8 	bl	800cdf8 <__swhatbuf_r>
 800ce68:	9f00      	ldr	r7, [sp, #0]
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7fe febe 	bl	800bbf0 <_malloc_r>
 800ce74:	b948      	cbnz	r0, 800ce8a <__smakebuf_r+0x46>
 800ce76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce7a:	059a      	lsls	r2, r3, #22
 800ce7c:	d4ee      	bmi.n	800ce5c <__smakebuf_r+0x18>
 800ce7e:	f023 0303 	bic.w	r3, r3, #3
 800ce82:	f043 0302 	orr.w	r3, r3, #2
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	e7e2      	b.n	800ce50 <__smakebuf_r+0xc>
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	6020      	str	r0, [r4, #0]
 800ce8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce92:	81a3      	strh	r3, [r4, #12]
 800ce94:	9b01      	ldr	r3, [sp, #4]
 800ce96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce9a:	b15b      	cbz	r3, 800ceb4 <__smakebuf_r+0x70>
 800ce9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea0:	4630      	mov	r0, r6
 800cea2:	f000 f81d 	bl	800cee0 <_isatty_r>
 800cea6:	b128      	cbz	r0, 800ceb4 <__smakebuf_r+0x70>
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	89a3      	ldrh	r3, [r4, #12]
 800ceb6:	431d      	orrs	r5, r3
 800ceb8:	81a5      	strh	r5, [r4, #12]
 800ceba:	e7cf      	b.n	800ce5c <__smakebuf_r+0x18>

0800cebc <_fstat_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	@ (800cedc <_fstat_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f5 ffb5 	bl	8002e38 <_fstat>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_fstat_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_fstat_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	20018e68 	.word	0x20018e68

0800cee0 <_isatty_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d06      	ldr	r5, [pc, #24]	@ (800cefc <_isatty_r+0x1c>)
 800cee4:	2300      	movs	r3, #0
 800cee6:	4604      	mov	r4, r0
 800cee8:	4608      	mov	r0, r1
 800ceea:	602b      	str	r3, [r5, #0]
 800ceec:	f7f5 ffb4 	bl	8002e58 <_isatty>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_isatty_r+0x1a>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_isatty_r+0x1a>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	20018e68 	.word	0x20018e68

0800cf00 <hypot>:
 800cf00:	b508      	push	{r3, lr}
 800cf02:	ed2d 8b06 	vpush	{d8-d10}
 800cf06:	eeb0 aa40 	vmov.f32	s20, s0
 800cf0a:	eef0 aa60 	vmov.f32	s21, s1
 800cf0e:	eeb0 9a41 	vmov.f32	s18, s2
 800cf12:	eef0 9a61 	vmov.f32	s19, s3
 800cf16:	f000 f9d3 	bl	800d2c0 <__ieee754_hypot>
 800cf1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cf1e:	eef0 8a60 	vmov.f32	s17, s1
 800cf22:	f000 f9c1 	bl	800d2a8 <finite>
 800cf26:	b998      	cbnz	r0, 800cf50 <hypot+0x50>
 800cf28:	eeb0 0a4a 	vmov.f32	s0, s20
 800cf2c:	eef0 0a6a 	vmov.f32	s1, s21
 800cf30:	f000 f9ba 	bl	800d2a8 <finite>
 800cf34:	b160      	cbz	r0, 800cf50 <hypot+0x50>
 800cf36:	eeb0 0a49 	vmov.f32	s0, s18
 800cf3a:	eef0 0a69 	vmov.f32	s1, s19
 800cf3e:	f000 f9b3 	bl	800d2a8 <finite>
 800cf42:	b128      	cbz	r0, 800cf50 <hypot+0x50>
 800cf44:	f7fd ff64 	bl	800ae10 <__errno>
 800cf48:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800cf60 <hypot+0x60>
 800cf4c:	2322      	movs	r3, #34	@ 0x22
 800cf4e:	6003      	str	r3, [r0, #0]
 800cf50:	eeb0 0a48 	vmov.f32	s0, s16
 800cf54:	eef0 0a68 	vmov.f32	s1, s17
 800cf58:	ecbd 8b06 	vpop	{d8-d10}
 800cf5c:	bd08      	pop	{r3, pc}
 800cf5e:	bf00      	nop
 800cf60:	00000000 	.word	0x00000000
 800cf64:	7ff00000 	.word	0x7ff00000

0800cf68 <atan>:
 800cf68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	ec55 4b10 	vmov	r4, r5, d0
 800cf70:	4bbf      	ldr	r3, [pc, #764]	@ (800d270 <atan+0x308>)
 800cf72:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800cf76:	429e      	cmp	r6, r3
 800cf78:	46ab      	mov	fp, r5
 800cf7a:	d918      	bls.n	800cfae <atan+0x46>
 800cf7c:	4bbd      	ldr	r3, [pc, #756]	@ (800d274 <atan+0x30c>)
 800cf7e:	429e      	cmp	r6, r3
 800cf80:	d801      	bhi.n	800cf86 <atan+0x1e>
 800cf82:	d109      	bne.n	800cf98 <atan+0x30>
 800cf84:	b144      	cbz	r4, 800cf98 <atan+0x30>
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	f7f3 f99d 	bl	80002cc <__adddf3>
 800cf92:	4604      	mov	r4, r0
 800cf94:	460d      	mov	r5, r1
 800cf96:	e006      	b.n	800cfa6 <atan+0x3e>
 800cf98:	f1bb 0f00 	cmp.w	fp, #0
 800cf9c:	f340 812b 	ble.w	800d1f6 <atan+0x28e>
 800cfa0:	a597      	add	r5, pc, #604	@ (adr r5, 800d200 <atan+0x298>)
 800cfa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cfa6:	ec45 4b10 	vmov	d0, r4, r5
 800cfaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfae:	4bb2      	ldr	r3, [pc, #712]	@ (800d278 <atan+0x310>)
 800cfb0:	429e      	cmp	r6, r3
 800cfb2:	d813      	bhi.n	800cfdc <atan+0x74>
 800cfb4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cfb8:	429e      	cmp	r6, r3
 800cfba:	d80c      	bhi.n	800cfd6 <atan+0x6e>
 800cfbc:	a392      	add	r3, pc, #584	@ (adr r3, 800d208 <atan+0x2a0>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	f7f3 f981 	bl	80002cc <__adddf3>
 800cfca:	4bac      	ldr	r3, [pc, #688]	@ (800d27c <atan+0x314>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f7f3 fdc3 	bl	8000b58 <__aeabi_dcmpgt>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d1e7      	bne.n	800cfa6 <atan+0x3e>
 800cfd6:	f04f 3aff 	mov.w	sl, #4294967295
 800cfda:	e029      	b.n	800d030 <atan+0xc8>
 800cfdc:	f000 f95c 	bl	800d298 <fabs>
 800cfe0:	4ba7      	ldr	r3, [pc, #668]	@ (800d280 <atan+0x318>)
 800cfe2:	429e      	cmp	r6, r3
 800cfe4:	ec55 4b10 	vmov	r4, r5, d0
 800cfe8:	f200 80bc 	bhi.w	800d164 <atan+0x1fc>
 800cfec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800cff0:	429e      	cmp	r6, r3
 800cff2:	f200 809e 	bhi.w	800d132 <atan+0x1ca>
 800cff6:	4622      	mov	r2, r4
 800cff8:	462b      	mov	r3, r5
 800cffa:	4620      	mov	r0, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7f3 f965 	bl	80002cc <__adddf3>
 800d002:	4b9e      	ldr	r3, [pc, #632]	@ (800d27c <atan+0x314>)
 800d004:	2200      	movs	r2, #0
 800d006:	f7f3 f95f 	bl	80002c8 <__aeabi_dsub>
 800d00a:	2200      	movs	r2, #0
 800d00c:	4606      	mov	r6, r0
 800d00e:	460f      	mov	r7, r1
 800d010:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f958 	bl	80002cc <__adddf3>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4630      	mov	r0, r6
 800d022:	4639      	mov	r1, r7
 800d024:	f7f3 fc32 	bl	800088c <__aeabi_ddiv>
 800d028:	f04f 0a00 	mov.w	sl, #0
 800d02c:	4604      	mov	r4, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	4622      	mov	r2, r4
 800d032:	462b      	mov	r3, r5
 800d034:	4620      	mov	r0, r4
 800d036:	4629      	mov	r1, r5
 800d038:	f7f3 fafe 	bl	8000638 <__aeabi_dmul>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4680      	mov	r8, r0
 800d042:	4689      	mov	r9, r1
 800d044:	f7f3 faf8 	bl	8000638 <__aeabi_dmul>
 800d048:	a371      	add	r3, pc, #452	@ (adr r3, 800d210 <atan+0x2a8>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	4606      	mov	r6, r0
 800d050:	460f      	mov	r7, r1
 800d052:	f7f3 faf1 	bl	8000638 <__aeabi_dmul>
 800d056:	a370      	add	r3, pc, #448	@ (adr r3, 800d218 <atan+0x2b0>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f7f3 f936 	bl	80002cc <__adddf3>
 800d060:	4632      	mov	r2, r6
 800d062:	463b      	mov	r3, r7
 800d064:	f7f3 fae8 	bl	8000638 <__aeabi_dmul>
 800d068:	a36d      	add	r3, pc, #436	@ (adr r3, 800d220 <atan+0x2b8>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 f92d 	bl	80002cc <__adddf3>
 800d072:	4632      	mov	r2, r6
 800d074:	463b      	mov	r3, r7
 800d076:	f7f3 fadf 	bl	8000638 <__aeabi_dmul>
 800d07a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d228 <atan+0x2c0>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 f924 	bl	80002cc <__adddf3>
 800d084:	4632      	mov	r2, r6
 800d086:	463b      	mov	r3, r7
 800d088:	f7f3 fad6 	bl	8000638 <__aeabi_dmul>
 800d08c:	a368      	add	r3, pc, #416	@ (adr r3, 800d230 <atan+0x2c8>)
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f7f3 f91b 	bl	80002cc <__adddf3>
 800d096:	4632      	mov	r2, r6
 800d098:	463b      	mov	r3, r7
 800d09a:	f7f3 facd 	bl	8000638 <__aeabi_dmul>
 800d09e:	a366      	add	r3, pc, #408	@ (adr r3, 800d238 <atan+0x2d0>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	f7f3 f912 	bl	80002cc <__adddf3>
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	f7f3 fac4 	bl	8000638 <__aeabi_dmul>
 800d0b0:	a363      	add	r3, pc, #396	@ (adr r3, 800d240 <atan+0x2d8>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4689      	mov	r9, r1
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 fabb 	bl	8000638 <__aeabi_dmul>
 800d0c2:	a361      	add	r3, pc, #388	@ (adr r3, 800d248 <atan+0x2e0>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	f7f3 f8fe 	bl	80002c8 <__aeabi_dsub>
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	f7f3 fab2 	bl	8000638 <__aeabi_dmul>
 800d0d4:	a35e      	add	r3, pc, #376	@ (adr r3, 800d250 <atan+0x2e8>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	f7f3 f8f5 	bl	80002c8 <__aeabi_dsub>
 800d0de:	4632      	mov	r2, r6
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	f7f3 faa9 	bl	8000638 <__aeabi_dmul>
 800d0e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d258 <atan+0x2f0>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f7f3 f8ec 	bl	80002c8 <__aeabi_dsub>
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	463b      	mov	r3, r7
 800d0f4:	f7f3 faa0 	bl	8000638 <__aeabi_dmul>
 800d0f8:	a359      	add	r3, pc, #356	@ (adr r3, 800d260 <atan+0x2f8>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	f7f3 f8e3 	bl	80002c8 <__aeabi_dsub>
 800d102:	4632      	mov	r2, r6
 800d104:	463b      	mov	r3, r7
 800d106:	f7f3 fa97 	bl	8000638 <__aeabi_dmul>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4640      	mov	r0, r8
 800d110:	4649      	mov	r1, r9
 800d112:	f7f3 f8db 	bl	80002cc <__adddf3>
 800d116:	4622      	mov	r2, r4
 800d118:	462b      	mov	r3, r5
 800d11a:	f7f3 fa8d 	bl	8000638 <__aeabi_dmul>
 800d11e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	d148      	bne.n	800d1ba <atan+0x252>
 800d128:	4620      	mov	r0, r4
 800d12a:	4629      	mov	r1, r5
 800d12c:	f7f3 f8cc 	bl	80002c8 <__aeabi_dsub>
 800d130:	e72f      	b.n	800cf92 <atan+0x2a>
 800d132:	4b52      	ldr	r3, [pc, #328]	@ (800d27c <atan+0x314>)
 800d134:	2200      	movs	r2, #0
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	f7f3 f8c5 	bl	80002c8 <__aeabi_dsub>
 800d13e:	4b4f      	ldr	r3, [pc, #316]	@ (800d27c <atan+0x314>)
 800d140:	4606      	mov	r6, r0
 800d142:	460f      	mov	r7, r1
 800d144:	2200      	movs	r2, #0
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 f8bf 	bl	80002cc <__adddf3>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4630      	mov	r0, r6
 800d154:	4639      	mov	r1, r7
 800d156:	f7f3 fb99 	bl	800088c <__aeabi_ddiv>
 800d15a:	f04f 0a01 	mov.w	sl, #1
 800d15e:	4604      	mov	r4, r0
 800d160:	460d      	mov	r5, r1
 800d162:	e765      	b.n	800d030 <atan+0xc8>
 800d164:	4b47      	ldr	r3, [pc, #284]	@ (800d284 <atan+0x31c>)
 800d166:	429e      	cmp	r6, r3
 800d168:	d21c      	bcs.n	800d1a4 <atan+0x23c>
 800d16a:	4b47      	ldr	r3, [pc, #284]	@ (800d288 <atan+0x320>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	4620      	mov	r0, r4
 800d170:	4629      	mov	r1, r5
 800d172:	f7f3 f8a9 	bl	80002c8 <__aeabi_dsub>
 800d176:	4b44      	ldr	r3, [pc, #272]	@ (800d288 <atan+0x320>)
 800d178:	4606      	mov	r6, r0
 800d17a:	460f      	mov	r7, r1
 800d17c:	2200      	movs	r2, #0
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	f7f3 fa59 	bl	8000638 <__aeabi_dmul>
 800d186:	4b3d      	ldr	r3, [pc, #244]	@ (800d27c <atan+0x314>)
 800d188:	2200      	movs	r2, #0
 800d18a:	f7f3 f89f 	bl	80002cc <__adddf3>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	4630      	mov	r0, r6
 800d194:	4639      	mov	r1, r7
 800d196:	f7f3 fb79 	bl	800088c <__aeabi_ddiv>
 800d19a:	f04f 0a02 	mov.w	sl, #2
 800d19e:	4604      	mov	r4, r0
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	e745      	b.n	800d030 <atan+0xc8>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	4938      	ldr	r1, [pc, #224]	@ (800d28c <atan+0x324>)
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f7f3 fb6e 	bl	800088c <__aeabi_ddiv>
 800d1b0:	f04f 0a03 	mov.w	sl, #3
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	e73a      	b.n	800d030 <atan+0xc8>
 800d1ba:	4b35      	ldr	r3, [pc, #212]	@ (800d290 <atan+0x328>)
 800d1bc:	4e35      	ldr	r6, [pc, #212]	@ (800d294 <atan+0x32c>)
 800d1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	f7f3 f87f 	bl	80002c8 <__aeabi_dsub>
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	f7f3 f87b 	bl	80002c8 <__aeabi_dsub>
 800d1d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1de:	f7f3 f873 	bl	80002c8 <__aeabi_dsub>
 800d1e2:	f1bb 0f00 	cmp.w	fp, #0
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	f6bf aedc 	bge.w	800cfa6 <atan+0x3e>
 800d1ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1f2:	461d      	mov	r5, r3
 800d1f4:	e6d7      	b.n	800cfa6 <atan+0x3e>
 800d1f6:	a51c      	add	r5, pc, #112	@ (adr r5, 800d268 <atan+0x300>)
 800d1f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1fc:	e6d3      	b.n	800cfa6 <atan+0x3e>
 800d1fe:	bf00      	nop
 800d200:	54442d18 	.word	0x54442d18
 800d204:	3ff921fb 	.word	0x3ff921fb
 800d208:	8800759c 	.word	0x8800759c
 800d20c:	7e37e43c 	.word	0x7e37e43c
 800d210:	e322da11 	.word	0xe322da11
 800d214:	3f90ad3a 	.word	0x3f90ad3a
 800d218:	24760deb 	.word	0x24760deb
 800d21c:	3fa97b4b 	.word	0x3fa97b4b
 800d220:	a0d03d51 	.word	0xa0d03d51
 800d224:	3fb10d66 	.word	0x3fb10d66
 800d228:	c54c206e 	.word	0xc54c206e
 800d22c:	3fb745cd 	.word	0x3fb745cd
 800d230:	920083ff 	.word	0x920083ff
 800d234:	3fc24924 	.word	0x3fc24924
 800d238:	5555550d 	.word	0x5555550d
 800d23c:	3fd55555 	.word	0x3fd55555
 800d240:	2c6a6c2f 	.word	0x2c6a6c2f
 800d244:	bfa2b444 	.word	0xbfa2b444
 800d248:	52defd9a 	.word	0x52defd9a
 800d24c:	3fadde2d 	.word	0x3fadde2d
 800d250:	af749a6d 	.word	0xaf749a6d
 800d254:	3fb3b0f2 	.word	0x3fb3b0f2
 800d258:	fe231671 	.word	0xfe231671
 800d25c:	3fbc71c6 	.word	0x3fbc71c6
 800d260:	9998ebc4 	.word	0x9998ebc4
 800d264:	3fc99999 	.word	0x3fc99999
 800d268:	54442d18 	.word	0x54442d18
 800d26c:	bff921fb 	.word	0xbff921fb
 800d270:	440fffff 	.word	0x440fffff
 800d274:	7ff00000 	.word	0x7ff00000
 800d278:	3fdbffff 	.word	0x3fdbffff
 800d27c:	3ff00000 	.word	0x3ff00000
 800d280:	3ff2ffff 	.word	0x3ff2ffff
 800d284:	40038000 	.word	0x40038000
 800d288:	3ff80000 	.word	0x3ff80000
 800d28c:	bff00000 	.word	0xbff00000
 800d290:	08021140 	.word	0x08021140
 800d294:	08021160 	.word	0x08021160

0800d298 <fabs>:
 800d298:	ec51 0b10 	vmov	r0, r1, d0
 800d29c:	4602      	mov	r2, r0
 800d29e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d2a2:	ec43 2b10 	vmov	d0, r2, r3
 800d2a6:	4770      	bx	lr

0800d2a8 <finite>:
 800d2a8:	b082      	sub	sp, #8
 800d2aa:	ed8d 0b00 	vstr	d0, [sp]
 800d2ae:	9801      	ldr	r0, [sp, #4]
 800d2b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d2b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d2b8:	0fc0      	lsrs	r0, r0, #31
 800d2ba:	b002      	add	sp, #8
 800d2bc:	4770      	bx	lr
	...

0800d2c0 <__ieee754_hypot>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	ec51 0b10 	vmov	r0, r1, d0
 800d2c8:	ec53 2b11 	vmov	r2, r3, d1
 800d2cc:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800d2d0:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d2d4:	42a5      	cmp	r5, r4
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	da05      	bge.n	800d2e6 <__ieee754_hypot+0x26>
 800d2da:	462e      	mov	r6, r5
 800d2dc:	4625      	mov	r5, r4
 800d2de:	4634      	mov	r4, r6
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	1b2b      	subs	r3, r5, r4
 800d2e8:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4682      	mov	sl, r0
 800d2f0:	46ab      	mov	fp, r5
 800d2f2:	4616      	mov	r6, r2
 800d2f4:	4627      	mov	r7, r4
 800d2f6:	dd05      	ble.n	800d304 <__ieee754_hypot+0x44>
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	f7f2 ffe7 	bl	80002cc <__adddf3>
 800d2fe:	4682      	mov	sl, r0
 800d300:	468b      	mov	fp, r1
 800d302:	e016      	b.n	800d332 <__ieee754_hypot+0x72>
 800d304:	4b75      	ldr	r3, [pc, #468]	@ (800d4dc <__ieee754_hypot+0x21c>)
 800d306:	429d      	cmp	r5, r3
 800d308:	f340 8096 	ble.w	800d438 <__ieee754_hypot+0x178>
 800d30c:	4b74      	ldr	r3, [pc, #464]	@ (800d4e0 <__ieee754_hypot+0x220>)
 800d30e:	429d      	cmp	r5, r3
 800d310:	dd14      	ble.n	800d33c <__ieee754_hypot+0x7c>
 800d312:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d316:	4305      	orrs	r5, r0
 800d318:	d004      	beq.n	800d324 <__ieee754_hypot+0x64>
 800d31a:	4623      	mov	r3, r4
 800d31c:	f7f2 ffd6 	bl	80002cc <__adddf3>
 800d320:	4682      	mov	sl, r0
 800d322:	468b      	mov	fp, r1
 800d324:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800d328:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800d32c:	4334      	orrs	r4, r6
 800d32e:	f000 80d2 	beq.w	800d4d6 <__ieee754_hypot+0x216>
 800d332:	ec4b ab10 	vmov	d0, sl, fp
 800d336:	b007      	add	sp, #28
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800d340:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800d344:	46ab      	mov	fp, r5
 800d346:	4627      	mov	r7, r4
 800d348:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	4b65      	ldr	r3, [pc, #404]	@ (800d4e4 <__ieee754_hypot+0x224>)
 800d350:	429c      	cmp	r4, r3
 800d352:	dc19      	bgt.n	800d388 <__ieee754_hypot+0xc8>
 800d354:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d358:	da70      	bge.n	800d43c <__ieee754_hypot+0x17c>
 800d35a:	4633      	mov	r3, r6
 800d35c:	4323      	orrs	r3, r4
 800d35e:	d0e8      	beq.n	800d332 <__ieee754_hypot+0x72>
 800d360:	4b61      	ldr	r3, [pc, #388]	@ (800d4e8 <__ieee754_hypot+0x228>)
 800d362:	2200      	movs	r2, #0
 800d364:	4630      	mov	r0, r6
 800d366:	4639      	mov	r1, r7
 800d368:	f7f3 f966 	bl	8000638 <__aeabi_dmul>
 800d36c:	4b5e      	ldr	r3, [pc, #376]	@ (800d4e8 <__ieee754_hypot+0x228>)
 800d36e:	4606      	mov	r6, r0
 800d370:	460f      	mov	r7, r1
 800d372:	4650      	mov	r0, sl
 800d374:	4659      	mov	r1, fp
 800d376:	2200      	movs	r2, #0
 800d378:	f7f3 f95e 	bl	8000638 <__aeabi_dmul>
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800d382:	4682      	mov	sl, r0
 800d384:	468b      	mov	fp, r1
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	4632      	mov	r2, r6
 800d38a:	463b      	mov	r3, r7
 800d38c:	4650      	mov	r0, sl
 800d38e:	4659      	mov	r1, fp
 800d390:	f7f2 ff9a 	bl	80002c8 <__aeabi_dsub>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4680      	mov	r8, r0
 800d39a:	4689      	mov	r9, r1
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f3 fbbc 	bl	8000b1c <__aeabi_dcmplt>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d053      	beq.n	800d452 <__ieee754_hypot+0x192>
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4614      	mov	r4, r2
 800d3b2:	f7f3 f941 	bl	8000638 <__aeabi_dmul>
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3bc:	463b      	mov	r3, r7
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d3c4:	f7f3 f938 	bl	8000638 <__aeabi_dmul>
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	4650      	mov	r0, sl
 800d3d2:	4659      	mov	r1, fp
 800d3d4:	f7f2 ff7a 	bl	80002cc <__adddf3>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4680      	mov	r8, r0
 800d3dc:	4689      	mov	r9, r1
 800d3de:	462b      	mov	r3, r5
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f7f2 ff70 	bl	80002c8 <__aeabi_dsub>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	f7f3 f922 	bl	8000638 <__aeabi_dmul>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f2 ff64 	bl	80002c8 <__aeabi_dsub>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d408:	f7f2 ff5e 	bl	80002c8 <__aeabi_dsub>
 800d40c:	ec41 0b10 	vmov	d0, r0, r1
 800d410:	f000 f86c 	bl	800d4ec <__ieee754_sqrt>
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	ec5b ab10 	vmov	sl, fp, d0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d089      	beq.n	800d332 <__ieee754_hypot+0x72>
 800d41e:	051b      	lsls	r3, r3, #20
 800d420:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d424:	2000      	movs	r0, #0
 800d426:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4650      	mov	r0, sl
 800d430:	4659      	mov	r1, fp
 800d432:	f7f3 f901 	bl	8000638 <__aeabi_dmul>
 800d436:	e762      	b.n	800d2fe <__ieee754_hypot+0x3e>
 800d438:	2300      	movs	r3, #0
 800d43a:	e787      	b.n	800d34c <__ieee754_hypot+0x8c>
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800d442:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800d446:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	46ab      	mov	fp, r5
 800d44e:	4627      	mov	r7, r4
 800d450:	e79a      	b.n	800d388 <__ieee754_hypot+0xc8>
 800d452:	4623      	mov	r3, r4
 800d454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800d462:	4614      	mov	r4, r2
 800d464:	461d      	mov	r5, r3
 800d466:	f7f3 f8e7 	bl	8000638 <__aeabi_dmul>
 800d46a:	4642      	mov	r2, r8
 800d46c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d470:	464b      	mov	r3, r9
 800d472:	4640      	mov	r0, r8
 800d474:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800d478:	f7f3 f8de 	bl	8000638 <__aeabi_dmul>
 800d47c:	4652      	mov	r2, sl
 800d47e:	465b      	mov	r3, fp
 800d480:	4680      	mov	r8, r0
 800d482:	4689      	mov	r9, r1
 800d484:	4650      	mov	r0, sl
 800d486:	4659      	mov	r1, fp
 800d488:	f7f2 ff20 	bl	80002cc <__adddf3>
 800d48c:	4622      	mov	r2, r4
 800d48e:	462b      	mov	r3, r5
 800d490:	f7f2 ff1a 	bl	80002c8 <__aeabi_dsub>
 800d494:	4632      	mov	r2, r6
 800d496:	463b      	mov	r3, r7
 800d498:	f7f3 f8ce 	bl	8000638 <__aeabi_dmul>
 800d49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4a0:	4682      	mov	sl, r0
 800d4a2:	468b      	mov	fp, r1
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	f7f2 ff0e 	bl	80002c8 <__aeabi_dsub>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	f7f3 f8c2 	bl	8000638 <__aeabi_dmul>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4650      	mov	r0, sl
 800d4ba:	4659      	mov	r1, fp
 800d4bc:	f7f2 ff06 	bl	80002cc <__adddf3>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	4649      	mov	r1, r9
 800d4c8:	f7f2 fefe 	bl	80002c8 <__aeabi_dsub>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4d4:	e798      	b.n	800d408 <__ieee754_hypot+0x148>
 800d4d6:	46b2      	mov	sl, r6
 800d4d8:	46bb      	mov	fp, r7
 800d4da:	e72a      	b.n	800d332 <__ieee754_hypot+0x72>
 800d4dc:	5f300000 	.word	0x5f300000
 800d4e0:	7fefffff 	.word	0x7fefffff
 800d4e4:	20afffff 	.word	0x20afffff
 800d4e8:	7fd00000 	.word	0x7fd00000

0800d4ec <__ieee754_sqrt>:
 800d4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	4a68      	ldr	r2, [pc, #416]	@ (800d694 <__ieee754_sqrt+0x1a8>)
 800d4f2:	ec55 4b10 	vmov	r4, r5, d0
 800d4f6:	43aa      	bics	r2, r5
 800d4f8:	462b      	mov	r3, r5
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	d110      	bne.n	800d520 <__ieee754_sqrt+0x34>
 800d4fe:	4622      	mov	r2, r4
 800d500:	4620      	mov	r0, r4
 800d502:	4629      	mov	r1, r5
 800d504:	f7f3 f898 	bl	8000638 <__aeabi_dmul>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f2 fedc 	bl	80002cc <__adddf3>
 800d514:	4604      	mov	r4, r0
 800d516:	460d      	mov	r5, r1
 800d518:	ec45 4b10 	vmov	d0, r4, r5
 800d51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d520:	2d00      	cmp	r5, #0
 800d522:	dc0e      	bgt.n	800d542 <__ieee754_sqrt+0x56>
 800d524:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d528:	4322      	orrs	r2, r4
 800d52a:	d0f5      	beq.n	800d518 <__ieee754_sqrt+0x2c>
 800d52c:	b19d      	cbz	r5, 800d556 <__ieee754_sqrt+0x6a>
 800d52e:	4622      	mov	r2, r4
 800d530:	4620      	mov	r0, r4
 800d532:	4629      	mov	r1, r5
 800d534:	f7f2 fec8 	bl	80002c8 <__aeabi_dsub>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	f7f3 f9a6 	bl	800088c <__aeabi_ddiv>
 800d540:	e7e8      	b.n	800d514 <__ieee754_sqrt+0x28>
 800d542:	152a      	asrs	r2, r5, #20
 800d544:	d115      	bne.n	800d572 <__ieee754_sqrt+0x86>
 800d546:	2000      	movs	r0, #0
 800d548:	e009      	b.n	800d55e <__ieee754_sqrt+0x72>
 800d54a:	0acb      	lsrs	r3, r1, #11
 800d54c:	3a15      	subs	r2, #21
 800d54e:	0549      	lsls	r1, r1, #21
 800d550:	2b00      	cmp	r3, #0
 800d552:	d0fa      	beq.n	800d54a <__ieee754_sqrt+0x5e>
 800d554:	e7f7      	b.n	800d546 <__ieee754_sqrt+0x5a>
 800d556:	462a      	mov	r2, r5
 800d558:	e7fa      	b.n	800d550 <__ieee754_sqrt+0x64>
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	3001      	adds	r0, #1
 800d55e:	02dc      	lsls	r4, r3, #11
 800d560:	d5fb      	bpl.n	800d55a <__ieee754_sqrt+0x6e>
 800d562:	1e44      	subs	r4, r0, #1
 800d564:	1b12      	subs	r2, r2, r4
 800d566:	f1c0 0420 	rsb	r4, r0, #32
 800d56a:	fa21 f404 	lsr.w	r4, r1, r4
 800d56e:	4323      	orrs	r3, r4
 800d570:	4081      	lsls	r1, r0
 800d572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d576:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d57a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d57e:	07d2      	lsls	r2, r2, #31
 800d580:	bf5c      	itt	pl
 800d582:	005b      	lslpl	r3, r3, #1
 800d584:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d588:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d58c:	bf58      	it	pl
 800d58e:	0049      	lslpl	r1, r1, #1
 800d590:	2600      	movs	r6, #0
 800d592:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d596:	106d      	asrs	r5, r5, #1
 800d598:	0049      	lsls	r1, r1, #1
 800d59a:	2016      	movs	r0, #22
 800d59c:	4632      	mov	r2, r6
 800d59e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d5a2:	1917      	adds	r7, r2, r4
 800d5a4:	429f      	cmp	r7, r3
 800d5a6:	bfde      	ittt	le
 800d5a8:	193a      	addle	r2, r7, r4
 800d5aa:	1bdb      	suble	r3, r3, r7
 800d5ac:	1936      	addle	r6, r6, r4
 800d5ae:	0fcf      	lsrs	r7, r1, #31
 800d5b0:	3801      	subs	r0, #1
 800d5b2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d5b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d5be:	d1f0      	bne.n	800d5a2 <__ieee754_sqrt+0xb6>
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	2720      	movs	r7, #32
 800d5c4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	eb00 0e0c 	add.w	lr, r0, ip
 800d5ce:	db02      	blt.n	800d5d6 <__ieee754_sqrt+0xea>
 800d5d0:	d113      	bne.n	800d5fa <__ieee754_sqrt+0x10e>
 800d5d2:	458e      	cmp	lr, r1
 800d5d4:	d811      	bhi.n	800d5fa <__ieee754_sqrt+0x10e>
 800d5d6:	f1be 0f00 	cmp.w	lr, #0
 800d5da:	eb0e 000c 	add.w	r0, lr, ip
 800d5de:	da42      	bge.n	800d666 <__ieee754_sqrt+0x17a>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	db40      	blt.n	800d666 <__ieee754_sqrt+0x17a>
 800d5e4:	f102 0801 	add.w	r8, r2, #1
 800d5e8:	1a9b      	subs	r3, r3, r2
 800d5ea:	458e      	cmp	lr, r1
 800d5ec:	bf88      	it	hi
 800d5ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d5f2:	eba1 010e 	sub.w	r1, r1, lr
 800d5f6:	4464      	add	r4, ip
 800d5f8:	4642      	mov	r2, r8
 800d5fa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d5fe:	3f01      	subs	r7, #1
 800d600:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d604:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d608:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d60c:	d1dc      	bne.n	800d5c8 <__ieee754_sqrt+0xdc>
 800d60e:	4319      	orrs	r1, r3
 800d610:	d01b      	beq.n	800d64a <__ieee754_sqrt+0x15e>
 800d612:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d698 <__ieee754_sqrt+0x1ac>
 800d616:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d69c <__ieee754_sqrt+0x1b0>
 800d61a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d61e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d622:	f7f2 fe51 	bl	80002c8 <__aeabi_dsub>
 800d626:	e9da 8900 	ldrd	r8, r9, [sl]
 800d62a:	4602      	mov	r2, r0
 800d62c:	460b      	mov	r3, r1
 800d62e:	4640      	mov	r0, r8
 800d630:	4649      	mov	r1, r9
 800d632:	f7f3 fa7d 	bl	8000b30 <__aeabi_dcmple>
 800d636:	b140      	cbz	r0, 800d64a <__ieee754_sqrt+0x15e>
 800d638:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d63c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d640:	e9db 2300 	ldrd	r2, r3, [fp]
 800d644:	d111      	bne.n	800d66a <__ieee754_sqrt+0x17e>
 800d646:	3601      	adds	r6, #1
 800d648:	463c      	mov	r4, r7
 800d64a:	1072      	asrs	r2, r6, #1
 800d64c:	0863      	lsrs	r3, r4, #1
 800d64e:	07f1      	lsls	r1, r6, #31
 800d650:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d654:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d658:	bf48      	it	mi
 800d65a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d65e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d662:	4618      	mov	r0, r3
 800d664:	e756      	b.n	800d514 <__ieee754_sqrt+0x28>
 800d666:	4690      	mov	r8, r2
 800d668:	e7be      	b.n	800d5e8 <__ieee754_sqrt+0xfc>
 800d66a:	f7f2 fe2f 	bl	80002cc <__adddf3>
 800d66e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4640      	mov	r0, r8
 800d678:	4649      	mov	r1, r9
 800d67a:	f7f3 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800d67e:	b120      	cbz	r0, 800d68a <__ieee754_sqrt+0x19e>
 800d680:	1ca0      	adds	r0, r4, #2
 800d682:	bf08      	it	eq
 800d684:	3601      	addeq	r6, #1
 800d686:	3402      	adds	r4, #2
 800d688:	e7df      	b.n	800d64a <__ieee754_sqrt+0x15e>
 800d68a:	1c63      	adds	r3, r4, #1
 800d68c:	f023 0401 	bic.w	r4, r3, #1
 800d690:	e7db      	b.n	800d64a <__ieee754_sqrt+0x15e>
 800d692:	bf00      	nop
 800d694:	7ff00000 	.word	0x7ff00000
 800d698:	200001e0 	.word	0x200001e0
 800d69c:	200001d8 	.word	0x200001d8

0800d6a0 <_init>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	bf00      	nop
 800d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a6:	bc08      	pop	{r3}
 800d6a8:	469e      	mov	lr, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_fini>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr
