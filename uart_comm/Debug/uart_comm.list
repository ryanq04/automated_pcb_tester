
uart_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003efc  08003efc  00004efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f14  08003f14  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f14  08003f14  00004f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f1c  08003f1c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f20  08003f20  00004f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  2000000c  08003f30  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08003f30  00005564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d22c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b9  00000000  00000000  00012268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00014328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000820  00000000  00000000  00014dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e6e  00000000  00000000  000155e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d64f  00000000  00000000  0003644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7391  00000000  00000000  00043a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ae2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be0  00000000  00000000  0010ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0010da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ee4 	.word	0x08003ee4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ee4 	.word	0x08003ee4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb2a 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8dc 	bl	80006bc <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000504:	f000 f8ac 	bl	8000660 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000508:	f000 f878 	bl	80005fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_data_arr, sizeof(rx_data_arr));
 800050c:	220c      	movs	r2, #12
 800050e:	4903      	ldr	r1, [pc, #12]	@ (800051c <main+0x28>)
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <main+0x2c>)
 8000512:	f002 fa46 	bl	80029a2 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x22>
 800051a:	bf00      	nop
 800051c:	20000554 	.word	0x20000554
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	@ 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fca9 	bl	8003e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <SystemClock_Config+0xd4>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000584:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000598:	23a8      	movs	r3, #168	@ 0xa8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fe7f 	bl	80022b0 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 f966 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2105      	movs	r1, #5
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fff4 	bl	80015c8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 f94f 	bl	8000888 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000600:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000602:	4a16      	ldr	r2, [pc, #88]	@ (800065c <MX_USART3_UART_Init+0x60>)
 8000604:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000632:	4809      	ldr	r0, [pc, #36]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000634:	f002 f8da 	bl	80027ec <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f923 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68da      	ldr	r2, [r3, #12]
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <MX_USART3_UART_Init+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f042 0220 	orr.w	r2, r2, #32
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40004800 	.word	0x40004800

08000660 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000666:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800066a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800066e:	2206      	movs	r2, #6
 8000670:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000674:	2202      	movs	r2, #2
 8000676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000680:	2202      	movs	r2, #2
 8000682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000686:	2201      	movs	r2, #1
 8000688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000698:	2201      	movs	r2, #1
 800069a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a4:	f000 fe55 	bl	8001352 <HAL_PCD_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f8eb 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000070 	.word	0x20000070

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000808 <MX_GPIO_Init+0x14c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a4b      	ldr	r2, [pc, #300]	@ (8000808 <MX_GPIO_Init+0x14c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <MX_GPIO_Init+0x14c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <MX_GPIO_Init+0x14c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <MX_GPIO_Init+0x14c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b42      	ldr	r3, [pc, #264]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a3d      	ldr	r2, [pc, #244]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b3b      	ldr	r3, [pc, #236]	@ (8000808 <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b37      	ldr	r3, [pc, #220]	@ (8000808 <MX_GPIO_Init+0x14c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a36      	ldr	r2, [pc, #216]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a2f      	ldr	r2, [pc, #188]	@ (8000808 <MX_GPIO_Init+0x14c>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a28      	ldr	r2, [pc, #160]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000780:	4822      	ldr	r0, [pc, #136]	@ (800080c <MX_GPIO_Init+0x150>)
 8000782:	f000 fdb3 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	@ 0x40
 800078a:	4821      	ldr	r0, [pc, #132]	@ (8000810 <MX_GPIO_Init+0x154>)
 800078c:	f000 fdae 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	481b      	ldr	r0, [pc, #108]	@ (8000814 <MX_GPIO_Init+0x158>)
 80007a8:	f000 fc0c 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <MX_GPIO_Init+0x150>)
 80007c6:	f000 fbfd 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0x154>)
 80007e2:	f000 fbef 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_GPIO_Init+0x154>)
 80007fa:	f000 fbe3 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	@ 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800
 8000814:	40020800 	.word	0x40020800

08000818 <send_floats>:

}


void send_floats(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

	 uint8_t byte_array[12];  // Buffer to send 3 floats (4 bytes each)

	 memcpy(byte_array, rx_data_arr, sizeof(byte_array));
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <send_floats+0x28>)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	ca07      	ldmia	r2, {r0, r1, r2}
 8000824:	e883 0007 	stmia.w	r3, {r0, r1, r2}


    // Send the byte array over UART
    HAL_UART_Transmit(&huart3, byte_array, sizeof(byte_array), HAL_MAX_DELAY);
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082e:	220c      	movs	r2, #12
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <send_floats+0x2c>)
 8000832:	f002 f82b 	bl	800288c <HAL_UART_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000554 	.word	0x20000554
 8000844:	20000028 	.word	0x20000028

08000848 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  if(huart->Instance == USART3){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_UART_RxCpltCallback+0x30>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10a      	bne.n	8000870 <HAL_UART_RxCpltCallback+0x28>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // toggle LED for debug
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <HAL_UART_RxCpltCallback+0x34>)
 800085e:	f000 fd5e 	bl	800131e <HAL_GPIO_TogglePin>

	  //led_ex();
	  send_floats();
 8000862:	f7ff ffd9 	bl	8000818 <send_floats>

	  HAL_UART_Receive_IT(&huart3, rx_data_arr, sizeof(rx_data_arr));
 8000866:	220c      	movs	r2, #12
 8000868:	4905      	ldr	r1, [pc, #20]	@ (8000880 <HAL_UART_RxCpltCallback+0x38>)
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <HAL_UART_RxCpltCallback+0x3c>)
 800086c:	f002 f899 	bl	80029a2 <HAL_UART_Receive_IT>

  }
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004800 	.word	0x40004800
 800087c:	40020400 	.word	0x40020400
 8000880:	20000554 	.word	0x20000554
 8000884:	20000028 	.word	0x20000028

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1d      	ldr	r2, [pc, #116]	@ (8000978 <HAL_UART_MspInit+0x94>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d134      	bne.n	8000970 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <HAL_UART_MspInit+0x98>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a1b      	ldr	r2, [pc, #108]	@ (800097c <HAL_UART_MspInit+0x98>)
 8000910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <HAL_UART_MspInit+0x98>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a14      	ldr	r2, [pc, #80]	@ (800097c <HAL_UART_MspInit+0x98>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_UART_MspInit+0x98>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800093e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000950:	2307      	movs	r3, #7
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	@ (8000980 <HAL_UART_MspInit+0x9c>)
 800095c:	f000 fb32 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2027      	movs	r0, #39	@ 0x27
 8000966:	f000 fa64 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800096a:	2027      	movs	r0, #39	@ 0x27
 800096c:	f000 fa7d 	bl	8000e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004800 	.word	0x40004800
 800097c:	40023800 	.word	0x40023800
 8000980:	40020c00 	.word	0x40020c00

08000984 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0a0      	sub	sp, #128	@ 0x80
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	225c      	movs	r2, #92	@ 0x5c
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fa70 	bl	8003e8a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009b2:	d14e      	bne.n	8000a52 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009ba:	2300      	movs	r3, #0
 80009bc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 ff1a 	bl	80017fc <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80009ce:	f7ff ff5b 	bl	8000888 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a20      	ldr	r2, [pc, #128]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ee:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a00:	230a      	movs	r3, #10
 8000a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <HAL_PCD_MspInit+0xdc>)
 8000a0c:	f000 fada 	bl	8000fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a22:	4619      	mov	r1, r3
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <HAL_PCD_MspInit+0xdc>)
 8000a26:	f000 facd 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	6353      	str	r3, [r2, #52]	@ 0x34
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_PCD_MspInit+0xd8>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3780      	adds	r7, #128	@ 0x80
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <NMI_Handler+0x4>

08000a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aba:	f000 f89b 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <USART3_IRQHandler+0x10>)
 8000aca:	f001 ff8f 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000028 	.word	0x20000028

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f003 f9b7 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fce1 	bl	80004f4 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b40:	08003f24 	.word	0x08003f24
  ldr r2, =_sbss
 8000b44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b48:	20000564 	.word	0x20000564

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f94f 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe86 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f967 	bl	8000e86 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 f92f 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000560 	.word	0x20000560

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000560 	.word	0x20000560

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff3e 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff8e 	bl	8000d70 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff31 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff feb6 	bl	8000c1c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d008      	beq.n	8000ed0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e052      	b.n	8000f76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0216 	bic.w	r2, r2, #22
 8000ede:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <HAL_DMA_Abort+0x62>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0208 	bic.w	r2, r2, #8
 8000f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f20:	e013      	b.n	8000f4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f22:	f7ff fe7b 	bl	8000c1c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d90c      	bls.n	8000f4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2220      	movs	r2, #32
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e015      	b.n	8000f76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e4      	bne.n	8000f22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f5c:	223f      	movs	r2, #63	@ 0x3f
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d004      	beq.n	8000f9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00c      	b.n	8000fb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001330:	887a      	ldrh	r2, [r7, #2]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43d9      	mvns	r1, r3
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	400b      	ands	r3, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af02      	add	r7, sp, #8
 8001358:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e108      	b.n	8001576 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fb00 	bl	8000984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001392:	d102      	bne.n	800139a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fade 	bl	8003960 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7c1a      	ldrb	r2, [r3, #16]
 80013ac:	f88d 2000 	strb.w	r2, [sp]
 80013b0:	3304      	adds	r3, #4
 80013b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b4:	f002 fa70 	bl	8003898 <USB_CoreInit>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2202      	movs	r2, #2
 80013c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0d5      	b.n	8001576 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fad6 	bl	8003982 <USB_SetCurrentMode>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0c6      	b.n	8001576 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e04a      	b.n	8001484 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3315      	adds	r3, #21
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3314      	adds	r3, #20
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b298      	uxth	r0, r3
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	332e      	adds	r3, #46	@ 0x2e
 800142a:	4602      	mov	r2, r0
 800142c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3318      	adds	r3, #24
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	331c      	adds	r3, #28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3320      	adds	r3, #32
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3324      	adds	r3, #36	@ 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	791b      	ldrb	r3, [r3, #4]
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3af      	bcc.n	80013ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e044      	b.n	800151e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3b5      	bcc.n	8001494 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7c1a      	ldrb	r2, [r3, #16]
 8001530:	f88d 2000 	strb.w	r2, [sp]
 8001534:	3304      	adds	r3, #4
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	f002 fa70 	bl	8003a1c <USB_DevInit>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e013      	b.n	8001576 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7b1b      	ldrb	r3, [r3, #12]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d102      	bne.n	800156a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f80a 	bl	800157e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc2b 	bl	8003dca <USB_DevDisconnect>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	f043 0303 	orr.w	r3, r3, #3
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fab0 	bl	8000c1c <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff faac 	bl	8000c1c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174e:	f000 fb7f 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	@ (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fa10 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08003efc 	.word	0x08003efc
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000

080017ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b0:	f7ff fff0 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	0a9b      	lsrs	r3, r3, #10
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4903      	ldr	r1, [pc, #12]	@ (80017d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	08003f0c 	.word	0x08003f0c

080017d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d8:	f7ff ffdc 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	0b5b      	lsrs	r3, r3, #13
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	4903      	ldr	r1, [pc, #12]	@ (80017f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	08003f0c 	.word	0x08003f0c

080017fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001834:	4b6f      	ldr	r3, [pc, #444]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001842:	496c      	ldr	r1, [pc, #432]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001844:	4313      	orrs	r3, r2
 8001846:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001852:	2301      	movs	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d010      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001862:	4b64      	ldr	r3, [pc, #400]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001868:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001870:	4960      	ldr	r1, [pc, #384]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001880:	2301      	movs	r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001890:	4b58      	ldr	r3, [pc, #352]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4955      	ldr	r1, [pc, #340]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018ae:	d101      	bne.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d017      	beq.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018cc:	4b49      	ldr	r3, [pc, #292]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018da:	4946      	ldr	r1, [pc, #280]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018ea:	d101      	bne.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 808a 	beq.w	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a38      	ldr	r2, [pc, #224]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a33      	ldr	r2, [pc, #204]	@ (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001930:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001932:	f7ff f973 	bl	8000c1c <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff f96f 	bl	8000c1c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e278      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800194c:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001960:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02f      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	429a      	cmp	r2, r3
 8001974:	d028      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800197e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d114      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f93d 	bl	8000c1c <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f939 	bl	8000c1c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e240      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019d4:	d114      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80019e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ea:	4902      	ldr	r1, [pc, #8]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
 80019f0:	e00c      	b.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42470e40 	.word	0x42470e40
 8001a00:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001a0a:	6093      	str	r3, [r2, #8]
 8001a0c:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	4944      	ldr	r1, [pc, #272]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001a30:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a32:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a40:	4b3a      	ldr	r3, [pc, #232]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a70:	492e      	ldr	r1, [pc, #184]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d011      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a84:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a8a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	4926      	ldr	r1, [pc, #152]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00a      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	491a      	ldr	r1, [pc, #104]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d011      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001adc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae4:	4911      	ldr	r1, [pc, #68]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001af4:	d101      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001af6:	2301      	movs	r3, #1
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b08:	f040 80ff 	bne.w	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b12:	f7ff f883 	bl	8000c1c <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b18:	e00e      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b1a:	f7ff f87f 	bl	8000c1c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d907      	bls.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e188      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	424711e0 	.word	0x424711e0
 8001b34:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b38:	4b7e      	ldr	r3, [pc, #504]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ea      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d028      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d124      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b6c:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b72:	0c1b      	lsrs	r3, r3, #16
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b84:	0e1b      	lsrs	r3, r3, #24
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	431a      	orrs	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	4961      	ldr	r1, [pc, #388]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bca:	d00a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d035      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be0:	d130      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001be2:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bfa:	0f1b      	lsrs	r3, r3, #28
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	3b01      	subs	r3, #1
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	071b      	lsls	r3, r3, #28
 8001c24:	4943      	ldr	r1, [pc, #268]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c2c:	4b41      	ldr	r3, [pc, #260]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c32:	f023 021f 	bic.w	r2, r3, #31
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	493d      	ldr	r1, [pc, #244]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d029      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c58:	d124      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c72:	0f1b      	lsrs	r3, r3, #28
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	071b      	lsls	r3, r3, #28
 8001c9c:	4925      	ldr	r1, [pc, #148]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d016      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	4917      	ldr	r1, [pc, #92]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe ff9a 	bl	8000c1c <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cec:	f7fe ff96 	bl	8000c1c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e09f      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 8095 	bne.w	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d18:	f7fe ff80 	bl	8000c1c <HAL_GetTick>
 8001d1c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d20:	f7fe ff7c 	bl	8000c1c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e085      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	42470068 	.word	0x42470068
 8001d3c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d40:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d4c:	d0e8      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d127      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d76:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	431a      	orrs	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4928      	ldr	r1, [pc, #160]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01d      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dda:	d118      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	0e1b      	lsrs	r3, r3, #24
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	019b      	lsls	r3, r3, #6
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	4910      	ldr	r1, [pc, #64]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e14:	f7fe ff02 	bl	8000c1c <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e1c:	f7fe fefe 	bl	8000c1c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e007      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e3a:	d1ef      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3730      	adds	r7, #48	@ 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470070 	.word	0x42470070

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b0ae      	sub	sp, #184	@ 0xb8
 8001e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e76:	4bcb      	ldr	r3, [pc, #812]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	f200 8206 	bhi.w	8002290 <HAL_RCC_GetSysClockFreq+0x440>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001ec1 	.word	0x08001ec1
 8001e90:	08002291 	.word	0x08002291
 8001e94:	08002291 	.word	0x08002291
 8001e98:	08002291 	.word	0x08002291
 8001e9c:	08001ec9 	.word	0x08001ec9
 8001ea0:	08002291 	.word	0x08002291
 8001ea4:	08002291 	.word	0x08002291
 8001ea8:	08002291 	.word	0x08002291
 8001eac:	08001ed1 	.word	0x08001ed1
 8001eb0:	08002291 	.word	0x08002291
 8001eb4:	08002291 	.word	0x08002291
 8001eb8:	08002291 	.word	0x08002291
 8001ebc:	080020c1 	.word	0x080020c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4bb9      	ldr	r3, [pc, #740]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ec6:	e1e7      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ec8:	4bb8      	ldr	r3, [pc, #736]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ece:	e1e3      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed0:	4bb4      	ldr	r3, [pc, #720]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001edc:	4bb1      	ldr	r3, [pc, #708]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d071      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee8:	4bae      	ldr	r3, [pc, #696]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ef4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f0e:	4622      	mov	r2, r4
 8001f10:	462b      	mov	r3, r5
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4621      	mov	r1, r4
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f40:	4649      	mov	r1, r9
 8001f42:	018b      	lsls	r3, r1, #6
 8001f44:	4641      	mov	r1, r8
 8001f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4a:	4641      	mov	r1, r8
 8001f4c:	018a      	lsls	r2, r1, #6
 8001f4e:	4641      	mov	r1, r8
 8001f50:	1a51      	subs	r1, r2, r1
 8001f52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f54:	4649      	mov	r1, r9
 8001f56:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f68:	4649      	mov	r1, r9
 8001f6a:	00cb      	lsls	r3, r1, #3
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f72:	4641      	mov	r1, r8
 8001f74:	00ca      	lsls	r2, r1, #3
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	189b      	adds	r3, r3, r2
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f82:	462b      	mov	r3, r5
 8001f84:	460a      	mov	r2, r1
 8001f86:	eb42 0303 	adc.w	r3, r2, r3
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f98:	4629      	mov	r1, r5
 8001f9a:	024b      	lsls	r3, r1, #9
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	024a      	lsls	r2, r1, #9
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fbc:	f7fe f922 	bl	8000204 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fca:	e067      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fcc:	4b75      	ldr	r3, [pc, #468]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fee:	4622      	mov	r2, r4
 8001ff0:	462b      	mov	r3, r5
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	0159      	lsls	r1, r3, #5
 8001ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002000:	0150      	lsls	r0, r2, #5
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4621      	mov	r1, r4
 8002008:	1a51      	subs	r1, r2, r1
 800200a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800200c:	4629      	mov	r1, r5
 800200e:	eb63 0301 	sbc.w	r3, r3, r1
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002020:	4649      	mov	r1, r9
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	4641      	mov	r1, r8
 8002026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202a:	4641      	mov	r1, r8
 800202c:	018a      	lsls	r2, r1, #6
 800202e:	4641      	mov	r1, r8
 8002030:	ebb2 0a01 	subs.w	sl, r2, r1
 8002034:	4649      	mov	r1, r9
 8002036:	eb63 0b01 	sbc.w	fp, r3, r1
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002046:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800204a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800204e:	4692      	mov	sl, r2
 8002050:	469b      	mov	fp, r3
 8002052:	4623      	mov	r3, r4
 8002054:	eb1a 0303 	adds.w	r3, sl, r3
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	462b      	mov	r3, r5
 800205c:	eb4b 0303 	adc.w	r3, fp, r3
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800206e:	4629      	mov	r1, r5
 8002070:	028b      	lsls	r3, r1, #10
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002078:	4621      	mov	r1, r4
 800207a:	028a      	lsls	r2, r1, #10
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002084:	2200      	movs	r2, #0
 8002086:	673b      	str	r3, [r7, #112]	@ 0x70
 8002088:	677a      	str	r2, [r7, #116]	@ 0x74
 800208a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800208e:	f7fe f8b9 	bl	8000204 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4613      	mov	r3, r2
 8002098:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800209c:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80020ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020be:	e0eb      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020cc:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d06b      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	2200      	movs	r2, #0
 80020e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80020ec:	2300      	movs	r3, #0
 80020ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80020f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020f4:	4622      	mov	r2, r4
 80020f6:	462b      	mov	r3, r5
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	0159      	lsls	r1, r3, #5
 8002102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002106:	0150      	lsls	r0, r2, #5
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4621      	mov	r1, r4
 800210e:	1a51      	subs	r1, r2, r1
 8002110:	61b9      	str	r1, [r7, #24]
 8002112:	4629      	mov	r1, r5
 8002114:	eb63 0301 	sbc.w	r3, r3, r1
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002126:	4659      	mov	r1, fp
 8002128:	018b      	lsls	r3, r1, #6
 800212a:	4651      	mov	r1, sl
 800212c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002130:	4651      	mov	r1, sl
 8002132:	018a      	lsls	r2, r1, #6
 8002134:	4651      	mov	r1, sl
 8002136:	ebb2 0801 	subs.w	r8, r2, r1
 800213a:	4659      	mov	r1, fp
 800213c:	eb63 0901 	sbc.w	r9, r3, r1
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800214c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002154:	4690      	mov	r8, r2
 8002156:	4699      	mov	r9, r3
 8002158:	4623      	mov	r3, r4
 800215a:	eb18 0303 	adds.w	r3, r8, r3
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	462b      	mov	r3, r5
 8002162:	eb49 0303 	adc.w	r3, r9, r3
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002174:	4629      	mov	r1, r5
 8002176:	024b      	lsls	r3, r1, #9
 8002178:	4621      	mov	r1, r4
 800217a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800217e:	4621      	mov	r1, r4
 8002180:	024a      	lsls	r2, r1, #9
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800218a:	2200      	movs	r2, #0
 800218c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800218e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002190:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002194:	f7fe f836 	bl	8000204 <__aeabi_uldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4613      	mov	r3, r2
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021a2:	e065      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x420>
 80021a4:	40023800 	.word	0x40023800
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	2200      	movs	r2, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	4611      	mov	r1, r2
 80021bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80021c2:	2300      	movs	r3, #0
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021ca:	4642      	mov	r2, r8
 80021cc:	464b      	mov	r3, r9
 80021ce:	f04f 0000 	mov.w	r0, #0
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	0159      	lsls	r1, r3, #5
 80021d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021dc:	0150      	lsls	r0, r2, #5
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4641      	mov	r1, r8
 80021e4:	1a51      	subs	r1, r2, r1
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	4649      	mov	r1, r9
 80021ea:	eb63 0301 	sbc.w	r3, r3, r1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021fc:	4659      	mov	r1, fp
 80021fe:	018b      	lsls	r3, r1, #6
 8002200:	4651      	mov	r1, sl
 8002202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002206:	4651      	mov	r1, sl
 8002208:	018a      	lsls	r2, r1, #6
 800220a:	4651      	mov	r1, sl
 800220c:	1a54      	subs	r4, r2, r1
 800220e:	4659      	mov	r1, fp
 8002210:	eb63 0501 	sbc.w	r5, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4643      	mov	r3, r8
 800222a:	18e3      	adds	r3, r4, r3
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	464b      	mov	r3, r9
 8002230:	eb45 0303 	adc.w	r3, r5, r3
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002242:	4629      	mov	r1, r5
 8002244:	028b      	lsls	r3, r1, #10
 8002246:	4621      	mov	r1, r4
 8002248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800224c:	4621      	mov	r1, r4
 800224e:	028a      	lsls	r2, r1, #10
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002258:	2200      	movs	r2, #0
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800225c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800225e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002262:	f7fd ffcf 	bl	8000204 <__aeabi_uldivmod>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4613      	mov	r3, r2
 800226c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	0f1b      	lsrs	r3, r3, #28
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800227e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800228e:	e003      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002296:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800229c:	4618      	mov	r0, r3
 800229e:	37b8      	adds	r7, #184	@ 0xb8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400

080022b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e28d      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8083 	beq.w	80023d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022d0:	4b94      	ldr	r3, [pc, #592]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d019      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022dc:	4b91      	ldr	r3, [pc, #580]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f4:	d00c      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b88      	ldr	r3, [pc, #544]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800230e:	d10b      	bne.n	8002328 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	4b84      	ldr	r3, [pc, #528]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d05b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x124>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d157      	bne.n	80023d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e25a      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x90>
 8002332:	4b7c      	ldr	r3, [pc, #496]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7b      	ldr	r2, [pc, #492]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xcc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0xb4>
 800234a:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b73      	ldr	r3, [pc, #460]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a72      	ldr	r2, [pc, #456]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xcc>
 8002364:	4b6f      	ldr	r3, [pc, #444]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6e      	ldr	r2, [pc, #440]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b6c      	ldr	r3, [pc, #432]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6b      	ldr	r2, [pc, #428]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fc4a 	bl	8000c1c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fc46 	bl	8000c1c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e21f      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b61      	ldr	r3, [pc, #388]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xdc>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fc36 	bl	8000c1c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fc32 	bl	8000c1c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e20b      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x104>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06f      	beq.n	80024c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023e2:	4b50      	ldr	r3, [pc, #320]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d017      	beq.n	800241e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b44      	ldr	r3, [pc, #272]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x186>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1d3      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4937      	ldr	r1, [pc, #220]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x278>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fbdf 	bl	8000c1c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fbdb 	bl	8000c1c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1b4      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4925      	ldr	r1, [pc, #148]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_OscConfig+0x278>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fbbe 	bl	8000c1c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fbba 	bl	8000c1c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e193      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_RCC_OscConfig+0x27c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fb9e 	bl	8000c1c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fb9a 	bl	8000c1c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e173      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x234>
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_OscConfig+0x27c>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe fb87 	bl	8000c1c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00e      	b.n	8002530 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fb83 	bl	8000c1c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d907      	bls.n	8002530 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e15c      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b8a      	ldr	r3, [pc, #552]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ea      	bne.n	8002512 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b83      	ldr	r3, [pc, #524]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b7c      	ldr	r3, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe fb43 	bl	8000c1c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fb3f 	bl	8000c1c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e118      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x31e>
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x358>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x340>
 80025d6:	4b61      	ldr	r3, [pc, #388]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	4a60      	ldr	r2, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e2:	4b5e      	ldr	r3, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x358>
 80025f0:	4b5a      	ldr	r3, [pc, #360]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	4a59      	ldr	r2, [pc, #356]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fc:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a56      	ldr	r2, [pc, #344]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fb04 	bl	8000c1c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fb00 	bl	8000c1c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0d7      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b4b      	ldr	r3, [pc, #300]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x368>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe faee 	bl	8000c1c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe faea 	bl	8000c1c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0c1      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b40      	ldr	r3, [pc, #256]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	4a3a      	ldr	r2, [pc, #232]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80ad 	beq.w	80027dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d060      	beq.n	8002750 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d145      	bne.n	8002722 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fabe 	bl	8000c1c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe faba 	bl	8000c1c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e093      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fa8f 	bl	8000c1c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fa8b 	bl	8000c1c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e064      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x452>
 8002720:	e05c      	b.n	80027dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fa78 	bl	8000c1c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fa74 	bl	8000c1c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04d      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x480>
 800274e:	e045      	b.n	80027dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e040      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <HAL_RCC_OscConfig+0x538>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d030      	beq.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d129      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d122      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d119      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10f      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f866 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fdbd 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d175      	bne.n	8002998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_UART_Transmit+0x2c>
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e06e      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	@ 0x21
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe f9a7 	bl	8000c1c <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e4:	d108      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e003      	b.n	8002900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002900:	e02e      	b.n	8002960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb1f 	bl	8002f50 <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03a      	b.n	800299a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10b      	bne.n	8002942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3302      	adds	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e007      	b.n	8002952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1cb      	bne.n	8002902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2140      	movs	r1, #64	@ 0x40
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 faeb 	bl	8002f50 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d112      	bne.n	80029e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_UART_Receive_IT+0x26>
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00b      	b.n	80029e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fb12 	bl	8003002 <UART_Start_Receive_IT>
 80029de:	4603      	mov	r3, r0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	@ 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_UART_IRQHandler+0x66>
 8002a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fbf2 	bl	8003234 <UART_Receive_IT>
      return;
 8002a50:	e25b      	b.n	8002f0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80de 	beq.w	8002c18 <HAL_UART_IRQHandler+0x22c>
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d106      	bne.n	8002a76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80d1 	beq.w	8002c18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xae>
 8002a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xd2>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xf6>
 8002aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_UART_IRQHandler+0x126>
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0208 	orr.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 81f2 	beq.w	8002f00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_UART_IRQHandler+0x14e>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb7d 	bl	8003234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <HAL_UART_IRQHandler+0x17a>
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04f      	beq.n	8002c06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa85 	bl	8003076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b40      	cmp	r3, #64	@ 0x40
 8002b78:	d141      	bne.n	8002bfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1d9      	bne.n	8002b7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dcc <HAL_UART_IRQHandler+0x3e0>)
 8002bd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f9cf 	bl	8000f7e <HAL_DMA_Abort_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e00e      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f994 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e00a      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f990 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	e006      	b.n	8002c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f98c 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c12:	e175      	b.n	8002f00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	bf00      	nop
    return;
 8002c16:	e173      	b.n	8002f00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 814f 	bne.w	8002ec0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8148 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8141 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5e:	2b40      	cmp	r3, #64	@ 0x40
 8002c60:	f040 80b6 	bne.w	8002dd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8145 	beq.w	8002f04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f080 813e 	bcs.w	8002f04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c9a:	f000 8088 	beq.w	8002dae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002cca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1d9      	bne.n	8002c9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e1      	bne.n	8002cea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3314      	adds	r3, #20
 8002d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e3      	bne.n	8002d26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e3      	bne.n	8002d6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f878 	bl	8000e9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8b7 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dca:	e09b      	b.n	8002f04 <HAL_UART_IRQHandler+0x518>
 8002dcc:	0800313d 	.word	0x0800313d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808e 	beq.w	8002f08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8089 	beq.w	8002f08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e52:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e3      	bne.n	8002e2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0310 	bic.w	r3, r3, #16
 8002e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e98:	61fa      	str	r2, [r7, #28]
 8002e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	69b9      	ldr	r1, [r7, #24]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e3      	bne.n	8002e74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f83d 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ebe:	e023      	b.n	8002f08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x4f4>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f943 	bl	8003164 <UART_Transmit_IT>
    return;
 8002ede:	e014      	b.n	8002f0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <HAL_UART_IRQHandler+0x51e>
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f983 	bl	8003204 <UART_EndTransmit_IT>
    return;
 8002efe:	e004      	b.n	8002f0a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f00:	bf00      	nop
 8002f02:	e002      	b.n	8002f0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f08:	bf00      	nop
  }
}
 8002f0a:	37e8      	adds	r7, #232	@ 0xe8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f60:	e03b      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f68:	d037      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fd fe57 	bl	8000c1c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e03a      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d023      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b80      	cmp	r3, #128	@ 0x80
 8002f96:	d020      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d01d      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d116      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f857 	bl	8003076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2208      	movs	r2, #8
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0b4      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2222      	movs	r2, #34	@ 0x22
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003046:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003076:	b480      	push	{r7}
 8003078:	b095      	sub	sp, #84	@ 0x54
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800309e:	643a      	str	r2, [r7, #64]	@ 0x40
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e5      	bne.n	800307e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d119      	bne.n	8003122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	647b      	str	r3, [r7, #68]	@ 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800310e:	61ba      	str	r2, [r7, #24]
 8003110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	613b      	str	r3, [r7, #16]
   return(result);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003130:	bf00      	nop
 8003132:	3754      	adds	r7, #84	@ 0x54
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fee4 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b21      	cmp	r3, #33	@ 0x21
 8003176:	d13e      	bne.n	80031f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003180:	d114      	bne.n	80031ac <UART_Transmit_IT+0x48>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d110      	bne.n	80031ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	e008      	b.n	80031be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6211      	str	r1, [r2, #32]
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4619      	mov	r1, r3
 80031cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800321a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fe73 	bl	8002f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	@ 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b22      	cmp	r3, #34	@ 0x22
 8003246:	f040 80ae 	bne.w	80033a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d117      	bne.n	8003284 <UART_Receive_IT+0x50>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	b29a      	uxth	r2, r3
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	1c9a      	adds	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	@ 0x28
 8003282:	e026      	b.n	80032d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003296:	d007      	beq.n	80032a8 <UART_Receive_IT+0x74>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <UART_Receive_IT+0x82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e008      	b.n	80032c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29b      	uxth	r3, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4619      	mov	r1, r3
 80032e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d15d      	bne.n	80033a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0220 	bic.w	r2, r2, #32
 80032f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	d135      	bne.n	8003398 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	623a      	str	r2, [r7, #32]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fdd1 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fa55 	bl	8000848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	@ 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b0c0      	sub	sp, #256	@ 0x100
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	ea40 0301 	orr.w	r3, r0, r1
 80033d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003408:	f021 010c 	bic.w	r1, r1, #12
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003416:	430b      	orrs	r3, r1
 8003418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342a:	6999      	ldr	r1, [r3, #24]
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	ea40 0301 	orr.w	r3, r0, r1
 8003436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b8f      	ldr	r3, [pc, #572]	@ (800367c <UART_SetConfig+0x2cc>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <UART_SetConfig+0xa0>
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b8d      	ldr	r3, [pc, #564]	@ (8003680 <UART_SetConfig+0x2d0>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d104      	bne.n	800345a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7fe f9c0 	bl	80017d4 <HAL_RCC_GetPCLK2Freq>
 8003454:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003458:	e003      	b.n	8003462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800345a:	f7fe f9a7 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 800345e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800346c:	f040 810c 	bne.w	8003688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800347a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800347e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	1891      	adds	r1, r2, r2
 8003488:	65b9      	str	r1, [r7, #88]	@ 0x58
 800348a:	415b      	adcs	r3, r3
 800348c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800348e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003492:	4621      	mov	r1, r4
 8003494:	eb12 0801 	adds.w	r8, r2, r1
 8003498:	4629      	mov	r1, r5
 800349a:	eb43 0901 	adc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb49 0303 	adc.w	r3, r9, r3
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034de:	460b      	mov	r3, r1
 80034e0:	18db      	adds	r3, r3, r3
 80034e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034e4:	4613      	mov	r3, r2
 80034e6:	eb42 0303 	adc.w	r3, r2, r3
 80034ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034f4:	f7fc fe86 	bl	8000204 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <UART_SetConfig+0x2d4>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	011c      	lsls	r4, r3, #4
 8003506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003510:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003520:	415b      	adcs	r3, r3
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003528:	4641      	mov	r1, r8
 800352a:	eb12 0a01 	adds.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb43 0b01 	adc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003548:	4692      	mov	sl, r2
 800354a:	469b      	mov	fp, r3
 800354c:	4643      	mov	r3, r8
 800354e:	eb1a 0303 	adds.w	r3, sl, r3
 8003552:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003556:	464b      	mov	r3, r9
 8003558:	eb4b 0303 	adc.w	r3, fp, r3
 800355c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800356c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003574:	460b      	mov	r3, r1
 8003576:	18db      	adds	r3, r3, r3
 8003578:	643b      	str	r3, [r7, #64]	@ 0x40
 800357a:	4613      	mov	r3, r2
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
 8003582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800358a:	f7fc fe3b 	bl	8000204 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4611      	mov	r1, r2
 8003594:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <UART_SetConfig+0x2d4>)
 8003596:	fba3 2301 	umull	r2, r3, r3, r1
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2264      	movs	r2, #100	@ 0x64
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	1acb      	subs	r3, r1, r3
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035aa:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <UART_SetConfig+0x2d4>)
 80035ac:	fba3 2302 	umull	r2, r3, r3, r2
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035d4:	415b      	adcs	r3, r3
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003628:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800362c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003630:	460b      	mov	r3, r1
 8003632:	18db      	adds	r3, r3, r3
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003636:	4613      	mov	r3, r2
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003646:	f7fc fddd 	bl	8000204 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <UART_SetConfig+0x2d4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	@ 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3332      	adds	r3, #50	@ 0x32
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <UART_SetConfig+0x2d4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4422      	add	r2, r4
 8003676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003678:	e106      	b.n	8003888 <UART_SetConfig+0x4d8>
 800367a:	bf00      	nop
 800367c:	40011000 	.word	0x40011000
 8003680:	40011400 	.word	0x40011400
 8003684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	6239      	str	r1, [r7, #32]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036aa:	4641      	mov	r1, r8
 80036ac:	1854      	adds	r4, r2, r1
 80036ae:	4649      	mov	r1, r9
 80036b0:	eb43 0501 	adc.w	r5, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	00eb      	lsls	r3, r5, #3
 80036be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c2:	00e2      	lsls	r2, r4, #3
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	18e3      	adds	r3, r4, r3
 80036cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036d0:	464b      	mov	r3, r9
 80036d2:	eb45 0303 	adc.w	r3, r5, r3
 80036d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036f6:	4629      	mov	r1, r5
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003700:	4621      	mov	r1, r4
 8003702:	008a      	lsls	r2, r1, #2
 8003704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003708:	f7fc fd7c 	bl	8000204 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b60      	ldr	r3, [pc, #384]	@ (8003894 <UART_SetConfig+0x4e4>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011c      	lsls	r4, r3, #4
 800371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003724:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	61b9      	str	r1, [r7, #24]
 8003734:	415b      	adcs	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373c:	4641      	mov	r1, r8
 800373e:	1851      	adds	r1, r2, r1
 8003740:	6139      	str	r1, [r7, #16]
 8003742:	4649      	mov	r1, r9
 8003744:	414b      	adcs	r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	00cb      	lsls	r3, r1, #3
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375e:	4651      	mov	r1, sl
 8003760:	00ca      	lsls	r2, r1, #3
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	4603      	mov	r3, r0
 8003768:	4642      	mov	r2, r8
 800376a:	189b      	adds	r3, r3, r2
 800376c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003770:	464b      	mov	r3, r9
 8003772:	460a      	mov	r2, r1
 8003774:	eb42 0303 	adc.w	r3, r2, r3
 8003778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003786:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003794:	4649      	mov	r1, r9
 8003796:	008b      	lsls	r3, r1, #2
 8003798:	4641      	mov	r1, r8
 800379a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379e:	4641      	mov	r1, r8
 80037a0:	008a      	lsls	r2, r1, #2
 80037a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037a6:	f7fc fd2d 	bl	8000204 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	4b38      	ldr	r3, [pc, #224]	@ (8003894 <UART_SetConfig+0x4e4>)
 80037b2:	fba3 2301 	umull	r2, r3, r3, r1
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2264      	movs	r2, #100	@ 0x64
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	1acb      	subs	r3, r1, r3
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	3332      	adds	r3, #50	@ 0x32
 80037c4:	4a33      	ldr	r2, [pc, #204]	@ (8003894 <UART_SetConfig+0x4e4>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d0:	441c      	add	r4, r3
 80037d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d6:	2200      	movs	r2, #0
 80037d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80037da:	677a      	str	r2, [r7, #116]	@ 0x74
 80037dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	415b      	adcs	r3, r3
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f0:	4641      	mov	r1, r8
 80037f2:	1851      	adds	r1, r2, r1
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	4649      	mov	r1, r9
 80037f8:	414b      	adcs	r3, r1
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003808:	4659      	mov	r1, fp
 800380a:	00cb      	lsls	r3, r1, #3
 800380c:	4651      	mov	r1, sl
 800380e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003812:	4651      	mov	r1, sl
 8003814:	00ca      	lsls	r2, r1, #3
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	4603      	mov	r3, r0
 800381c:	4642      	mov	r2, r8
 800381e:	189b      	adds	r3, r3, r2
 8003820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003822:	464b      	mov	r3, r9
 8003824:	460a      	mov	r2, r1
 8003826:	eb42 0303 	adc.w	r3, r2, r3
 800382a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	663b      	str	r3, [r7, #96]	@ 0x60
 8003836:	667a      	str	r2, [r7, #100]	@ 0x64
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003844:	4649      	mov	r1, r9
 8003846:	008b      	lsls	r3, r1, #2
 8003848:	4641      	mov	r1, r8
 800384a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384e:	4641      	mov	r1, r8
 8003850:	008a      	lsls	r2, r1, #2
 8003852:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003856:	f7fc fcd5 	bl	8000204 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <UART_SetConfig+0x4e4>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	@ 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	3332      	adds	r3, #50	@ 0x32
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <UART_SetConfig+0x4e4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4422      	add	r2, r4
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003894:	51eb851f 	.word	0x51eb851f

08003898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003898:	b084      	sub	sp, #16
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	f107 001c 	add.w	r0, r7, #28
 80038a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d123      	bne.n	80038fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80038c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa9a 	bl	8003e28 <USB_CoreReset>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e01b      	b.n	8003932 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa8e 	bl	8003e28 <USB_CoreReset>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003910:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
 8003924:	e005      	b.n	8003932 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003932:	7fbb      	ldrb	r3, [r7, #30]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10b      	bne.n	8003950 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f043 0206 	orr.w	r2, r3, #6
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800395c:	b004      	add	sp, #16
 800395e:	4770      	bx	lr

08003960 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 0201 	bic.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d115      	bne.n	80039d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039b0:	200a      	movs	r0, #10
 80039b2:	f7fd f93f 	bl	8000c34 <HAL_Delay>
      ms += 10U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	330a      	adds	r3, #10
 80039ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa25 	bl	8003e0c <USB_GetMode>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d01e      	beq.n	8003a06 <USB_SetCurrentMode+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80039cc:	d9f0      	bls.n	80039b0 <USB_SetCurrentMode+0x2e>
 80039ce:	e01a      	b.n	8003a06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d115      	bne.n	8003a02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039e2:	200a      	movs	r0, #10
 80039e4:	f7fd f926 	bl	8000c34 <HAL_Delay>
      ms += 10U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	330a      	adds	r3, #10
 80039ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa0c 	bl	8003e0c <USB_GetMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <USB_SetCurrentMode+0x84>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80039fe:	d9f0      	bls.n	80039e2 <USB_SetCurrentMode+0x60>
 8003a00:	e001      	b.n	8003a06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e005      	b.n	8003a12 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a0a:	d101      	bne.n	8003a10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e009      	b.n	8003a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3340      	adds	r3, #64	@ 0x40
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0e      	cmp	r3, #14
 8003a54:	d9f2      	bls.n	8003a3c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11c      	bne.n	8003a98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e005      	b.n	8003aa4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ab0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10d      	bne.n	8003ad4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f968 	bl	8003d98 <USB_SetDevSpeed>
 8003ac8:	e008      	b.n	8003adc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003aca:	2101      	movs	r1, #1
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f963 	bl	8003d98 <USB_SetDevSpeed>
 8003ad2:	e003      	b.n	8003adc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f95e 	bl	8003d98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003adc:	2110      	movs	r1, #16
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8fa 	bl	8003cd8 <USB_FlushTxFifo>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f924 	bl	8003d3c <USB_FlushRxFifo>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b10:	461a      	mov	r2, r3
 8003b12:	2300      	movs	r3, #0
 8003b14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e043      	b.n	8003bb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b3e:	d118      	bne.n	8003b72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e013      	b.n	8003b84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e008      	b.n	8003b84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	461a      	mov	r2, r3
 8003b92:	2300      	movs	r3, #0
 8003b94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d3b5      	bcc.n	8003b28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e043      	b.n	8003c4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bd8:	d118      	bne.n	8003c0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e013      	b.n	8003c1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e008      	b.n	8003c1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3301      	adds	r3, #1
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c4e:	461a      	mov	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d3b5      	bcc.n	8003bc2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003c76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <USB_DevInit+0x2b8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f043 0208 	orr.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4770      	bx	lr
 8003cd4:	803c3800 	.word	0x803c3800

08003cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cf2:	d901      	bls.n	8003cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e01b      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	daf2      	bge.n	8003ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d1c:	d901      	bls.n	8003d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e006      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d0f0      	beq.n	8003d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d54:	d901      	bls.n	8003d5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e018      	b.n	8003d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	daf2      	bge.n	8003d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d78:	d901      	bls.n	8003d7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d0f0      	beq.n	8003d6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003de4:	f023 0303 	bic.w	r3, r3, #3
 8003de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0301 	and.w	r3, r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e40:	d901      	bls.n	8003e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e01b      	b.n	8003e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	daf2      	bge.n	8003e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e6a:	d901      	bls.n	8003e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d0f0      	beq.n	8003e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <memset>:
 8003e8a:	4402      	add	r2, r0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d100      	bne.n	8003e94 <memset+0xa>
 8003e92:	4770      	bx	lr
 8003e94:	f803 1b01 	strb.w	r1, [r3], #1
 8003e98:	e7f9      	b.n	8003e8e <memset+0x4>
	...

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed4 <__libc_init_array+0x38>)
 8003ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ed8 <__libc_init_array+0x3c>)
 8003ea2:	1b64      	subs	r4, r4, r5
 8003ea4:	10a4      	asrs	r4, r4, #2
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	4d0b      	ldr	r5, [pc, #44]	@ (8003edc <__libc_init_array+0x40>)
 8003eae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee0 <__libc_init_array+0x44>)
 8003eb0:	f000 f818 	bl	8003ee4 <_init>
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	2600      	movs	r6, #0
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	08003f1c 	.word	0x08003f1c
 8003ed8:	08003f1c 	.word	0x08003f1c
 8003edc:	08003f1c 	.word	0x08003f1c
 8003ee0:	08003f20 	.word	0x08003f20

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
