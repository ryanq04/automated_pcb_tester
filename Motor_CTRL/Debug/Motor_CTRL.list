
Motor_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005690  08005690  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005690  08005690  00006690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005698  08005698  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080056a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  2000000c  080056ac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080056ac  0000760c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f72  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d8  00000000  00000000  00017fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aaa  00000000  00000000  0001b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a5f  00000000  00000000  0001bee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b5a  00000000  00000000  0003d941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c86  00000000  00000000  0005049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  0011a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0011dcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005658 	.word	0x08005658

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005658 	.word	0x08005658

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2234      	movs	r2, #52	@ 0x34
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fbd3 	bl	80055fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a28      	ldr	r2, [pc, #160]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <SystemClock_Config+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <SystemClock_Config+0xd4>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <SystemClock_Config+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ea8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb8:	23a8      	movs	r3, #168	@ 0xa8
 8000eba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fb3b 	bl	8004548 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ed8:	f000 f9a0 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2105      	movs	r1, #5
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fcb0 	bl	8003860 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f06:	f000 f989 	bl	800121c <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	@ 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f22:	4a13      	ldr	r2, [pc, #76]	@ (8000f70 <MX_I2C2_Init+0x54>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f28:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <MX_I2C2_Init+0x58>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <MX_I2C2_Init+0x50>)
 8000f5a:	f001 fb23 	bl	80025a4 <HAL_I2C_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f64:	f000 f95a 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000028 	.word	0x20000028
 8000f70:	40005800 	.word	0x40005800
 8000f74:	000186a0 	.word	0x000186a0

08000f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <MX_USART3_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART3_UART_Init+0x4c>)
 8000fb0:	f003 fd68 	bl	8004a84 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 f92f 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000007c 	.word	0x2000007c
 8000fc8:	40004800 	.word	0x40004800

08000fcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2206      	movs	r2, #6
 8000fdc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	2201      	movs	r2, #1
 8001006:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	f002 faec 	bl	80035ec <HAL_PCD_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f8ff 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000124 	.word	0x20000124

08001028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_DMA_Init+0x3c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <MX_DMA_Init+0x3c>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_DMA_Init+0x3c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200e      	movs	r0, #14
 8001050:	f000 fdc1 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001054:	200e      	movs	r0, #14
 8001056:	f000 fdda 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	@ 0x38
 800106c:	af00      	add	r7, sp, #0
  
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA clock
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	4b61      	ldr	r3, [pc, #388]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a60      	ldr	r2, [pc, #384]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b5e      	ldr	r3, [pc, #376]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	6a3b      	ldr	r3, [r7, #32]

   /* Configure GPIO pin PA3567 as Output */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800109a:	23e8      	movs	r3, #232	@ 0xe8
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4856      	ldr	r0, [pc, #344]	@ (800120c <MX_GPIO_Init+0x1a4>)
 80010b2:	f001 f8b1 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	4b53      	ldr	r3, [pc, #332]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b45      	ldr	r3, [pc, #276]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a44      	ldr	r2, [pc, #272]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a36      	ldr	r2, [pc, #216]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 800114c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_GPIO_Init+0x1a0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <MX_GPIO_Init+0x1a8>)
 8001182:	f001 f9f5 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	4822      	ldr	r0, [pc, #136]	@ (8001214 <MX_GPIO_Init+0x1ac>)
 800118c:	f001 f9f0 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001196:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	481c      	ldr	r0, [pc, #112]	@ (8001218 <MX_GPIO_Init+0x1b0>)
 80011a8:	f001 f836 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4812      	ldr	r0, [pc, #72]	@ (8001210 <MX_GPIO_Init+0x1a8>)
 80011c6:	f001 f827 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011ca:	2340      	movs	r3, #64	@ 0x40
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <MX_GPIO_Init+0x1ac>)
 80011e2:	f001 f819 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4806      	ldr	r0, [pc, #24]	@ (8001214 <MX_GPIO_Init+0x1ac>)
 80011fa:	f001 f80d 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	@ 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40021800 	.word	0x40021800
 8001218:	40020800 	.word	0x40020800

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <main>:

/* USER CODE END PFP */


int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  HAL_Init();
 800122e:	f000 fb61 	bl	80018f4 <HAL_Init>

  SystemClock_Config();
 8001232:	f7ff fe07 	bl	8000e44 <SystemClock_Config>
  MX_GPIO_Init();
 8001236:	f7ff ff17 	bl	8001068 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f7ff fef5 	bl	8001028 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800123e:	f7ff fe9b 	bl	8000f78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001242:	f7ff fec3 	bl	8000fcc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001246:	f7ff fe69 	bl	8000f1c <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  PCA9685_Init(50); // 50Hz for servo
 800124a:	2032      	movs	r0, #50	@ 0x32
 800124c:	f000 f8f6 	bl	800143c <PCA9685_Init>
  /* USER CODE END 2 */

  int start = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001258:	4831      	ldr	r0, [pc, #196]	@ (8001320 <main+0xf8>)
 800125a:	f001 f971 	bl	8002540 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <main+0x4a>
	    {
			  start ^= 1;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	617b      	str	r3, [r7, #20]
			  HAL_Delay(200);
 800126c:	20c8      	movs	r0, #200	@ 0xc8
 800126e:	f000 fbb3 	bl	80019d8 <HAL_Delay>
	  	}

	  if(start){
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ed      	beq.n	8001254 <main+0x2c>
      // FS90R_SetSpeed(0, 0);
      // HAL_Delay(2000);

      //setServoAngle(15, 0);

      for(double i = 0; i < 180; i += 1){
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001284:	e017      	b.n	80012b6 <main+0x8e>
        setServoAngle(15, i);
 8001286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800128a:	f7ff fc13 	bl	8000ab4 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	ee00 3a10 	vmov	s0, r3
 8001294:	200f      	movs	r0, #15
 8001296:	f000 f917 	bl	80014c8 <setServoAngle>
        HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f000 fb9c 	bl	80019d8 <HAL_Delay>
      for(double i = 0; i < 180; i += 1){
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <main+0xfc>)
 80012a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012aa:	f7fe ffb3 	bl	8000214 <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <main+0x100>)
 80012bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c0:	f7ff fbd0 	bl	8000a64 <__aeabi_dcmplt>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1dd      	bne.n	8001286 <main+0x5e>

      }
      for(double i = 180; i > 0; i -= 1){
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <main+0x100>)
 80012d0:	e9c7 2300 	strd	r2, r3, [r7]
 80012d4:	e017      	b.n	8001306 <main+0xde>
        setServoAngle(15, i);
 80012d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012da:	f7ff fbeb 	bl	8000ab4 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	ee00 3a10 	vmov	s0, r3
 80012e4:	200f      	movs	r0, #15
 80012e6:	f000 f8ef 	bl	80014c8 <setServoAngle>
        HAL_Delay(10);
 80012ea:	200a      	movs	r0, #10
 80012ec:	f000 fb74 	bl	80019d8 <HAL_Delay>
      for(double i = 180; i > 0; i -= 1){
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <main+0xfc>)
 80012f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fa:	f7fe ff89 	bl	8000210 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2300 	strd	r2, r3, [r7]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001312:	f7ff fbc5 	bl	8000aa0 <__aeabi_dcmpgt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1dc      	bne.n	80012d6 <main+0xae>
	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 800131c:	e79a      	b.n	8001254 <main+0x2c>
 800131e:	bf00      	nop
 8001320:	40020800 	.word	0x40020800
 8001324:	3ff00000 	.word	0x3ff00000
 8001328:	40668000 	.word	0x40668000

0800132c <PCA9685_SetBit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	460b      	mov	r3, r1
 8001338:	71bb      	strb	r3, [r7, #6]
 800133a:	4613      	mov	r3, r2
 800133c:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	b29a      	uxth	r2, r3
 8001342:	230a      	movs	r3, #10
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030f 	add.w	r3, r7, #15
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <PCA9685_SetBit+0x90>)
 8001356:	f001 fb63 	bl	8002a20 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 800135a:	797b      	ldrb	r3, [r7, #5]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10d      	bne.n	800137c <PCA9685_SetBit+0x50>
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2201      	movs	r2, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	b25b      	sxtb	r3, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	b25a      	sxtb	r2, r3
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	4013      	ands	r3, r2
 8001374:	b25b      	sxtb	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e00a      	b.n	8001392 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	2201      	movs	r2, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	b25a      	sxtb	r2, r3
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b25b      	sxtb	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	b29a      	uxth	r2, r3
 8001396:	230a      	movs	r3, #10
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 030f 	add.w	r3, r7, #15
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2180      	movs	r1, #128	@ 0x80
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <PCA9685_SetBit+0x90>)
 80013aa:	f001 fa3f 	bl	800282c <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f000 fb12 	bl	80019d8 <HAL_Delay>
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000028 	.word	0x20000028

080013c0 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03; // why?
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d902      	bls.n	80013da <PCA9685_SetPWMFrequency+0x1a>
 80013d4:	2303      	movs	r3, #3
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e00c      	b.n	80013f4 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b18      	cmp	r3, #24
 80013de:	d802      	bhi.n	80013e6 <PCA9685_SetPWMFrequency+0x26>
 80013e0:	23ff      	movs	r3, #255	@ 0xff
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e006      	b.n	80013f4 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	031b      	lsls	r3, r3, #12
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <PCA9685_SetPWMFrequency+0x74>)
 80013ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2104      	movs	r1, #4
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff ff97 	bl	800132c <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80013fe:	230a      	movs	r3, #10
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	22fe      	movs	r2, #254	@ 0xfe
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	4809      	ldr	r0, [pc, #36]	@ (8001438 <PCA9685_SetPWMFrequency+0x78>)
 8001414:	f001 fa0a 	bl	800282c <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2104      	movs	r1, #4
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff85 	bl	800132c <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2107      	movs	r1, #7
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff80 	bl	800132c <PCA9685_SetBit>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	017d7840 	.word	0x017d7840
 8001438:	20000028 	.word	0x20000028

0800143c <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ffb9 	bl	80013c0 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2105      	movs	r1, #5
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff ff6a 	bl	800132c <PCA9685_SetBit>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af04      	add	r7, sp, #16
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3306      	adds	r3, #6
 800147a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	230a      	movs	r3, #10
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2304      	movs	r3, #4
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <PCA9685_SetPWM+0x60>)
 80014b4:	f001 f9ba 	bl	800282c <HAL_I2C_Mem_Write>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000028 	.word	0x20000028
 80014c4:	00000000 	.word	0x00000000

080014c8 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(uint8_t Channel, float Angle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	ed87 0a00 	vstr	s0, [r7]
 80014d4:	71fb      	strb	r3, [r7, #7]
  float Value;

  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f7fe fffa 	bl	80004d0 <__aeabi_f2d>
 80014dc:	a31b      	add	r3, pc, #108	@ (adr r3, 800154c <setServoAngle+0x84>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f84d 	bl	8000580 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <setServoAngle+0x80>)
 80014f4:	f7ff f96e 	bl	80007d4 <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	a30f      	add	r3, pc, #60	@ (adr r3, 8001540 <setServoAngle+0x78>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fe85 	bl	8000214 <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff facf 	bl	8000ab4 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 800151a:	edd7 7a03 	vldr	s15, [r7, #12]
 800151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001522:	ee17 3a90 	vmov	r3, s15
 8001526:	b29a      	uxth	r2, r3
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff97 	bl	8001460 <PCA9685_SetPWM>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w
 8001540:	9999999a 	.word	0x9999999a
 8001544:	40599999 	.word	0x40599999
 8001548:	40668000 	.word	0x40668000
 800154c:	00000000 	.word	0x00000000
 8001550:	40799800 	.word	0x40799800

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_I2C_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_I2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_I2C_MspInit+0x88>)
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_I2C_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e6:	2312      	movs	r3, #18
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <HAL_I2C_MspInit+0x8c>)
 80015fe:	f000 fe0b 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_I2C_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_I2C_MspInit+0x88>)
 800160c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_I2C_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40005800 	.word	0x40005800
 800162c:	40023800 	.word	0x40023800
 8001630:	40021400 	.word	0x40021400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a30      	ldr	r2, [pc, #192]	@ (8001714 <HAL_UART_MspInit+0xe0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d15a      	bne.n	800170c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a2e      	ldr	r2, [pc, #184]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b2c      	ldr	r3, [pc, #176]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <HAL_UART_MspInit+0xe4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800168e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a0:	2307      	movs	r3, #7
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	481c      	ldr	r0, [pc, #112]	@ (800171c <HAL_UART_MspInit+0xe8>)
 80016ac:	f000 fdb4 	bl	8002218 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001724 <HAL_UART_MspInit+0xf0>)
 80016b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016c0:	2240      	movs	r2, #64	@ 0x40
 80016c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c4:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <HAL_UART_MspInit+0xec>)
 80016f2:	f000 faa7 	bl	8001c44 <HAL_DMA_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016fc:	f7ff fd8e 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_UART_MspInit+0xec>)
 8001704:	639a      	str	r2, [r3, #56]	@ 0x38
 8001706:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_UART_MspInit+0xec>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	@ 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004800 	.word	0x40004800
 8001718:	40023800 	.word	0x40023800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	200000c4 	.word	0x200000c4
 8001724:	40026058 	.word	0x40026058

08001728 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0a0      	sub	sp, #128	@ 0x80
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	225c      	movs	r2, #92	@ 0x5c
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f003 ff58 	bl	80055fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001756:	d14e      	bne.n	80017f6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800175e:	2300      	movs	r3, #0
 8001760:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f994 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001772:	f7ff fd53 	bl	800121c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a20      	ldr	r2, [pc, #128]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001792:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001796:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a4:	230a      	movs	r3, #10
 80017a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4815      	ldr	r0, [pc, #84]	@ (8001804 <HAL_PCD_MspInit+0xdc>)
 80017b0:	f000 fd32 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c6:	4619      	mov	r1, r3
 80017c8:	480e      	ldr	r0, [pc, #56]	@ (8001804 <HAL_PCD_MspInit+0xdc>)
 80017ca:	f000 fd25 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 80017d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 80017d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d8:	6353      	str	r3, [r2, #52]	@ 0x34
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_PCD_MspInit+0xd8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017f6:	bf00      	nop
 80017f8:	3780      	adds	r7, #128	@ 0x80
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185e:	f000 f89b 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <DMA1_Stream3_IRQHandler+0x10>)
 800186e:	f000 fa97 	bl	8001da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000c4 	.word	0x200000c4

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a4:	f7ff ffea 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	@ (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f003 fe9f 	bl	8005610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fca9 	bl	8001228 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e4:	080056a0 	.word	0x080056a0
  ldr r2, =_sbss
 80018e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018ec:	2000060c 	.word	0x2000060c

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f94f 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fe14 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f967 	bl	8001c2a <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f92f 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	20000008 	.word	0x20000008
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000608 	.word	0x20000608

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000608 	.word	0x20000608

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff feb6 	bl	80019c0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e099      	b.n	8001d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e00f      	b.n	8001ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fe9d 	bl	80019c0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d908      	bls.n	8001ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e078      	b.n	8001d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e8      	bne.n	8001c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <HAL_DMA_Init+0x158>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d117      	bne.n	8001d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f9e9 	bl	8002120 <DMA_CheckFifoParam>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d62:	2301      	movs	r3, #1
 8001d64:	e016      	b.n	8001d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9a0 	bl	80020b4 <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	223f      	movs	r2, #63	@ 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f010803f 	.word	0xf010803f

08001da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dac:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe8 <HAL_DMA_IRQHandler+0x248>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a8e      	ldr	r2, [pc, #568]	@ (8001fec <HAL_DMA_IRQHandler+0x24c>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dca:	2208      	movs	r2, #8
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01a      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0204 	bic.w	r2, r2, #4
 8001df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2208      	movs	r2, #8
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2201      	movs	r2, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2201      	movs	r2, #1
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	2204      	movs	r2, #4
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00b      	beq.n	8001e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2204      	movs	r2, #4
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d043      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03c      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d108      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d024      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
 8001ece:	e01f      	b.n	8001f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e016      	b.n	8001f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0208 	bic.w	r2, r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	2220      	movs	r2, #32
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 808f 	beq.w	8002040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8087 	beq.w	8002040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	2220      	movs	r2, #32
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d136      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0216 	bic.w	r2, r2, #22
 8001f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x1da>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0208 	bic.w	r2, r2, #8
 8001f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	223f      	movs	r2, #63	@ 0x3f
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d07e      	beq.n	80020ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
        }
        return;
 8001fb6:	e079      	b.n	80020ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01d      	beq.n	8002002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d031      	beq.n	8002040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e02c      	b.n	8002040 <HAL_DMA_IRQHandler+0x2a0>
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d023      	beq.n	8002040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
 8002000:	e01e      	b.n	8002040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10f      	bne.n	8002030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0210 	bic.w	r2, r2, #16
 800201e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	2b00      	cmp	r3, #0
 8002046:	d032      	beq.n	80020ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d022      	beq.n	800209a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2205      	movs	r2, #5
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3301      	adds	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d307      	bcc.n	8002088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f2      	bne.n	800206c <HAL_DMA_IRQHandler+0x2cc>
 8002086:	e000      	b.n	800208a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
 80020aa:	e000      	b.n	80020ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80020ac:	bf00      	nop
    }
  }
}
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3b10      	subs	r3, #16
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <DMA_CalcBaseAndBitshift+0x64>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ce:	4a13      	ldr	r2, [pc, #76]	@ (800211c <DMA_CalcBaseAndBitshift+0x68>)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d909      	bls.n	80020f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	1d1a      	adds	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020f4:	e007      	b.n	8002106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	aaaaaaab 	.word	0xaaaaaaab
 800211c:	08005688 	.word	0x08005688

08002120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11f      	bne.n	800217a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d856      	bhi.n	80021ee <DMA_CheckFifoParam+0xce>
 8002140:	a201      	add	r2, pc, #4	@ (adr r2, 8002148 <DMA_CheckFifoParam+0x28>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002159 	.word	0x08002159
 800214c:	0800216b 	.word	0x0800216b
 8002150:	08002159 	.word	0x08002159
 8002154:	080021ef 	.word	0x080021ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d046      	beq.n	80021f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e043      	b.n	80021f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002172:	d140      	bne.n	80021f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002178:	e03d      	b.n	80021f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002182:	d121      	bne.n	80021c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d837      	bhi.n	80021fa <DMA_CheckFifoParam+0xda>
 800218a:	a201      	add	r2, pc, #4	@ (adr r2, 8002190 <DMA_CheckFifoParam+0x70>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021a1 	.word	0x080021a1
 8002194:	080021a7 	.word	0x080021a7
 8002198:	080021a1 	.word	0x080021a1
 800219c:	080021b9 	.word	0x080021b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      break;
 80021a4:	e030      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d025      	beq.n	80021fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b6:	e022      	b.n	80021fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c0:	d11f      	bne.n	8002202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021c6:	e01c      	b.n	8002202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d903      	bls.n	80021d6 <DMA_CheckFifoParam+0xb6>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d003      	beq.n	80021dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021d4:	e018      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      break;
 80021da:	e015      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e00b      	b.n	8002206 <DMA_CheckFifoParam+0xe6>
      break;
 80021ee:	bf00      	nop
 80021f0:	e00a      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;
 80021f2:	bf00      	nop
 80021f4:	e008      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
 80021f8:	e006      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;
 80021fa:	bf00      	nop
 80021fc:	e004      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e002      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;   
 8002202:	bf00      	nop
 8002204:	e000      	b.n	8002208 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
    }
  } 
  
  return status; 
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e165      	b.n	8002500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8154 	bne.w	80024fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ae 	beq.w	80024fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ba:	4a58      	ldr	r2, [pc, #352]	@ (800251c <HAL_GPIO_Init+0x304>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002520 <HAL_GPIO_Init+0x308>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	@ (800252c <HAL_GPIO_Init+0x314>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	@ (8002530 <HAL_GPIO_Init+0x318>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x20a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4a      	ldr	r2, [pc, #296]	@ (8002534 <HAL_GPIO_Init+0x31c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x206>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	@ (8002538 <HAL_GPIO_Init+0x320>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x202>
 8002416:	2306      	movs	r3, #6
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241a:	2307      	movs	r3, #7
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	@ (800251c <HAL_GPIO_Init+0x304>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_GPIO_Init+0x324>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a31      	ldr	r2, [pc, #196]	@ (800253c <HAL_GPIO_Init+0x324>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_GPIO_Init+0x324>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a26      	ldr	r2, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x324>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_GPIO_Init+0x324>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1c      	ldr	r2, [pc, #112]	@ (800253c <HAL_GPIO_Init+0x324>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <HAL_GPIO_Init+0x324>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a11      	ldr	r2, [pc, #68]	@ (800253c <HAL_GPIO_Init+0x324>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae96 	bls.w	8002234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e12b      	b.n	800280e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe ffea 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	@ 0x24
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002608:	f001 fa1c 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a81      	ldr	r2, [pc, #516]	@ (8002818 <HAL_I2C_Init+0x274>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d807      	bhi.n	8002628 <HAL_I2C_Init+0x84>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a80      	ldr	r2, [pc, #512]	@ (800281c <HAL_I2C_Init+0x278>)
 800261c:	4293      	cmp	r3, r2
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e006      	b.n	8002636 <HAL_I2C_Init+0x92>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a7d      	ldr	r2, [pc, #500]	@ (8002820 <HAL_I2C_Init+0x27c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0e7      	b.n	800280e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a78      	ldr	r2, [pc, #480]	@ (8002824 <HAL_I2C_Init+0x280>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a6a      	ldr	r2, [pc, #424]	@ (8002818 <HAL_I2C_Init+0x274>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d802      	bhi.n	8002678 <HAL_I2C_Init+0xd4>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3301      	adds	r3, #1
 8002676:	e009      	b.n	800268c <HAL_I2C_Init+0xe8>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a69      	ldr	r2, [pc, #420]	@ (8002828 <HAL_I2C_Init+0x284>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	3301      	adds	r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800269e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	495c      	ldr	r1, [pc, #368]	@ (8002818 <HAL_I2C_Init+0x274>)
 80026a8:	428b      	cmp	r3, r1
 80026aa:	d819      	bhi.n	80026e0 <HAL_I2C_Init+0x13c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e59      	subs	r1, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026c0:	400b      	ands	r3, r1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_I2C_Init+0x138>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e59      	subs	r1, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026da:	e051      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026dc:	2304      	movs	r3, #4
 80026de:	e04f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_I2C_Init+0x168>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e012      	b.n	8002732 <HAL_I2C_Init+0x18e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	0099      	lsls	r1, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Init+0x196>
 8002736:	2301      	movs	r3, #1
 8002738:	e022      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10e      	bne.n	8002760 <HAL_I2C_Init+0x1bc>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e58      	subs	r0, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	fbb0 f3f3 	udiv	r3, r0, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6809      	ldr	r1, [r1, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6911      	ldr	r1, [r2, #16]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	000186a0 	.word	0x000186a0
 800281c:	001e847f 	.word	0x001e847f
 8002820:	003d08ff 	.word	0x003d08ff
 8002824:	431bde83 	.word	0x431bde83
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	460b      	mov	r3, r1
 8002840:	813b      	strh	r3, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002846:	f7ff f8bb 	bl	80019c0 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	f040 80d9 	bne.w	8002a0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2319      	movs	r3, #25
 8002860:	2201      	movs	r2, #1
 8002862:	496d      	ldr	r1, [pc, #436]	@ (8002a18 <HAL_I2C_Mem_Write+0x1ec>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fc8b 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	e0cc      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Mem_Write+0x56>
 800287e:	2302      	movs	r3, #2
 8002880:	e0c5      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d007      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2221      	movs	r2, #33	@ 0x21
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	@ 0x40
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a4d      	ldr	r2, [pc, #308]	@ (8002a1c <HAL_I2C_Mem_Write+0x1f0>)
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ea:	88f8      	ldrh	r0, [r7, #6]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fac2 	bl	8002e84 <I2C_RequestMemoryWrite>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d052      	beq.n	80029ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e081      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fd50 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_I2C_Mem_Write+0x180>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1aa      	bne.n	800290a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fd43 	bl	8003444 <I2C_WaitOnBTFFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d107      	bne.n	80029dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e016      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000

08002a20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	@ 0x30
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	817b      	strh	r3, [r7, #10]
 8002a32:	460b      	mov	r3, r1
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3a:	f7fe ffc1 	bl	80019c0 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f040 8214 	bne.w	8002e76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	2201      	movs	r2, #1
 8002a56:	497b      	ldr	r1, [pc, #492]	@ (8002c44 <HAL_I2C_Mem_Read+0x224>)
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fb91 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	e207      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Mem_Read+0x56>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e200      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d007      	beq.n	8002a9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2222      	movs	r2, #34	@ 0x22
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a5b      	ldr	r2, [pc, #364]	@ (8002c48 <HAL_I2C_Mem_Read+0x228>)
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ade:	88f8      	ldrh	r0, [r7, #6]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa5e 	bl	8002fb0 <I2C_RequestMemoryRead>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1bc      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d113      	bne.n	8002b2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e190      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d11b      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e170      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d11b      	bne.n	8002bae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	e150      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bc4:	e144      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	f200 80f1 	bhi.w	8002db2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d123      	bne.n	8002c20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fc79 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e145      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c1e:	e117      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d14e      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4906      	ldr	r1, [pc, #24]	@ (8002c4c <HAL_I2C_Mem_Read+0x22c>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 faa4 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e11a      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
 8002c42:	bf00      	nop
 8002c44:	00100002 	.word	0x00100002
 8002c48:	ffff0000 	.word	0xffff0000
 8002c4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cc4:	e0c4      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2200      	movs	r2, #0
 8002cce:	496c      	ldr	r1, [pc, #432]	@ (8002e80 <HAL_I2C_Mem_Read+0x460>)
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa55 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cb      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4955      	ldr	r1, [pc, #340]	@ (8002e80 <HAL_I2C_Mem_Read+0x460>)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fa27 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e09d      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db0:	e04e      	b.n	8002e50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fb8c 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e058      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d124      	bne.n	8002e50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f aeb6 	bne.w	8002bc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3728      	adds	r7, #40	@ 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	00010004 	.word	0x00010004

08002e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f960 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed4:	d103      	bne.n	8002ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e05f      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	6a3a      	ldr	r2, [r7, #32]
 8002ef6:	492d      	ldr	r1, [pc, #180]	@ (8002fac <I2C_RequestMemoryWrite+0x128>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f9bb 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04c      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	6a39      	ldr	r1, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa46 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d107      	bne.n	8002f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02b      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e021      	b.n	8002fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5c:	893b      	ldrh	r3, [r7, #8]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa20 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e005      	b.n	8002fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	00010002 	.word	0x00010002

08002fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8c2 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003010:	d103      	bne.n	800301a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0aa      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800302c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	4952      	ldr	r1, [pc, #328]	@ (800317c <I2C_RequestMemoryRead+0x1cc>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f91d 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e097      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f9a8 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2b04      	cmp	r3, #4
 8003070:	d107      	bne.n	8003082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e076      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]
 8003096:	e021      	b.n	80030dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003098:	893b      	ldrh	r3, [r7, #8]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b29b      	uxth	r3, r3
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f982 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e050      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030de:	6a39      	ldr	r1, [r7, #32]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f967 	bl	80033b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d107      	bne.n	8003104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e035      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2200      	movs	r2, #0
 8003120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f82b 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313e:	d103      	bne.n	8003148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e013      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	4906      	ldr	r1, [pc, #24]	@ (800317c <I2C_RequestMemoryRead+0x1cc>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f886 	bl	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	e048      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d044      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fc11 	bl	80019c0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d139      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e023      	b.n	800326c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10d      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0xca>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	e00c      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	429a      	cmp	r2, r3
 8003268:	d093      	beq.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	e071      	b.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d123      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e067      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d041      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fb6c 	bl	80019c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d136      	bne.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10c      	bne.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e00b      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f af6d 	bne.w	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c0:	e034      	b.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8e3 	bl	800358e <I2C_IsAcknowledgeFailed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e034      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d028      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe faf1 	bl	80019c0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d016      	beq.n	800342c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d1c3      	bne.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	e034      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f89b 	bl	800358e <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e034      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d028      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe faa9 	bl	80019c0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11d      	bne.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d016      	beq.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d1c3      	bne.n	8003452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e0:	e049      	b.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d119      	bne.n	8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0210 	mvn.w	r2, #16
 80034f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e030      	b.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe fa4c 	bl	80019c0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11d      	bne.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d016      	beq.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d1ae      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a4:	d11b      	bne.n	80035de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e108      	b.n	8003810 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fe f885 	bl	8001728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800362c:	d102      	bne.n	8003634 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fd4b 	bl	80050d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7c1a      	ldrb	r2, [r3, #16]
 8003646:	f88d 2000 	strb.w	r2, [sp]
 800364a:	3304      	adds	r3, #4
 800364c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364e:	f001 fcdd 	bl	800500c <USB_CoreInit>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0d5      	b.n	8003810 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fd43 	bl	80050f6 <USB_SetCurrentMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0c6      	b.n	8003810 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e04a      	b.n	800371e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3315      	adds	r3, #21
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3314      	adds	r3, #20
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	b298      	uxth	r0, r3
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	332e      	adds	r3, #46	@ 0x2e
 80036c4:	4602      	mov	r2, r0
 80036c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3318      	adds	r3, #24
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	331c      	adds	r3, #28
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3320      	adds	r3, #32
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3324      	adds	r3, #36	@ 0x24
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3af      	bcc.n	8003688 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e044      	b.n	80037b8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	3301      	adds	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3b5      	bcc.n	800372e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7c1a      	ldrb	r2, [r3, #16]
 80037ca:	f88d 2000 	strb.w	r2, [sp]
 80037ce:	3304      	adds	r3, #4
 80037d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d2:	f001 fcdd 	bl	8005190 <USB_DevInit>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e013      	b.n	8003810 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b1b      	ldrb	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f80a 	bl	8003818 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fe98 	bl	800553e <USB_DevDisconnect>

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384a:	f043 0303 	orr.w	r3, r3, #3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cc      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d90c      	bls.n	800389c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a58      	ldr	r2, [pc, #352]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d003      	beq.n	800391e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e067      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4934      	ldr	r1, [pc, #208]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe f836 	bl	80019c0 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe f832 	bl	80019c0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20c      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 fb7f 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd ff96 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023c00 	.word	0x40023c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08005670 	.word	0x08005670
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	@ (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08005680 	.word	0x08005680

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a70:	f7ff ffdc 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0b5b      	lsrs	r3, r3, #13
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	@ (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08005680 	.word	0x08005680

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003acc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	496c      	ldr	r1, [pc, #432]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003aea:	2301      	movs	r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003afa:	4b64      	ldr	r3, [pc, #400]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b00:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	4960      	ldr	r1, [pc, #384]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d017      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b28:	4b58      	ldr	r3, [pc, #352]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	4955      	ldr	r1, [pc, #340]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d101      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b64:	4b49      	ldr	r3, [pc, #292]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b72:	4946      	ldr	r1, [pc, #280]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b82:	d101      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b90:	2301      	movs	r3, #1
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 808a 	beq.w	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a38      	ldr	r2, [pc, #224]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bbe:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bca:	f7fd fef9 	bl	80019c0 <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fef5 	bl	80019c0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e278      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf0:	4b26      	ldr	r3, [pc, #152]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c18:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c24:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c2a:	4b18      	ldr	r3, [pc, #96]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d114      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd fec3 	bl	80019c0 <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd febf 	bl	80019c0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e240      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6c:	d114      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c6e:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c82:	4902      	ldr	r1, [pc, #8]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000
 8003c94:	42470e40 	.word	0x42470e40
 8003c98:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a49      	ldr	r2, [pc, #292]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ca2:	6093      	str	r3, [r2, #8]
 8003ca4:	4b47      	ldr	r3, [pc, #284]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	4944      	ldr	r1, [pc, #272]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	4937      	ldr	r1, [pc, #220]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cfa:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d08:	492e      	ldr	r1, [pc, #184]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d1c:	4b29      	ldr	r3, [pc, #164]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d22:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	4926      	ldr	r1, [pc, #152]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	491a      	ldr	r1, [pc, #104]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d011      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7c:	4911      	ldr	r1, [pc, #68]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da0:	f040 80ff 	bne.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fe09 	bl	80019c0 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003db2:	f7fd fe05 	bl	80019c0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d907      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e188      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	424711e0 	.word	0x424711e0
 8003dcc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ea      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d124      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e04:	4b71      	ldr	r3, [pc, #452]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	3301      	adds	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e16:	4b6d      	ldr	r3, [pc, #436]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e1c:	0e1b      	lsrs	r3, r3, #24
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	4961      	ldr	r1, [pc, #388]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d035      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e78:	d130      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e7a:	4b54      	ldr	r3, [pc, #336]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	071b      	lsls	r3, r3, #28
 8003ebc:	4943      	ldr	r1, [pc, #268]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ec4:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eca:	f023 021f 	bic.w	r2, r3, #31
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	493d      	ldr	r1, [pc, #244]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d029      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef0:	d124      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f04:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0a:	0f1b      	lsrs	r3, r3, #28
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	019b      	lsls	r3, r3, #6
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	3b01      	subs	r3, #1
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	071b      	lsls	r3, r3, #28
 8003f34:	4925      	ldr	r1, [pc, #148]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	4917      	ldr	r1, [pc, #92]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f76:	4b16      	ldr	r3, [pc, #88]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd fd20 	bl	80019c0 <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f84:	f7fd fd1c 	bl	80019c0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e09f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 8095 	bne.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd fd06 	bl	80019c0 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fb6:	e00f      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb8:	f7fd fd02 	bl	80019c0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d908      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e085      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	42470068 	.word	0x42470068
 8003fd4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd8:	4b41      	ldr	r3, [pc, #260]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe4:	d0e8      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	d127      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800400e:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	431a      	orrs	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	4928      	ldr	r1, [pc, #160]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004044:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800404a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	3b01      	subs	r3, #1
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	4922      	ldr	r1, [pc, #136]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004072:	d118      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	0e1b      	lsrs	r3, r3, #24
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	4910      	ldr	r1, [pc, #64]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a6:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fc88 	bl	80019c0 <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b4:	f7fd fc84 	bl	80019c0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e007      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d2:	d1ef      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3730      	adds	r7, #48	@ 0x30
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470070 	.word	0x42470070

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b0ae      	sub	sp, #184	@ 0xb8
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410e:	4bcb      	ldr	r3, [pc, #812]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b0c      	cmp	r3, #12
 8004118:	f200 8206 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x440>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004159 	.word	0x08004159
 8004128:	08004529 	.word	0x08004529
 800412c:	08004529 	.word	0x08004529
 8004130:	08004529 	.word	0x08004529
 8004134:	08004161 	.word	0x08004161
 8004138:	08004529 	.word	0x08004529
 800413c:	08004529 	.word	0x08004529
 8004140:	08004529 	.word	0x08004529
 8004144:	08004169 	.word	0x08004169
 8004148:	08004529 	.word	0x08004529
 800414c:	08004529 	.word	0x08004529
 8004150:	08004529 	.word	0x08004529
 8004154:	08004359 	.word	0x08004359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4bb9      	ldr	r3, [pc, #740]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x358>)
 800415a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800415e:	e1e7      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004160:	4bb8      	ldr	r3, [pc, #736]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004166:	e1e3      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4bb4      	ldr	r3, [pc, #720]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004174:	4bb1      	ldr	r3, [pc, #708]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d071      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4bae      	ldr	r3, [pc, #696]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800418c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	0159      	lsls	r1, r3, #5
 80041b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b8:	0150      	lsls	r0, r2, #5
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4621      	mov	r1, r4
 80041c0:	1a51      	subs	r1, r2, r1
 80041c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80041c4:	4629      	mov	r1, r5
 80041c6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80041d8:	4649      	mov	r1, r9
 80041da:	018b      	lsls	r3, r1, #6
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e2:	4641      	mov	r1, r8
 80041e4:	018a      	lsls	r2, r1, #6
 80041e6:	4641      	mov	r1, r8
 80041e8:	1a51      	subs	r1, r2, r1
 80041ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041ec:	4649      	mov	r1, r9
 80041ee:	eb63 0301 	sbc.w	r3, r3, r1
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004200:	4649      	mov	r1, r9
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4641      	mov	r1, r8
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4622      	mov	r2, r4
 8004216:	189b      	adds	r3, r3, r2
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
 800421a:	462b      	mov	r3, r5
 800421c:	460a      	mov	r2, r1
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004230:	4629      	mov	r1, r5
 8004232:	024b      	lsls	r3, r1, #9
 8004234:	4621      	mov	r1, r4
 8004236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800423a:	4621      	mov	r1, r4
 800423c:	024a      	lsls	r2, r1, #9
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004254:	f7fc fc7e 	bl	8000b54 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004262:	e067      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b75      	ldr	r3, [pc, #468]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800427e:	2300      	movs	r3, #0
 8004280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	0159      	lsls	r1, r3, #5
 8004294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004298:	0150      	lsls	r0, r2, #5
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4621      	mov	r1, r4
 80042a0:	1a51      	subs	r1, r2, r1
 80042a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb63 0301 	sbc.w	r3, r3, r1
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80042b8:	4649      	mov	r1, r9
 80042ba:	018b      	lsls	r3, r1, #6
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c2:	4641      	mov	r1, r8
 80042c4:	018a      	lsls	r2, r1, #6
 80042c6:	4641      	mov	r1, r8
 80042c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042cc:	4649      	mov	r1, r9
 80042ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e6:	4692      	mov	sl, r2
 80042e8:	469b      	mov	fp, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	eb1a 0303 	adds.w	r3, sl, r3
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	462b      	mov	r3, r5
 80042f4:	eb4b 0303 	adc.w	r3, fp, r3
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800431c:	2200      	movs	r2, #0
 800431e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004320:	677a      	str	r2, [r7, #116]	@ 0x74
 8004322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004326:	f7fc fc15 	bl	8000b54 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004334:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800434a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004356:	e0eb      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004358:	4b38      	ldr	r3, [pc, #224]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004364:	4b35      	ldr	r3, [pc, #212]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06b      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	2200      	movs	r2, #0
 8004378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800437c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	663b      	str	r3, [r7, #96]	@ 0x60
 8004384:	2300      	movs	r3, #0
 8004386:	667b      	str	r3, [r7, #100]	@ 0x64
 8004388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4621      	mov	r1, r4
 80043a6:	1a51      	subs	r1, r2, r1
 80043a8:	61b9      	str	r1, [r7, #24]
 80043aa:	4629      	mov	r1, r5
 80043ac:	eb63 0301 	sbc.w	r3, r3, r1
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043be:	4659      	mov	r1, fp
 80043c0:	018b      	lsls	r3, r1, #6
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c8:	4651      	mov	r1, sl
 80043ca:	018a      	lsls	r2, r1, #6
 80043cc:	4651      	mov	r1, sl
 80043ce:	ebb2 0801 	subs.w	r8, r2, r1
 80043d2:	4659      	mov	r1, fp
 80043d4:	eb63 0901 	sbc.w	r9, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ec:	4690      	mov	r8, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	eb18 0303 	adds.w	r3, r8, r3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	462b      	mov	r3, r5
 80043fa:	eb49 0303 	adc.w	r3, r9, r3
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800440c:	4629      	mov	r1, r5
 800440e:	024b      	lsls	r3, r1, #9
 8004410:	4621      	mov	r1, r4
 8004412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004416:	4621      	mov	r1, r4
 8004418:	024a      	lsls	r2, r1, #9
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004422:	2200      	movs	r2, #0
 8004424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800442c:	f7fc fb92 	bl	8000b54 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800443a:	e065      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x420>
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4b3d      	ldr	r3, [pc, #244]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	2200      	movs	r2, #0
 8004450:	4618      	mov	r0, r3
 8004452:	4611      	mov	r1, r2
 8004454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004458:	653b      	str	r3, [r7, #80]	@ 0x50
 800445a:	2300      	movs	r3, #0
 800445c:	657b      	str	r3, [r7, #84]	@ 0x54
 800445e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4641      	mov	r1, r8
 800447c:	1a51      	subs	r1, r2, r1
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	4649      	mov	r1, r9
 8004482:	eb63 0301 	sbc.w	r3, r3, r1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004494:	4659      	mov	r1, fp
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449e:	4651      	mov	r1, sl
 80044a0:	018a      	lsls	r2, r1, #6
 80044a2:	4651      	mov	r1, sl
 80044a4:	1a54      	subs	r4, r2, r1
 80044a6:	4659      	mov	r1, fp
 80044a8:	eb63 0501 	sbc.w	r5, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	00eb      	lsls	r3, r5, #3
 80044b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ba:	00e2      	lsls	r2, r4, #3
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	18e3      	adds	r3, r4, r3
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	464b      	mov	r3, r9
 80044c8:	eb45 0303 	adc.w	r3, r5, r3
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044f0:	2200      	movs	r2, #0
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80044f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044fa:	f7fc fb2b 	bl	8000b54 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4613      	mov	r3, r2
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004508:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0f1b      	lsrs	r3, r3, #28
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800451a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004526:	e003      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800452e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004534:	4618      	mov	r0, r3
 8004536:	37b8      	adds	r7, #184	@ 0xb8
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e28d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8083 	beq.w	800466e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004568:	4b94      	ldr	r3, [pc, #592]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b04      	cmp	r3, #4
 8004572:	d019      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004574:	4b91      	ldr	r3, [pc, #580]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
        || \
 800457c:	2b08      	cmp	r3, #8
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004580:	4b8e      	ldr	r3, [pc, #568]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b8b      	ldr	r3, [pc, #556]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b84      	ldr	r3, [pc, #528]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x124>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e25a      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x90>
 80045ca:	4b7c      	ldr	r3, [pc, #496]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7b      	ldr	r2, [pc, #492]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0xb4>
 80045e2:	4b76      	ldr	r3, [pc, #472]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a75      	ldr	r2, [pc, #468]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b73      	ldr	r3, [pc, #460]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a72      	ldr	r2, [pc, #456]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045fc:	4b6f      	ldr	r3, [pc, #444]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b6c      	ldr	r3, [pc, #432]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6b      	ldr	r2, [pc, #428]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd f9d0 	bl	80019c0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fd f9cc 	bl	80019c0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e21f      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xdc>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd f9bc 	bl	80019c0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fd f9b8 	bl	80019c0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e20b      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b57      	ldr	r3, [pc, #348]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x104>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06f      	beq.n	800475a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800467a:	4b50      	ldr	r3, [pc, #320]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004686:	4b4d      	ldr	r3, [pc, #308]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
        || \
 800468e:	2b08      	cmp	r3, #8
 8004690:	d105      	bne.n	800469e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004692:	4b4a      	ldr	r3, [pc, #296]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b47      	ldr	r3, [pc, #284]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1d3      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4937      	ldr	r1, [pc, #220]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e2:	e03a      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ec:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_RCC_OscConfig+0x278>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fd f965 	bl	80019c0 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fa:	f7fd f961 	bl	80019c0 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e1b4      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4925      	ldr	r1, [pc, #148]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472e:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <HAL_RCC_OscConfig+0x278>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fd f944 	bl	80019c0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473c:	f7fd f940 	bl	80019c0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e193      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d036      	beq.n	80047d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_RCC_OscConfig+0x27c>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fd f924 	bl	80019c0 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fd f920 	bl	80019c0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e173      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x234>
 800479a:	e01b      	b.n	80047d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479c:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_RCC_OscConfig+0x27c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fd f90d 	bl	80019c0 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	e00e      	b.n	80047c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fd f909 	bl	80019c0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d907      	bls.n	80047c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e15c      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	42470000 	.word	0x42470000
 80047c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b8a      	ldr	r3, [pc, #552]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ea      	bne.n	80047aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8097 	beq.w	8004910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b83      	ldr	r3, [pc, #524]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	4b7f      	ldr	r3, [pc, #508]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	4a7e      	ldr	r2, [pc, #504]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	@ 0x40
 8004802:	4b7c      	ldr	r3, [pc, #496]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b79      	ldr	r3, [pc, #484]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d118      	bne.n	8004850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481e:	4b76      	ldr	r3, [pc, #472]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482a:	f7fd f8c9 	bl	80019c0 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004832:	f7fd f8c5 	bl	80019c0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e118      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4b6c      	ldr	r3, [pc, #432]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x31e>
 8004858:	4b66      	ldr	r3, [pc, #408]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	4a65      	ldr	r2, [pc, #404]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	@ 0x70
 8004864:	e01c      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x340>
 800486e:	4b61      	ldr	r3, [pc, #388]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	4a60      	ldr	r2, [pc, #384]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6713      	str	r3, [r2, #112]	@ 0x70
 800487a:	4b5e      	ldr	r3, [pc, #376]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	4a5d      	ldr	r2, [pc, #372]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6713      	str	r3, [r2, #112]	@ 0x70
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004888:	4b5a      	ldr	r3, [pc, #360]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	4a59      	ldr	r2, [pc, #356]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6713      	str	r3, [r2, #112]	@ 0x70
 8004894:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd f88a 	bl	80019c0 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd f886 	bl	80019c0 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0d7      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	4b4b      	ldr	r3, [pc, #300]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCC_OscConfig+0x368>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fd f874 	bl	80019c0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fd f870 	bl	80019c0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0c1      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f2:	4b40      	ldr	r3, [pc, #256]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b3b      	ldr	r3, [pc, #236]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	4a3a      	ldr	r2, [pc, #232]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80ad 	beq.w	8004a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491a:	4b36      	ldr	r3, [pc, #216]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b08      	cmp	r3, #8
 8004924:	d060      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d145      	bne.n	80049ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd f844 	bl	80019c0 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fd f840 	bl	80019c0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e093      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b29      	ldr	r3, [pc, #164]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	491b      	ldr	r1, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd f815 	bl	80019c0 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd f811 	bl	80019c0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e064      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x452>
 80049b8:	e05c      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fc fffe 	bl	80019c0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fc fffa 	bl	80019c0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x480>
 80049e6:	e045      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e040      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a00:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <HAL_RCC_OscConfig+0x538>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d030      	beq.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d129      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d122      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d119      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10f      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fdc2 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f82b 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b0c0      	sub	sp, #256	@ 0x100
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	ea40 0301 	orr.w	r3, r0, r1
 8004b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b7c:	f021 010c 	bic.w	r1, r1, #12
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	6999      	ldr	r1, [r3, #24]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	ea40 0301 	orr.w	r3, r0, r1
 8004baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <UART_SetConfig+0x2cc>)
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <UART_SetConfig+0xa0>
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004df4 <UART_SetConfig+0x2d0>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d104      	bne.n	8004bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7fe ff52 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bcc:	e003      	b.n	8004bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bce:	f7fe ff39 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be0:	f040 810c 	bne.w	8004dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c06:	4621      	mov	r1, r4
 8004c08:	eb12 0801 	adds.w	r8, r2, r1
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb43 0901 	adc.w	r9, r3, r1
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	eb18 0303 	adds.w	r3, r8, r3
 8004c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c34:	462b      	mov	r3, r5
 8004c36:	eb49 0303 	adc.w	r3, r9, r3
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c52:	460b      	mov	r3, r1
 8004c54:	18db      	adds	r3, r3, r3
 8004c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c58:	4613      	mov	r3, r2
 8004c5a:	eb42 0303 	adc.w	r3, r2, r3
 8004c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c68:	f7fb ff74 	bl	8000b54 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c94:	415b      	adcs	r3, r3
 8004c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	18db      	adds	r3, r3, r3
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	4613      	mov	r3, r2
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cfe:	f7fb ff29 	bl	8000b54 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2264      	movs	r2, #100	@ 0x64
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	1acb      	subs	r3, r1, r3
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d20:	fba3 2302 	umull	r2, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da4:	460b      	mov	r3, r1
 8004da6:	18db      	adds	r3, r3, r3
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004daa:	4613      	mov	r3, r2
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dba:	f7fb fecb 	bl	8000b54 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	2164      	movs	r1, #100	@ 0x64
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	3332      	adds	r3, #50	@ 0x32
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 0207 	and.w	r2, r3, #7
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4422      	add	r2, r4
 8004dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dec:	e106      	b.n	8004ffc <UART_SetConfig+0x4d8>
 8004dee:	bf00      	nop
 8004df0:	40011000 	.word	0x40011000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	6239      	str	r1, [r7, #32]
 8004e16:	415b      	adcs	r3, r3
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1e:	4641      	mov	r1, r8
 8004e20:	1854      	adds	r4, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb43 0501 	adc.w	r5, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e44:	464b      	mov	r3, r9
 8004e46:	eb45 0303 	adc.w	r3, r5, r3
 8004e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e74:	4621      	mov	r1, r4
 8004e76:	008a      	lsls	r2, r1, #2
 8004e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e7c:	f7fb fe6a 	bl	8000b54 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b60      	ldr	r3, [pc, #384]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	61b9      	str	r1, [r7, #24]
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	1851      	adds	r1, r2, r1
 8004eb4:	6139      	str	r1, [r7, #16]
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec8:	4659      	mov	r1, fp
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4642      	mov	r2, r8
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f08:	4649      	mov	r1, r9
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f12:	4641      	mov	r1, r8
 8004f14:	008a      	lsls	r2, r1, #2
 8004f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f1a:	f7fb fe1b 	bl	8000b54 <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	4b38      	ldr	r3, [pc, #224]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2264      	movs	r2, #100	@ 0x64
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	1acb      	subs	r3, r1, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	@ 0x32
 8004f38:	4a33      	ldr	r2, [pc, #204]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f44:	441c      	add	r4, r3
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f96:	464b      	mov	r3, r9
 8004f98:	460a      	mov	r2, r1
 8004f9a:	eb42 0303 	adc.w	r3, r2, r3
 8004f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004faa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb8:	4649      	mov	r1, r9
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	008a      	lsls	r2, r1, #2
 8004fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fca:	f7fb fdc3 	bl	8000b54 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	@ 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	3332      	adds	r3, #50	@ 0x32
 8004fe6:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4422      	add	r2, r4
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005002:	46bd      	mov	sp, r7
 8005004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800500c:	b084      	sub	sp, #16
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	f107 001c 	add.w	r0, r7, #28
 800501a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800501e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005022:	2b01      	cmp	r3, #1
 8005024:	d123      	bne.n	800506e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800503a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800504e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa9a 	bl	800559c <USB_CoreReset>
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e01b      	b.n	80050a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa8e 	bl	800559c <USB_CoreReset>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005084:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	@ 0x38
 8005098:	e005      	b.n	80050a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050a6:	7fbb      	ldrb	r3, [r7, #30]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10b      	bne.n	80050c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f043 0206 	orr.w	r2, r3, #6
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050d0:	b004      	add	sp, #16
 80050d2:	4770      	bx	lr

080050d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 0201 	bic.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d115      	bne.n	8005144 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005124:	200a      	movs	r0, #10
 8005126:	f7fc fc57 	bl	80019d8 <HAL_Delay>
      ms += 10U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	330a      	adds	r3, #10
 800512e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fa25 	bl	8005580 <USB_GetMode>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d01e      	beq.n	800517a <USB_SetCurrentMode+0x84>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005140:	d9f0      	bls.n	8005124 <USB_SetCurrentMode+0x2e>
 8005142:	e01a      	b.n	800517a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d115      	bne.n	8005176 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005156:	200a      	movs	r0, #10
 8005158:	f7fc fc3e 	bl	80019d8 <HAL_Delay>
      ms += 10U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	330a      	adds	r3, #10
 8005160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa0c 	bl	8005580 <USB_GetMode>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <USB_SetCurrentMode+0x84>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2bc7      	cmp	r3, #199	@ 0xc7
 8005172:	d9f0      	bls.n	8005156 <USB_SetCurrentMode+0x60>
 8005174:	e001      	b.n	800517a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e005      	b.n	8005186 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2bc8      	cmp	r3, #200	@ 0xc8
 800517e:	d101      	bne.n	8005184 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e009      	b.n	80051c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3340      	adds	r3, #64	@ 0x40
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0e      	cmp	r3, #14
 80051c8:	d9f2      	bls.n	80051b0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11c      	bne.n	800520c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e005      	b.n	8005218 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005224:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10d      	bne.n	8005248 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800522c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005234:	2100      	movs	r1, #0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f968 	bl	800550c <USB_SetDevSpeed>
 800523c:	e008      	b.n	8005250 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800523e:	2101      	movs	r1, #1
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f963 	bl	800550c <USB_SetDevSpeed>
 8005246:	e003      	b.n	8005250 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005248:	2103      	movs	r1, #3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f95e 	bl	800550c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005250:	2110      	movs	r1, #16
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f8fa 	bl	800544c <USB_FlushTxFifo>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f924 	bl	80054b0 <USB_FlushRxFifo>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e043      	b.n	8005324 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052b2:	d118      	bne.n	80052e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e013      	b.n	80052f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e008      	b.n	80052f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f2:	461a      	mov	r2, r3
 80052f4:	2300      	movs	r3, #0
 80052f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005316:	461a      	mov	r2, r3
 8005318:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800531c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3301      	adds	r3, #1
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005328:	461a      	mov	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4293      	cmp	r3, r2
 800532e:	d3b5      	bcc.n	800529c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e043      	b.n	80053be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534c:	d118      	bne.n	8005380 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e013      	b.n	8005392 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e008      	b.n	8005392 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538c:	461a      	mov	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	461a      	mov	r2, r3
 80053b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3301      	adds	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053c2:	461a      	mov	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d3b5      	bcc.n	8005336 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80053ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f043 0210 	orr.w	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <USB_DevInit+0x2b8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800540c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f043 0208 	orr.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005420:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005430:	f043 0304 	orr.w	r3, r3, #4
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005444:	b004      	add	sp, #16
 8005446:	4770      	bx	lr
 8005448:	803c3800 	.word	0x803c3800

0800544c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005466:	d901      	bls.n	800546c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e01b      	b.n	80054a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	daf2      	bge.n	800545a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	019b      	lsls	r3, r3, #6
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005490:	d901      	bls.n	8005496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e006      	b.n	80054a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d0f0      	beq.n	8005484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c8:	d901      	bls.n	80054ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e018      	b.n	8005500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	daf2      	bge.n	80054bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2210      	movs	r2, #16
 80054de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054ec:	d901      	bls.n	80054f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e006      	b.n	8005500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d0f0      	beq.n	80054e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005558:	f023 0303 	bic.w	r3, r3, #3
 800555c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0301 	and.w	r3, r3, #1
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055b4:	d901      	bls.n	80055ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e01b      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	daf2      	bge.n	80055a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055de:	d901      	bls.n	80055e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e006      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d0f0      	beq.n	80055d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <memset>:
 80055fe:	4402      	add	r2, r0
 8005600:	4603      	mov	r3, r0
 8005602:	4293      	cmp	r3, r2
 8005604:	d100      	bne.n	8005608 <memset+0xa>
 8005606:	4770      	bx	lr
 8005608:	f803 1b01 	strb.w	r1, [r3], #1
 800560c:	e7f9      	b.n	8005602 <memset+0x4>
	...

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	4d0d      	ldr	r5, [pc, #52]	@ (8005648 <__libc_init_array+0x38>)
 8005614:	4c0d      	ldr	r4, [pc, #52]	@ (800564c <__libc_init_array+0x3c>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	2600      	movs	r6, #0
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	4d0b      	ldr	r5, [pc, #44]	@ (8005650 <__libc_init_array+0x40>)
 8005622:	4c0c      	ldr	r4, [pc, #48]	@ (8005654 <__libc_init_array+0x44>)
 8005624:	f000 f818 	bl	8005658 <_init>
 8005628:	1b64      	subs	r4, r4, r5
 800562a:	10a4      	asrs	r4, r4, #2
 800562c:	2600      	movs	r6, #0
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	f855 3b04 	ldr.w	r3, [r5], #4
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	08005698 	.word	0x08005698
 800564c:	08005698 	.word	0x08005698
 8005650:	08005698 	.word	0x08005698
 8005654:	0800569c 	.word	0x0800569c

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
