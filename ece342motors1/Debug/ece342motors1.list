
ece342motors1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005404  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080055ec  080055ec  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f4  080055f4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080055fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  2000000c  08005608  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08005608  0000760c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa22  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002362  00000000  00000000  00016a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00018dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a83  00000000  00000000  00019b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214ee  00000000  00000000  0001a5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011611  00000000  00000000  0003baa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9bbf  00000000  00000000  0004d0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  00116cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011a70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080055b4 	.word	0x080055b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080055b4 	.word	0x080055b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f107 030f 	add.w	r3, r7, #15
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2180      	movs	r1, #128	@ 0x80
 8000d5c:	4819      	ldr	r0, [pc, #100]	@ (8000dc4 <PCA9685_SetBit+0x90>)
 8000d5e:	f001 fe0d 	bl	800297c <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10d      	bne.n	8000d84 <PCA9685_SetBit+0x50>
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e00a      	b.n	8000d9a <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2201      	movs	r2, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	b25a      	sxtb	r2, r3
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	230a      	movs	r3, #10
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	2301      	movs	r3, #1
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	f107 030f 	add.w	r3, r7, #15
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <PCA9685_SetBit+0x90>)
 8000db2:	f001 fce9 	bl	8002788 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fdd4 	bl	8001964 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000028 	.word	0x20000028

08000dc8 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03; // why?
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d902      	bls.n	8000de2 <PCA9685_SetPWMFrequency+0x1a>
 8000ddc:	2303      	movs	r3, #3
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e00c      	b.n	8000dfc <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	2b18      	cmp	r3, #24
 8000de6:	d802      	bhi.n	8000dee <PCA9685_SetPWMFrequency+0x26>
 8000de8:	23ff      	movs	r3, #255	@ 0xff
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e006      	b.n	8000dfc <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	031b      	lsls	r3, r3, #12
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <PCA9685_SetPWMFrequency+0x74>)
 8000df4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff ff97 	bl	8000d34 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000e06:	230a      	movs	r3, #10
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	f107 030f 	add.w	r3, r7, #15
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2301      	movs	r3, #1
 8000e16:	22fe      	movs	r2, #254	@ 0xfe
 8000e18:	2180      	movs	r1, #128	@ 0x80
 8000e1a:	4809      	ldr	r0, [pc, #36]	@ (8000e40 <PCA9685_SetPWMFrequency+0x78>)
 8000e1c:	f001 fcb4 	bl	8002788 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2104      	movs	r1, #4
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff ff85 	bl	8000d34 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff80 	bl	8000d34 <PCA9685_SetBit>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	017d7840 	.word	0x017d7840
 8000e40:	20000028 	.word	0x20000028

08000e44 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffb9 	bl	8000dc8 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2105      	movs	r1, #5
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ff6a 	bl	8000d34 <PCA9685_SetBit>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	460b      	mov	r3, r1
 8000e74:	80bb      	strh	r3, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	3306      	adds	r3, #6
 8000e82:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2304      	movs	r3, #4
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <PCA9685_SetPWM+0x60>)
 8000ebc:	f001 fc64 	bl	8002788 <HAL_I2C_Mem_Write>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000028 	.word	0x20000028
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	ed87 0a00 	vstr	s0, [r7]
 8000edc:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000ede:	6838      	ldr	r0, [r7, #0]
 8000ee0:	f7ff faf6 	bl	80004d0 <__aeabi_f2d>
 8000ee4:	a31b      	add	r3, pc, #108	@ (adr r3, 8000f54 <PCA9685_SetServoAngle+0x84>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff fb49 	bl	8000580 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <PCA9685_SetServoAngle+0x80>)
 8000efc:	f7ff fc6a 	bl	80007d4 <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f48 <PCA9685_SetServoAngle+0x78>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff f981 	bl	8000214 <__adddf3>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fd43 	bl	80009a4 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000f22:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2a:	ee17 3a90 	vmov	r3, s15
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff97 	bl	8000e68 <PCA9685_SetPWM>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	f3af 8000 	nop.w
 8000f48:	9999999a 	.word	0x9999999a
 8000f4c:	40599999 	.word	0x40599999
 8000f50:	40668000 	.word	0x40668000
 8000f54:	00000000 	.word	0x00000000
 8000f58:	40799800 	.word	0x40799800

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fc8e 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f8e8 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f9f8 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6c:	f000 f9d6 	bl	800131c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f70:	f000 f97c 	bl	800126c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f74:	f000 f9a4 	bl	80012c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000f78:	f000 f94a 	bl	8001210 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(50); // 50Hz for servo
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f7ff ff61 	bl	8000e44 <PCA9685_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	PCA9685_SetServoAngle(5, 0);
 8000f82:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8001120 <main+0x1c4>
 8000f86:	2005      	movs	r0, #5
 8000f88:	f7ff ffa2 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 36);
 8000f8c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8001124 <main+0x1c8>
 8000f90:	2007      	movs	r0, #7
 8000f92:	f7ff ff9d 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 72);
 8000f96:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001128 <main+0x1cc>
 8000f9a:	2009      	movs	r0, #9
 8000f9c:	f7ff ff98 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 108);
 8000fa0:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 800112c <main+0x1d0>
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f7ff ff93 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 144);
 8000faa:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001130 <main+0x1d4>
 8000fae:	200d      	movs	r0, #13
 8000fb0:	f7ff ff8e 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 180);
 8000fb4:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001134 <main+0x1d8>
 8000fb8:	200f      	movs	r0, #15
 8000fba:	f7ff ff89 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc2:	f000 fccf 	bl	8001964 <HAL_Delay>

		PCA9685_SetServoAngle(5, 36);
 8000fc6:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001124 <main+0x1c8>
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff ff80 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 72);
 8000fd0:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8001128 <main+0x1cc>
 8000fd4:	2007      	movs	r0, #7
 8000fd6:	f7ff ff7b 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 108);
 8000fda:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800112c <main+0x1d0>
 8000fde:	2009      	movs	r0, #9
 8000fe0:	f7ff ff76 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 144);
 8000fe4:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8001130 <main+0x1d4>
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f7ff ff71 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 180);
 8000fee:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001134 <main+0x1d8>
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f7ff ff6c 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 0);
 8000ff8:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8001120 <main+0x1c4>
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	f7ff ff67 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001006:	f000 fcad 	bl	8001964 <HAL_Delay>

		PCA9685_SetServoAngle(5, 72);
 800100a:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001128 <main+0x1cc>
 800100e:	2005      	movs	r0, #5
 8001010:	f7ff ff5e 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 108);
 8001014:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 800112c <main+0x1d0>
 8001018:	2007      	movs	r0, #7
 800101a:	f7ff ff59 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 144);
 800101e:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8001130 <main+0x1d4>
 8001022:	2009      	movs	r0, #9
 8001024:	f7ff ff54 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 180);
 8001028:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8001134 <main+0x1d8>
 800102c:	200b      	movs	r0, #11
 800102e:	f7ff ff4f 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 0);
 8001032:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001120 <main+0x1c4>
 8001036:	200d      	movs	r0, #13
 8001038:	f7ff ff4a 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 36);
 800103c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001124 <main+0x1c8>
 8001040:	200f      	movs	r0, #15
 8001042:	f7ff ff45 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104a:	f000 fc8b 	bl	8001964 <HAL_Delay>

		PCA9685_SetServoAngle(5, 108);
 800104e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800112c <main+0x1d0>
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ff3c 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 144);
 8001058:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8001130 <main+0x1d4>
 800105c:	2007      	movs	r0, #7
 800105e:	f7ff ff37 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 180);
 8001062:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001134 <main+0x1d8>
 8001066:	2009      	movs	r0, #9
 8001068:	f7ff ff32 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 0);
 800106c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001120 <main+0x1c4>
 8001070:	200b      	movs	r0, #11
 8001072:	f7ff ff2d 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 36);
 8001076:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001124 <main+0x1c8>
 800107a:	200d      	movs	r0, #13
 800107c:	f7ff ff28 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 72);
 8001080:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001128 <main+0x1cc>
 8001084:	200f      	movs	r0, #15
 8001086:	f7ff ff23 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 800108a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108e:	f000 fc69 	bl	8001964 <HAL_Delay>

		PCA9685_SetServoAngle(5, 144);
 8001092:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001130 <main+0x1d4>
 8001096:	2005      	movs	r0, #5
 8001098:	f7ff ff1a 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 180);
 800109c:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001134 <main+0x1d8>
 80010a0:	2007      	movs	r0, #7
 80010a2:	f7ff ff15 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 0);
 80010a6:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001120 <main+0x1c4>
 80010aa:	2009      	movs	r0, #9
 80010ac:	f7ff ff10 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 36);
 80010b0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001124 <main+0x1c8>
 80010b4:	200b      	movs	r0, #11
 80010b6:	f7ff ff0b 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 72);
 80010ba:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001128 <main+0x1cc>
 80010be:	200d      	movs	r0, #13
 80010c0:	f7ff ff06 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 108);
 80010c4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800112c <main+0x1d0>
 80010c8:	200f      	movs	r0, #15
 80010ca:	f7ff ff01 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d2:	f000 fc47 	bl	8001964 <HAL_Delay>

		PCA9685_SetServoAngle(5, 180);
 80010d6:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001134 <main+0x1d8>
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fef8 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(7, 0);
 80010e0:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001120 <main+0x1c4>
 80010e4:	2007      	movs	r0, #7
 80010e6:	f7ff fef3 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 36);
 80010ea:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001124 <main+0x1c8>
 80010ee:	2009      	movs	r0, #9
 80010f0:	f7ff feee 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, 72);
 80010f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001128 <main+0x1cc>
 80010f8:	200b      	movs	r0, #11
 80010fa:	f7ff fee9 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 108);
 80010fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800112c <main+0x1d0>
 8001102:	200d      	movs	r0, #13
 8001104:	f7ff fee4 	bl	8000ed0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(15, 144);
 8001108:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001130 <main+0x1d4>
 800110c:	200f      	movs	r0, #15
 800110e:	f7ff fedf 	bl	8000ed0 <PCA9685_SetServoAngle>
		HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001116:	f000 fc25 	bl	8001964 <HAL_Delay>
	  	PCA9685_SetServoAngle(5, 0);
 800111a:	bf00      	nop
 800111c:	e731      	b.n	8000f82 <main+0x26>
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	42100000 	.word	0x42100000
 8001128:	42900000 	.word	0x42900000
 800112c:	42d80000 	.word	0x42d80000
 8001130:	43100000 	.word	0x43100000
 8001134:	43340000 	.word	0x43340000

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	@ 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2234      	movs	r2, #52	@ 0x34
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f004 fa07 	bl	800555a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <SystemClock_Config+0xd0>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <SystemClock_Config+0xd0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <SystemClock_Config+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a22      	ldr	r2, [pc, #136]	@ (800120c <SystemClock_Config+0xd4>)
 8001182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <SystemClock_Config+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001198:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800119c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ac:	23a8      	movs	r3, #168	@ 0xa8
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 f96f 	bl	80044a4 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011cc:	f000 f982 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2105      	movs	r1, #5
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fae4 	bl	80037bc <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011fa:	f000 f96b 	bl	80014d4 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	@ 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C2_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C2_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C2_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C2_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C2_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C2_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C2_Init+0x50>)
 800124e:	f001 f957 	bl	8002500 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f93c 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000028 	.word	0x20000028
 8001264:	40005800 	.word	0x40005800
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_USART3_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_USART3_UART_Init+0x4c>)
 80012a4:	f003 fb9c 	bl	80049e0 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 f911 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000007c 	.word	0x2000007c
 80012bc:	40004800 	.word	0x40004800

080012c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ce:	2206      	movs	r2, #6
 80012d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001304:	f002 f920 	bl	8003548 <HAL_PCD_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 f8e1 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000124 	.word	0x20000124

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_DMA_Init+0x3c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <MX_DMA_Init+0x3c>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_DMA_Init+0x3c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	200e      	movs	r0, #14
 8001344:	f000 fc0d 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001348:	200e      	movs	r0, #14
 800134a:	f000 fc26 	bl	8001b9a <HAL_NVIC_EnableIRQ>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b53      	ldr	r3, [pc, #332]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <MX_GPIO_Init+0x168>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b50      	ldr	r3, [pc, #320]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b4c      	ldr	r3, [pc, #304]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b49      	ldr	r3, [pc, #292]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b45      	ldr	r3, [pc, #276]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a44      	ldr	r2, [pc, #272]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a36      	ldr	r2, [pc, #216]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <MX_GPIO_Init+0x168>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a2f      	ldr	r2, [pc, #188]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <MX_GPIO_Init+0x168>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <MX_GPIO_Init+0x168>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f244 0181 	movw	r1, #16513	@ 0x4081
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <MX_GPIO_Init+0x16c>)
 800143e:	f001 f845 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2140      	movs	r1, #64	@ 0x40
 8001446:	4821      	ldr	r0, [pc, #132]	@ (80014cc <MX_GPIO_Init+0x170>)
 8001448:	f001 f840 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001452:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	481b      	ldr	r0, [pc, #108]	@ (80014d0 <MX_GPIO_Init+0x174>)
 8001464:	f000 fe9e 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001468:	f244 0381 	movw	r3, #16513	@ 0x4081
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	@ (80014c8 <MX_GPIO_Init+0x16c>)
 8001482:	f000 fe8f 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001486:	2340      	movs	r3, #64	@ 0x40
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <MX_GPIO_Init+0x170>)
 800149e:	f000 fe81 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_GPIO_Init+0x170>)
 80014b6:	f000 fe75 	bl	80021a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	@ 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40020800 	.word	0x40020800

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <Error_Handler+0x8>

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <HAL_I2C_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156e:	2303      	movs	r3, #3
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001572:	2312      	movs	r3, #18
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800157e:	2304      	movs	r3, #4
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <HAL_I2C_MspInit+0x8c>)
 800158a:	f000 fe0b 	bl	80021a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_I2C_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40005800 	.word	0x40005800
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021400 	.word	0x40021400

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_UART_MspInit+0xe0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d15a      	bne.n	8001698 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a2e      	ldr	r2, [pc, #184]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a27      	ldr	r2, [pc, #156]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <HAL_UART_MspInit+0xe4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800161a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800162c:	2307      	movs	r3, #7
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <HAL_UART_MspInit+0xe8>)
 8001638:	f000 fdb4 	bl	80021a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_UART_MspInit+0xec>)
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_UART_MspInit+0xf0>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001644:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001648:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164a:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_UART_MspInit+0xec>)
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800165c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_UART_MspInit+0xec>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800167c:	480b      	ldr	r0, [pc, #44]	@ (80016ac <HAL_UART_MspInit+0xec>)
 800167e:	f000 faa7 	bl	8001bd0 <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001688:	f7ff ff24 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001690:	639a      	str	r2, [r3, #56]	@ 0x38
 8001692:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_UART_MspInit+0xec>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	@ 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40004800 	.word	0x40004800
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	200000c4 	.word	0x200000c4
 80016b0:	40026058 	.word	0x40026058

080016b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a0      	sub	sp, #128	@ 0x80
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	225c      	movs	r2, #92	@ 0x5c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 ff40 	bl	800555a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016e2:	d14e      	bne.n	8001782 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80016ea:	2300      	movs	r3, #0
 80016ec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 f97c 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016fe:	f7ff fee9 	bl	80014d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a20      	ldr	r2, [pc, #128]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800171e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001722:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001730:	230a      	movs	r3, #10
 8001732:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001738:	4619      	mov	r1, r3
 800173a:	4815      	ldr	r0, [pc, #84]	@ (8001790 <HAL_PCD_MspInit+0xdc>)
 800173c:	f000 fd32 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001744:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001752:	4619      	mov	r1, r3
 8001754:	480e      	ldr	r0, [pc, #56]	@ (8001790 <HAL_PCD_MspInit+0xdc>)
 8001756:	f000 fd25 	bl	80021a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001764:	6353      	str	r3, [r2, #52]	@ 0x34
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_PCD_MspInit+0xd8>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3780      	adds	r7, #128	@ 0x80
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f89b 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream3_IRQHandler+0x10>)
 80017fa:	f000 fa97 	bl	8001d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000c4 	.word	0x200000c4

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001864 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001830:	f7ff ffea 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	@ (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	@ (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	@ (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800185a:	f003 fe87 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb7d 	bl	8000f5c <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001870:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 8001874:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001878:	2000060c 	.word	0x2000060c

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f94f 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe14 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f967 	bl	8001bb6 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001900:	f000 f92f 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000608 	.word	0x20000608

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000608 	.word	0x20000608

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff feb6 	bl	800194c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e099      	b.n	8001d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0c:	e00f      	b.n	8001c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0e:	f7ff fe9d 	bl	800194c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d908      	bls.n	8001c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e078      	b.n	8001d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e8      	bne.n	8001c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4b38      	ldr	r3, [pc, #224]	@ (8001d28 <HAL_DMA_Init+0x158>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d107      	bne.n	8001c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	4313      	orrs	r3, r2
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f023 0307 	bic.w	r3, r3, #7
 8001cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d117      	bne.n	8001cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f9e9 	bl	80020ac <DMA_CheckFifoParam>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e016      	b.n	8001d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f9a0 	bl	8002040 <DMA_CalcBaseAndBitshift>
 8001d00:	4603      	mov	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	223f      	movs	r2, #63	@ 0x3f
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	f010803f 	.word	0xf010803f

08001d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d38:	4b8e      	ldr	r3, [pc, #568]	@ (8001f74 <HAL_DMA_IRQHandler+0x248>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f78 <HAL_DMA_IRQHandler+0x24c>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	2208      	movs	r2, #8
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d84:	2208      	movs	r2, #8
 8001d86:	409a      	lsls	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d012      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f043 0204 	orr.w	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	2210      	movs	r2, #16
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d043      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03c      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	2210      	movs	r2, #16
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d018      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d024      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
 8001e5a:	e01f      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0208 	bic.w	r2, r2, #8
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 808f 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8087 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d136      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0216 	bic.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_DMA_IRQHandler+0x1da>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	223f      	movs	r2, #63	@ 0x3f
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07e      	beq.n	8002038 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
        }
        return;
 8001f42:	e079      	b.n	8002038 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10d      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d031      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
 8001f70:	e02c      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000
 8001f78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e01e      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0210 	bic.w	r2, r2, #16
 8001faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d032      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	d307      	bcc.n	8002014 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f2      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x2cc>
 8002012:	e000      	b.n	8002016 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002014:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
 8002036:	e000      	b.n	800203a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002038:	bf00      	nop
    }
  }
}
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3b10      	subs	r3, #16
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800205a:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <DMA_CalcBaseAndBitshift+0x68>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d909      	bls.n	8002082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	1d1a      	adds	r2, r3, #4
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002080:	e007      	b.n	8002092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	aaaaaaab 	.word	0xaaaaaaab
 80020a8:	080055e4 	.word	0x080055e4

080020ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11f      	bne.n	8002106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d856      	bhi.n	800217a <DMA_CheckFifoParam+0xce>
 80020cc:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <DMA_CheckFifoParam+0x28>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020f7 	.word	0x080020f7
 80020dc:	080020e5 	.word	0x080020e5
 80020e0:	0800217b 	.word	0x0800217b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d046      	beq.n	800217e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f4:	e043      	b.n	800217e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020fe:	d140      	bne.n	8002182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002104:	e03d      	b.n	8002182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210e:	d121      	bne.n	8002154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d837      	bhi.n	8002186 <DMA_CheckFifoParam+0xda>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <DMA_CheckFifoParam+0x70>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002133 	.word	0x08002133
 8002124:	0800212d 	.word	0x0800212d
 8002128:	08002145 	.word	0x08002145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e030      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d025      	beq.n	800218a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002142:	e022      	b.n	800218a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002152:	e01c      	b.n	800218e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d903      	bls.n	8002162 <DMA_CheckFifoParam+0xb6>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d003      	beq.n	8002168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002160:	e018      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      break;
 8002166:	e015      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	e00b      	b.n	8002192 <DMA_CheckFifoParam+0xe6>
      break;
 800217a:	bf00      	nop
 800217c:	e00a      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e008      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e006      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e004      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e002      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;   
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
    }
  } 
  
  return status; 
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	e165      	b.n	800248c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8154 	bne.w	8002486 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d005      	beq.n	80021f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d130      	bne.n	8002258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 0201 	and.w	r2, r3, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b03      	cmp	r3, #3
 8002262:	d017      	beq.n	8002294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d123      	bne.n	80022e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	08da      	lsrs	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3208      	adds	r2, #8
 80022e2:	69b9      	ldr	r1, [r7, #24]
 80022e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80ae 	beq.w	8002486 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b5d      	ldr	r3, [pc, #372]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	4a5c      	ldr	r2, [pc, #368]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 8002334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002338:	6453      	str	r3, [r2, #68]	@ 0x44
 800233a:	4b5a      	ldr	r3, [pc, #360]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002346:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <HAL_GPIO_Init+0x304>)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4f      	ldr	r2, [pc, #316]	@ (80024ac <HAL_GPIO_Init+0x308>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x21a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4e      	ldr	r2, [pc, #312]	@ (80024b0 <HAL_GPIO_Init+0x30c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x216>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4d      	ldr	r2, [pc, #308]	@ (80024b4 <HAL_GPIO_Init+0x310>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x212>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4c      	ldr	r2, [pc, #304]	@ (80024b8 <HAL_GPIO_Init+0x314>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4b      	ldr	r2, [pc, #300]	@ (80024bc <HAL_GPIO_Init+0x318>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x20a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4a      	ldr	r2, [pc, #296]	@ (80024c0 <HAL_GPIO_Init+0x31c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x206>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	@ (80024c4 <HAL_GPIO_Init+0x320>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x202>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e00c      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00a      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023aa:	2305      	movs	r3, #5
 80023ac:	e008      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023ae:	2304      	movs	r3, #4
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x21c>
 80023be:	2300      	movs	r3, #0
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d0:	4935      	ldr	r1, [pc, #212]	@ (80024a8 <HAL_GPIO_Init+0x304>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023de:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002402:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002408:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800242c:	4a26      	ldr	r2, [pc, #152]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002432:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002480:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <HAL_GPIO_Init+0x324>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3301      	adds	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f ae96 	bls.w	80021c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	619a      	str	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e12b      	b.n	800276a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff f802 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	@ 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002564:	f001 fa1c 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a81      	ldr	r2, [pc, #516]	@ (8002774 <HAL_I2C_Init+0x274>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d807      	bhi.n	8002584 <HAL_I2C_Init+0x84>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a80      	ldr	r2, [pc, #512]	@ (8002778 <HAL_I2C_Init+0x278>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e006      	b.n	8002592 <HAL_I2C_Init+0x92>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a7d      	ldr	r2, [pc, #500]	@ (800277c <HAL_I2C_Init+0x27c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0e7      	b.n	800276a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a78      	ldr	r2, [pc, #480]	@ (8002780 <HAL_I2C_Init+0x280>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9b      	lsrs	r3, r3, #18
 80025a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002774 <HAL_I2C_Init+0x274>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d802      	bhi.n	80025d4 <HAL_I2C_Init+0xd4>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	e009      	b.n	80025e8 <HAL_I2C_Init+0xe8>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	4a69      	ldr	r2, [pc, #420]	@ (8002784 <HAL_I2C_Init+0x284>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	3301      	adds	r3, #1
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	495c      	ldr	r1, [pc, #368]	@ (8002774 <HAL_I2C_Init+0x274>)
 8002604:	428b      	cmp	r3, r1
 8002606:	d819      	bhi.n	800263c <HAL_I2C_Init+0x13c>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e59      	subs	r1, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fbb1 f3f3 	udiv	r3, r1, r3
 8002616:	1c59      	adds	r1, r3, #1
 8002618:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800261c:	400b      	ands	r3, r1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_I2C_Init+0x138>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e59      	subs	r1, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	e051      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 8002638:	2304      	movs	r3, #4
 800263a:	e04f      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <HAL_I2C_Init+0x168>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e012      	b.n	800268e <HAL_I2C_Init+0x18e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	0099      	lsls	r1, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x196>
 8002692:	2301      	movs	r3, #1
 8002694:	e022      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_I2C_Init+0x1bc>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e58      	subs	r0, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	440b      	add	r3, r1
 80026ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ba:	e00f      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	0099      	lsls	r1, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	6809      	ldr	r1, [r1, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800270a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6911      	ldr	r1, [r2, #16]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	000186a0 	.word	0x000186a0
 8002778:	001e847f 	.word	0x001e847f
 800277c:	003d08ff 	.word	0x003d08ff
 8002780:	431bde83 	.word	0x431bde83
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	460b      	mov	r3, r1
 800279c:	813b      	strh	r3, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a2:	f7ff f8d3 	bl	800194c <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	f040 80d9 	bne.w	8002968 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2319      	movs	r3, #25
 80027bc:	2201      	movs	r2, #1
 80027be:	496d      	ldr	r1, [pc, #436]	@ (8002974 <HAL_I2C_Mem_Write+0x1ec>)
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc8b 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_I2C_Mem_Write+0x56>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0c5      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d007      	beq.n	8002804 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	@ 0x21
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a4d      	ldr	r2, [pc, #308]	@ (8002978 <HAL_I2C_Mem_Write+0x1f0>)
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002846:	88f8      	ldrh	r0, [r7, #6]
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4603      	mov	r3, r0
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fac2 	bl	8002de0 <I2C_RequestMemoryWrite>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d052      	beq.n	8002908 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e081      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fd50 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Mem_Write+0x180>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1aa      	bne.n	8002866 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fd43 	bl	80033a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	2b04      	cmp	r3, #4
 8002926:	d107      	bne.n	8002938 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e016      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002996:	f7fe ffd9 	bl	800194c <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	f040 8214 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2319      	movs	r3, #25
 80029b0:	2201      	movs	r2, #1
 80029b2:	497b      	ldr	r1, [pc, #492]	@ (8002ba0 <HAL_I2C_Mem_Read+0x224>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb91 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	e207      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Mem_Read+0x56>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e200      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2222      	movs	r2, #34	@ 0x22
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	@ 0x40
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba4 <HAL_I2C_Mem_Read+0x228>)
 8002a38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a3a:	88f8      	ldrh	r0, [r7, #6]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	8979      	ldrh	r1, [r7, #10]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa5e 	bl	8002f0c <I2C_RequestMemoryRead>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1bc      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d113      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e190      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d11b      	bne.n	8002aca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e170      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d11b      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	e150      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b20:	e144      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 80f1 	bhi.w	8002d0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d123      	bne.n	8002b7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc79 	bl	8003430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e145      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b7a:	e117      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d14e      	bne.n	8002c22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4906      	ldr	r1, [pc, #24]	@ (8002ba8 <HAL_I2C_Mem_Read+0x22c>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 faa4 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e11a      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000
 8002ba8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c20:	e0c4      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	2200      	movs	r2, #0
 8002c2a:	496c      	ldr	r1, [pc, #432]	@ (8002ddc <HAL_I2C_Mem_Read+0x460>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa55 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0cb      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c84:	2200      	movs	r2, #0
 8002c86:	4955      	ldr	r1, [pc, #340]	@ (8002ddc <HAL_I2C_Mem_Read+0x460>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fa27 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e09d      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d0c:	e04e      	b.n	8002dac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb8c 	bl	8003430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e058      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d124      	bne.n	8002dac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d78:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f aeb6 	bne.w	8002b22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010004 	.word	0x00010004

08002de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	817b      	strh	r3, [r7, #10]
 8002df2:	460b      	mov	r3, r1
 8002df4:	813b      	strh	r3, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f960 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e30:	d103      	bne.n	8002e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e05f      	b.n	8002efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	492d      	ldr	r1, [pc, #180]	@ (8002f08 <I2C_RequestMemoryWrite+0x128>)
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f9bb 	bl	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e04c      	b.n	8002efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fa46 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d107      	bne.n	8002ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e02b      	b.n	8002efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	e021      	b.n	8002efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa20 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d107      	bne.n	8002eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e005      	b.n	8002efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	00010002 	.word	0x00010002

08002f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8c2 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f6c:	d103      	bne.n	8002f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0aa      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	4952      	ldr	r1, [pc, #328]	@ (80030d8 <I2C_RequestMemoryRead+0x1cc>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f91d 	bl	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e097      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	6a39      	ldr	r1, [r7, #32]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f9a8 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d107      	bne.n	8002fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e076      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe8:	893b      	ldrh	r3, [r7, #8]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]
 8002ff2:	e021      	b.n	8003038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003004:	6a39      	ldr	r1, [r7, #32]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f982 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	2b04      	cmp	r3, #4
 8003018:	d107      	bne.n	800302a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e050      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800302e:	893b      	ldrh	r3, [r7, #8]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	6a39      	ldr	r1, [r7, #32]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f967 	bl	8003310 <I2C_WaitOnTXEFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	2b04      	cmp	r3, #4
 800304e:	d107      	bne.n	8003060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e035      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2200      	movs	r2, #0
 800307c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f82b 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309a:	d103      	bne.n	80030a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e013      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	4906      	ldr	r1, [pc, #24]	@ (80030d8 <I2C_RequestMemoryRead+0x1cc>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f886 	bl	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	00010002 	.word	0x00010002

080030dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ec:	e048      	b.n	8003180 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f4:	d044      	beq.n	8003180 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fe fc29 	bl	800194c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d139      	bne.n	8003180 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10d      	bne.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	e00c      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	429a      	cmp	r2, r3
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e023      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10d      	bne.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	43da      	mvns	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	e00c      	b.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d093      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031de:	e071      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ee:	d123      	bne.n	8003238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e067      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800323e:	d041      	beq.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003240:	f7fe fb84 	bl	800194c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d302      	bcc.n	8003256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d136      	bne.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10c      	bne.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e00b      	b.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e021      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10c      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e00b      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f af6d 	bne.w	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800331c:	e034      	b.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8e3 	bl	80034ea <I2C_IsAcknowledgeFailed>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e034      	b.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d028      	beq.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe fb09 	bl	800194c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11d      	bne.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003356:	2b80      	cmp	r3, #128	@ 0x80
 8003358:	d016      	beq.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003392:	2b80      	cmp	r3, #128	@ 0x80
 8003394:	d1c3      	bne.n	800331e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ac:	e034      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f89b 	bl	80034ea <I2C_IsAcknowledgeFailed>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e034      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c4:	d028      	beq.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c6:	f7fe fac1 	bl	800194c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d302      	bcc.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d016      	beq.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d1c3      	bne.n	80033ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800343c:	e049      	b.n	80034d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d119      	bne.n	8003480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0210 	mvn.w	r2, #16
 8003454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e030      	b.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fe fa64 	bl	800194c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11d      	bne.n	80034d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d016      	beq.n	80034d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034dc:	2b40      	cmp	r3, #64	@ 0x40
 80034de:	d1ae      	bne.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003500:	d11b      	bne.n	800353a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800350a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f043 0204 	orr.w	r2, r3, #4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e108      	b.n	800376c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe f89d 	bl	80016b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003588:	d102      	bne.n	8003590 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fd4b 	bl	8005030 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7c1a      	ldrb	r2, [r3, #16]
 80035a2:	f88d 2000 	strb.w	r2, [sp]
 80035a6:	3304      	adds	r3, #4
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	f001 fcdd 	bl	8004f68 <USB_CoreInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d5      	b.n	800376c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fd43 	bl	8005052 <USB_SetCurrentMode>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0c6      	b.n	800376c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e04a      	b.n	800367a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3315      	adds	r3, #21
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3314      	adds	r3, #20
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	b298      	uxth	r0, r3
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	332e      	adds	r3, #46	@ 0x2e
 8003620:	4602      	mov	r2, r0
 8003622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3318      	adds	r3, #24
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	331c      	adds	r3, #28
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3320      	adds	r3, #32
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3324      	adds	r3, #36	@ 0x24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	3301      	adds	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	791b      	ldrb	r3, [r3, #4]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	429a      	cmp	r2, r3
 8003682:	d3af      	bcc.n	80035e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e044      	b.n	8003714 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	3301      	adds	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	791b      	ldrb	r3, [r3, #4]
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3b5      	bcc.n	800368a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7c1a      	ldrb	r2, [r3, #16]
 8003726:	f88d 2000 	strb.w	r2, [sp]
 800372a:	3304      	adds	r3, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	f001 fcdd 	bl	80050ec <USB_DevInit>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e013      	b.n	800376c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7b1b      	ldrb	r3, [r3, #12]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f80a 	bl	8003774 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fe98 	bl	800549a <USB_DevDisconnect>

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	f043 0303 	orr.w	r3, r3, #3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cc      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b68      	ldr	r3, [pc, #416]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d90c      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b65      	ldr	r3, [pc, #404]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a58      	ldr	r2, [pc, #352]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800381a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d044      	beq.n	80038dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d119      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	2b03      	cmp	r3, #3
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b3f      	ldr	r3, [pc, #252]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3b      	ldr	r3, [pc, #236]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e067      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b37      	ldr	r3, [pc, #220]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4934      	ldr	r1, [pc, #208]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7fe f84e 	bl	800194c <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fe f84a 	bl	800194c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e04f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b25      	ldr	r3, [pc, #148]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20c      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003942:	f000 fb7f 	bl	8004044 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	@ (800397c <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	@ (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd ffae 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023c00 	.word	0x40023c00
 8003978:	40023800 	.word	0x40023800
 800397c:	080055cc 	.word	0x080055cc
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a9b      	lsrs	r3, r3, #10
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	080055dc 	.word	0x080055dc

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffdc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	080055dc 	.word	0x080055dc

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	@ 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a28:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	496c      	ldr	r1, [pc, #432]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a56:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	4960      	ldr	r1, [pc, #384]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003a74:	2301      	movs	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d017      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a84:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	4955      	ldr	r1, [pc, #340]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d017      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac0:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ace:	4946      	ldr	r1, [pc, #280]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808a 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a38      	ldr	r2, [pc, #224]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b1a:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a33      	ldr	r2, [pc, #204]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fd ff11 	bl	800194c <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd ff0d 	bl	800194c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e278      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b40:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4c:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b54:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b74:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d114      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fd fedb 	bl	800194c <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd fed7 	bl	800194c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e240      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc8:	d114      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003bca:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	4902      	ldr	r1, [pc, #8]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
 8003be4:	e00c      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42470e40 	.word	0x42470e40
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a49      	ldr	r2, [pc, #292]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	4944      	ldr	r1, [pc, #272]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c24:	4b3f      	ldr	r3, [pc, #252]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c34:	4b3a      	ldr	r3, [pc, #232]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	4937      	ldr	r1, [pc, #220]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c56:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	492e      	ldr	r1, [pc, #184]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d011      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c78:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	4926      	ldr	r1, [pc, #152]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c96:	d101      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	491a      	ldr	r1, [pc, #104]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd8:	4911      	ldr	r1, [pc, #68]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003cea:	2301      	movs	r3, #1
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cfc:	f040 80ff 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d06:	f7fd fe21 	bl	800194c <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d0e:	f7fd fe1d 	bl	800194c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d907      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e188      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d20:	40023800 	.word	0x40023800
 8003d24:	424711e0 	.word	0x424711e0
 8003d28:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d028      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d124      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d60:	4b71      	ldr	r3, [pc, #452]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d72:	4b6d      	ldr	r3, [pc, #436]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d78:	0e1b      	lsrs	r3, r3, #24
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	4961      	ldr	r1, [pc, #388]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d035      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d130      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dd6:	4b54      	ldr	r3, [pc, #336]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dee:	0f1b      	lsrs	r3, r3, #28
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	019b      	lsls	r3, r3, #6
 8003e00:	431a      	orrs	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	071b      	lsls	r3, r3, #28
 8003e18:	4943      	ldr	r1, [pc, #268]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e20:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e26:	f023 021f 	bic.w	r2, r3, #31
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	493d      	ldr	r1, [pc, #244]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d029      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e4c:	d124      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e4e:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e60:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e66:	0f1b      	lsrs	r3, r3, #28
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	019b      	lsls	r3, r3, #6
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	071b      	lsls	r3, r3, #28
 8003e90:	4925      	ldr	r1, [pc, #148]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4917      	ldr	r1, [pc, #92]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed2:	4b16      	ldr	r3, [pc, #88]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fd38 	bl	800194c <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee0:	f7fd fd34 	bl	800194c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e09f      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 8095 	bne.w	8004030 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd fd1e 	bl	800194c <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f12:	e00f      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f14:	f7fd fd1a 	bl	800194c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d908      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e085      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470068 	.word	0x42470068
 8003f30:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f34:	4b41      	ldr	r3, [pc, #260]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f40:	d0e8      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d127      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f6a:	4b34      	ldr	r3, [pc, #208]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	431a      	orrs	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	4928      	ldr	r1, [pc, #160]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	4922      	ldr	r1, [pc, #136]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fce:	d118      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	0e1b      	lsrs	r3, r3, #24
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	019b      	lsls	r3, r3, #6
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4910      	ldr	r1, [pc, #64]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004008:	f7fd fca0 	bl	800194c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004010:	f7fd fc9c 	bl	800194c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e007      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800402e:	d1ef      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3730      	adds	r7, #48	@ 0x30
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	42470070 	.word	0x42470070

08004044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0ae      	sub	sp, #184	@ 0xb8
 800404a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800406a:	4bcb      	ldr	r3, [pc, #812]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b0c      	cmp	r3, #12
 8004074:	f200 8206 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x440>
 8004078:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <HAL_RCC_GetSysClockFreq+0x3c>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040b5 	.word	0x080040b5
 8004084:	08004485 	.word	0x08004485
 8004088:	08004485 	.word	0x08004485
 800408c:	08004485 	.word	0x08004485
 8004090:	080040bd 	.word	0x080040bd
 8004094:	08004485 	.word	0x08004485
 8004098:	08004485 	.word	0x08004485
 800409c:	08004485 	.word	0x08004485
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	08004485 	.word	0x08004485
 80040a8:	08004485 	.word	0x08004485
 80040ac:	08004485 	.word	0x08004485
 80040b0:	080042b5 	.word	0x080042b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4bb9      	ldr	r3, [pc, #740]	@ (800439c <HAL_RCC_GetSysClockFreq+0x358>)
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ba:	e1e7      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040bc:	4bb8      	ldr	r3, [pc, #736]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040c2:	e1e3      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c4:	4bb4      	ldr	r3, [pc, #720]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d0:	4bb1      	ldr	r3, [pc, #708]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d071      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4bae      	ldr	r3, [pc, #696]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80040ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004114:	0150      	lsls	r0, r2, #5
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4621      	mov	r1, r4
 800411c:	1a51      	subs	r1, r2, r1
 800411e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004120:	4629      	mov	r1, r5
 8004122:	eb63 0301 	sbc.w	r3, r3, r1
 8004126:	647b      	str	r3, [r7, #68]	@ 0x44
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004134:	4649      	mov	r1, r9
 8004136:	018b      	lsls	r3, r1, #6
 8004138:	4641      	mov	r1, r8
 800413a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413e:	4641      	mov	r1, r8
 8004140:	018a      	lsls	r2, r1, #6
 8004142:	4641      	mov	r1, r8
 8004144:	1a51      	subs	r1, r2, r1
 8004146:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004148:	4649      	mov	r1, r9
 800414a:	eb63 0301 	sbc.w	r3, r3, r1
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800415c:	4649      	mov	r1, r9
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4641      	mov	r1, r8
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4641      	mov	r1, r8
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4622      	mov	r2, r4
 8004172:	189b      	adds	r3, r3, r2
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30
 8004176:	462b      	mov	r3, r5
 8004178:	460a      	mov	r2, r1
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800418c:	4629      	mov	r1, r5
 800418e:	024b      	lsls	r3, r1, #9
 8004190:	4621      	mov	r1, r4
 8004192:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004196:	4621      	mov	r1, r4
 8004198:	024a      	lsls	r2, r1, #9
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80041b0:	f7fc fc48 	bl	8000a44 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041be:	e067      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4b75      	ldr	r3, [pc, #468]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80041d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041da:	2300      	movs	r3, #0
 80041dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004214:	4649      	mov	r1, r9
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4641      	mov	r1, r8
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4641      	mov	r1, r8
 8004224:	ebb2 0a01 	subs.w	sl, r2, r1
 8004228:	4649      	mov	r1, r9
 800422a:	eb63 0b01 	sbc.w	fp, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800423a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800423e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004242:	4692      	mov	sl, r2
 8004244:	469b      	mov	fp, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb1a 0303 	adds.w	r3, sl, r3
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	462b      	mov	r3, r5
 8004250:	eb4b 0303 	adc.w	r3, fp, r3
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004262:	4629      	mov	r1, r5
 8004264:	028b      	lsls	r3, r1, #10
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800426c:	4621      	mov	r1, r4
 800426e:	028a      	lsls	r2, r1, #10
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004278:	2200      	movs	r2, #0
 800427a:	673b      	str	r3, [r7, #112]	@ 0x70
 800427c:	677a      	str	r2, [r7, #116]	@ 0x74
 800427e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004282:	f7fc fbdf 	bl	8000a44 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4613      	mov	r3, r2
 800428c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004290:	4b41      	ldr	r3, [pc, #260]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80042a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042b2:	e0eb      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c0:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d06b      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042cc:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	2200      	movs	r2, #0
 80042d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e0:	2300      	movs	r3, #0
 80042e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80042e8:	4622      	mov	r2, r4
 80042ea:	462b      	mov	r3, r5
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fa:	0150      	lsls	r0, r2, #5
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4621      	mov	r1, r4
 8004302:	1a51      	subs	r1, r2, r1
 8004304:	61b9      	str	r1, [r7, #24]
 8004306:	4629      	mov	r1, r5
 8004308:	eb63 0301 	sbc.w	r3, r3, r1
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800431a:	4659      	mov	r1, fp
 800431c:	018b      	lsls	r3, r1, #6
 800431e:	4651      	mov	r1, sl
 8004320:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004324:	4651      	mov	r1, sl
 8004326:	018a      	lsls	r2, r1, #6
 8004328:	4651      	mov	r1, sl
 800432a:	ebb2 0801 	subs.w	r8, r2, r1
 800432e:	4659      	mov	r1, fp
 8004330:	eb63 0901 	sbc.w	r9, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004340:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004344:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004348:	4690      	mov	r8, r2
 800434a:	4699      	mov	r9, r3
 800434c:	4623      	mov	r3, r4
 800434e:	eb18 0303 	adds.w	r3, r8, r3
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	462b      	mov	r3, r5
 8004356:	eb49 0303 	adc.w	r3, r9, r3
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004368:	4629      	mov	r1, r5
 800436a:	024b      	lsls	r3, r1, #9
 800436c:	4621      	mov	r1, r4
 800436e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004372:	4621      	mov	r1, r4
 8004374:	024a      	lsls	r2, r1, #9
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800437e:	2200      	movs	r2, #0
 8004380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004382:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004384:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004388:	f7fc fb5c 	bl	8000a44 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004396:	e065      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x420>
 8004398:	40023800 	.word	0x40023800
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <HAL_RCC_GetSysClockFreq+0x458>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	2200      	movs	r2, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	4611      	mov	r1, r2
 80043b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b6:	2300      	movs	r3, #0
 80043b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80043be:	4642      	mov	r2, r8
 80043c0:	464b      	mov	r3, r9
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4641      	mov	r1, r8
 80043d8:	1a51      	subs	r1, r2, r1
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	4649      	mov	r1, r9
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043f0:	4659      	mov	r1, fp
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fa:	4651      	mov	r1, sl
 80043fc:	018a      	lsls	r2, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	1a54      	subs	r4, r2, r1
 8004402:	4659      	mov	r1, fp
 8004404:	eb63 0501 	sbc.w	r5, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	00eb      	lsls	r3, r5, #3
 8004412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004416:	00e2      	lsls	r2, r4, #3
 8004418:	4614      	mov	r4, r2
 800441a:	461d      	mov	r5, r3
 800441c:	4643      	mov	r3, r8
 800441e:	18e3      	adds	r3, r4, r3
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	464b      	mov	r3, r9
 8004424:	eb45 0303 	adc.w	r3, r5, r3
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004436:	4629      	mov	r1, r5
 8004438:	028b      	lsls	r3, r1, #10
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004440:	4621      	mov	r1, r4
 8004442:	028a      	lsls	r2, r1, #10
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800444c:	2200      	movs	r2, #0
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004450:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004452:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004456:	f7fc faf5 	bl	8000a44 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4613      	mov	r3, r2
 8004460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004464:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <HAL_RCC_GetSysClockFreq+0x458>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0f1b      	lsrs	r3, r3, #28
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004482:	e003      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800448a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004490:	4618      	mov	r0, r3
 8004492:	37b8      	adds	r7, #184	@ 0xb8
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	00f42400 	.word	0x00f42400

080044a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e28d      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8083 	beq.w	80045ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044c4:	4b94      	ldr	r3, [pc, #592]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d019      	beq.n	8004504 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044d0:	4b91      	ldr	r3, [pc, #580]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d112      	bne.n	800451c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b84      	ldr	r3, [pc, #528]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05b      	beq.n	80045c8 <HAL_RCC_OscConfig+0x124>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d157      	bne.n	80045c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e25a      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x90>
 8004526:	4b7c      	ldr	r3, [pc, #496]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7b      	ldr	r2, [pc, #492]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xcc>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0xb4>
 800453e:	4b76      	ldr	r3, [pc, #472]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a75      	ldr	r2, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b73      	ldr	r3, [pc, #460]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a72      	ldr	r2, [pc, #456]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xcc>
 8004558:	4b6f      	ldr	r3, [pc, #444]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a6e      	ldr	r2, [pc, #440]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b6c      	ldr	r3, [pc, #432]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a6b      	ldr	r2, [pc, #428]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd f9e8 	bl	800194c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fd f9e4 	bl	800194c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e21f      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b61      	ldr	r3, [pc, #388]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xdc>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd f9d4 	bl	800194c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fd f9d0 	bl	800194c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	@ 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e20b      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b57      	ldr	r3, [pc, #348]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x104>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d06f      	beq.n	80046b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045d6:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d105      	bne.n	80045fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d11c      	bne.n	8004640 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b44      	ldr	r3, [pc, #272]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d116      	bne.n	8004640 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x186>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e1d3      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4937      	ldr	r1, [pc, #220]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	e03a      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004648:	4b34      	ldr	r3, [pc, #208]	@ (800471c <HAL_RCC_OscConfig+0x278>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd f97d 	bl	800194c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fd f979 	bl	800194c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1b4      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4925      	ldr	r1, [pc, #148]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <HAL_RCC_OscConfig+0x278>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd f95c 	bl	800194c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fd f958 	bl	800194c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e193      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d036      	beq.n	8004730 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd f93c 	bl	800194c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fd f938 	bl	800194c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e173      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x234>
 80046f6:	e01b      	b.n	8004730 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f8:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd f925 	bl	800194c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	e00e      	b.n	8004724 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd f921 	bl	800194c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d907      	bls.n	8004724 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e15c      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
 8004718:	40023800 	.word	0x40023800
 800471c:	42470000 	.word	0x42470000
 8004720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	4b8a      	ldr	r3, [pc, #552]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8097 	beq.w	800486c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b83      	ldr	r3, [pc, #524]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	4b7f      	ldr	r3, [pc, #508]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	4a7e      	ldr	r2, [pc, #504]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	@ 0x40
 800475e:	4b7c      	ldr	r3, [pc, #496]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b79      	ldr	r3, [pc, #484]	@ (8004954 <HAL_RCC_OscConfig+0x4b0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b76      	ldr	r3, [pc, #472]	@ (8004954 <HAL_RCC_OscConfig+0x4b0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a75      	ldr	r2, [pc, #468]	@ (8004954 <HAL_RCC_OscConfig+0x4b0>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fd f8e1 	bl	800194c <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fd f8dd 	bl	800194c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e118      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004954 <HAL_RCC_OscConfig+0x4b0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x31e>
 80047b4:	4b66      	ldr	r3, [pc, #408]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a65      	ldr	r2, [pc, #404]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	e01c      	b.n	80047fc <HAL_RCC_OscConfig+0x358>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x340>
 80047ca:	4b61      	ldr	r3, [pc, #388]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	4a60      	ldr	r2, [pc, #384]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	4a5d      	ldr	r2, [pc, #372]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0x358>
 80047e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a59      	ldr	r2, [pc, #356]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a56      	ldr	r2, [pc, #344]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fd f8a2 	bl	800194c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fd f89e 	bl	800194c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0d7      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	4b4b      	ldr	r3, [pc, #300]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ee      	beq.n	800480c <HAL_RCC_OscConfig+0x368>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd f88c 	bl	800194c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd f888 	bl	800194c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0c1      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484e:	4b40      	ldr	r3, [pc, #256]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ee      	bne.n	8004838 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	4a3a      	ldr	r2, [pc, #232]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80ad 	beq.w	80049d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004876:	4b36      	ldr	r3, [pc, #216]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d060      	beq.n	8004944 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d145      	bne.n	8004916 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b33      	ldr	r3, [pc, #204]	@ (8004958 <HAL_RCC_OscConfig+0x4b4>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd f85c 	bl	800194c <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd f858 	bl	800194c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e093      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b29      	ldr	r3, [pc, #164]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	491b      	ldr	r1, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x4b4>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fd f82d 	bl	800194c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fd f829 	bl	800194c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e064      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x452>
 8004914:	e05c      	b.n	80049d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <HAL_RCC_OscConfig+0x4b4>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd f816 	bl	800194c <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd f812 	bl	800194c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e04d      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCC_OscConfig+0x4ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x480>
 8004942:	e045      	b.n	80049d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e040      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
 8004950:	40023800 	.word	0x40023800
 8004954:	40007000 	.word	0x40007000
 8004958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800495c:	4b1f      	ldr	r3, [pc, #124]	@ (80049dc <HAL_RCC_OscConfig+0x538>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d030      	beq.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d129      	bne.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d122      	bne.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d119      	bne.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d10f      	bne.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e042      	b.n	8004a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fc fdda 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	@ 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f82b 	bl	8004a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b0c0      	sub	sp, #256	@ 0x100
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	68d9      	ldr	r1, [r3, #12]
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	ea40 0301 	orr.w	r3, r0, r1
 8004aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ad8:	f021 010c 	bic.w	r1, r1, #12
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	6999      	ldr	r1, [r3, #24]
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	ea40 0301 	orr.w	r3, r0, r1
 8004b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d4c <UART_SetConfig+0x2cc>)
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d005      	beq.n	8004b20 <UART_SetConfig+0xa0>
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d50 <UART_SetConfig+0x2d0>)
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d104      	bne.n	8004b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7fe ff52 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8004b24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b28:	e003      	b.n	8004b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2a:	f7fe ff39 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8004b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b3c:	f040 810c 	bne.w	8004d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b62:	4621      	mov	r1, r4
 8004b64:	eb12 0801 	adds.w	r8, r2, r1
 8004b68:	4629      	mov	r1, r5
 8004b6a:	eb43 0901 	adc.w	r9, r3, r1
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b82:	4690      	mov	r8, r2
 8004b84:	4699      	mov	r9, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	eb18 0303 	adds.w	r3, r8, r3
 8004b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b90:	462b      	mov	r3, r5
 8004b92:	eb49 0303 	adc.w	r3, r9, r3
 8004b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bae:	460b      	mov	r3, r1
 8004bb0:	18db      	adds	r3, r3, r3
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	eb42 0303 	adc.w	r3, r2, r3
 8004bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bc4:	f7fb ff3e 	bl	8000a44 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4b61      	ldr	r3, [pc, #388]	@ (8004d54 <UART_SetConfig+0x2d4>)
 8004bce:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	011c      	lsls	r4, r3, #4
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004be0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8004bfe:	4649      	mov	r1, r9
 8004c00:	eb43 0b01 	adc.w	fp, r3, r1
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c18:	4692      	mov	sl, r2
 8004c1a:	469b      	mov	fp, r3
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c26:	464b      	mov	r3, r9
 8004c28:	eb4b 0303 	adc.w	r3, fp, r3
 8004c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c5a:	f7fb fef3 	bl	8000a44 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	4b3b      	ldr	r3, [pc, #236]	@ (8004d54 <UART_SetConfig+0x2d4>)
 8004c66:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2264      	movs	r2, #100	@ 0x64
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	1acb      	subs	r3, r1, r3
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c7a:	4b36      	ldr	r3, [pc, #216]	@ (8004d54 <UART_SetConfig+0x2d4>)
 8004c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c88:	441c      	add	r4, r3
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d00:	460b      	mov	r3, r1
 8004d02:	18db      	adds	r3, r3, r3
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d06:	4613      	mov	r3, r2
 8004d08:	eb42 0303 	adc.w	r3, r2, r3
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d16:	f7fb fe95 	bl	8000a44 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <UART_SetConfig+0x2d4>)
 8004d20:	fba3 1302 	umull	r1, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	2164      	movs	r1, #100	@ 0x64
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	3332      	adds	r3, #50	@ 0x32
 8004d32:	4a08      	ldr	r2, [pc, #32]	@ (8004d54 <UART_SetConfig+0x2d4>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f003 0207 	and.w	r2, r3, #7
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4422      	add	r2, r4
 8004d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d48:	e106      	b.n	8004f58 <UART_SetConfig+0x4d8>
 8004d4a:	bf00      	nop
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40011400 	.word	0x40011400
 8004d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	1891      	adds	r1, r2, r2
 8004d70:	6239      	str	r1, [r7, #32]
 8004d72:	415b      	adcs	r3, r3
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	1854      	adds	r4, r2, r1
 8004d7e:	4649      	mov	r1, r9
 8004d80:	eb43 0501 	adc.w	r5, r3, r1
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	00eb      	lsls	r3, r5, #3
 8004d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d92:	00e2      	lsls	r2, r4, #3
 8004d94:	4614      	mov	r4, r2
 8004d96:	461d      	mov	r5, r3
 8004d98:	4643      	mov	r3, r8
 8004d9a:	18e3      	adds	r3, r4, r3
 8004d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da0:	464b      	mov	r3, r9
 8004da2:	eb45 0303 	adc.w	r3, r5, r3
 8004da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004db6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	008b      	lsls	r3, r1, #2
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	008a      	lsls	r2, r1, #2
 8004dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004dd8:	f7fb fe34 	bl	8000a44 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4b60      	ldr	r3, [pc, #384]	@ (8004f64 <UART_SetConfig+0x4e4>)
 8004de2:	fba3 2302 	umull	r2, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	011c      	lsls	r4, r3, #4
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	1891      	adds	r1, r2, r2
 8004e02:	61b9      	str	r1, [r7, #24]
 8004e04:	415b      	adcs	r3, r3
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	1851      	adds	r1, r2, r1
 8004e10:	6139      	str	r1, [r7, #16]
 8004e12:	4649      	mov	r1, r9
 8004e14:	414b      	adcs	r3, r1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e24:	4659      	mov	r1, fp
 8004e26:	00cb      	lsls	r3, r1, #3
 8004e28:	4651      	mov	r1, sl
 8004e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2e:	4651      	mov	r1, sl
 8004e30:	00ca      	lsls	r2, r1, #3
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	4642      	mov	r2, r8
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e40:	464b      	mov	r3, r9
 8004e42:	460a      	mov	r2, r1
 8004e44:	eb42 0303 	adc.w	r3, r2, r3
 8004e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e64:	4649      	mov	r1, r9
 8004e66:	008b      	lsls	r3, r1, #2
 8004e68:	4641      	mov	r1, r8
 8004e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6e:	4641      	mov	r1, r8
 8004e70:	008a      	lsls	r2, r1, #2
 8004e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e76:	f7fb fde5 	bl	8000a44 <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4b38      	ldr	r3, [pc, #224]	@ (8004f64 <UART_SetConfig+0x4e4>)
 8004e82:	fba3 2301 	umull	r2, r3, r3, r1
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2264      	movs	r2, #100	@ 0x64
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	3332      	adds	r3, #50	@ 0x32
 8004e94:	4a33      	ldr	r2, [pc, #204]	@ (8004f64 <UART_SetConfig+0x4e4>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea0:	441c      	add	r4, r3
 8004ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004eac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	1851      	adds	r1, r2, r1
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	414b      	adcs	r3, r1
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ed8:	4659      	mov	r1, fp
 8004eda:	00cb      	lsls	r3, r1, #3
 8004edc:	4651      	mov	r1, sl
 8004ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	00ca      	lsls	r2, r1, #3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	4642      	mov	r2, r8
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	eb42 0303 	adc.w	r3, r2, r3
 8004efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f14:	4649      	mov	r1, r9
 8004f16:	008b      	lsls	r3, r1, #2
 8004f18:	4641      	mov	r1, r8
 8004f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1e:	4641      	mov	r1, r8
 8004f20:	008a      	lsls	r2, r1, #2
 8004f22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f26:	f7fb fd8d 	bl	8000a44 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <UART_SetConfig+0x4e4>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	@ 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	3332      	adds	r3, #50	@ 0x32
 8004f42:	4a08      	ldr	r2, [pc, #32]	@ (8004f64 <UART_SetConfig+0x4e4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4422      	add	r2, r4
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f64:	51eb851f 	.word	0x51eb851f

08004f68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f68:	b084      	sub	sp, #16
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	f107 001c 	add.w	r0, r7, #28
 8004f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d123      	bne.n	8004fca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa9a 	bl	80054f8 <USB_CoreReset>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e01b      	b.n	8005002 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa8e 	bl	80054f8 <USB_CoreReset>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fe0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ff4:	e005      	b.n	8005002 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005002:	7fbb      	ldrb	r3, [r7, #30]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10b      	bne.n	8005020 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f043 0206 	orr.w	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800502c:	b004      	add	sp, #16
 800502e:	4770      	bx	lr

08005030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 0201 	bic.w	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d115      	bne.n	80050a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005080:	200a      	movs	r0, #10
 8005082:	f7fc fc6f 	bl	8001964 <HAL_Delay>
      ms += 10U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	330a      	adds	r3, #10
 800508a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa25 	bl	80054dc <USB_GetMode>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d01e      	beq.n	80050d6 <USB_SetCurrentMode+0x84>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2bc7      	cmp	r3, #199	@ 0xc7
 800509c:	d9f0      	bls.n	8005080 <USB_SetCurrentMode+0x2e>
 800509e:	e01a      	b.n	80050d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d115      	bne.n	80050d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050b2:	200a      	movs	r0, #10
 80050b4:	f7fc fc56 	bl	8001964 <HAL_Delay>
      ms += 10U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	330a      	adds	r3, #10
 80050bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fa0c 	bl	80054dc <USB_GetMode>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <USB_SetCurrentMode+0x84>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80050ce:	d9f0      	bls.n	80050b2 <USB_SetCurrentMode+0x60>
 80050d0:	e001      	b.n	80050d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e005      	b.n	80050e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80050da:	d101      	bne.n	80050e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050ec:	b084      	sub	sp, #16
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e009      	b.n	8005120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3340      	adds	r3, #64	@ 0x40
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b0e      	cmp	r3, #14
 8005124:	d9f2      	bls.n	800510c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005126:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11c      	bne.n	8005168 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e005      	b.n	8005174 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005180:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10d      	bne.n	80051a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005190:	2100      	movs	r1, #0
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f968 	bl	8005468 <USB_SetDevSpeed>
 8005198:	e008      	b.n	80051ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800519a:	2101      	movs	r1, #1
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f963 	bl	8005468 <USB_SetDevSpeed>
 80051a2:	e003      	b.n	80051ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051a4:	2103      	movs	r1, #3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f95e 	bl	8005468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ac:	2110      	movs	r1, #16
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8fa 	bl	80053a8 <USB_FlushTxFifo>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f924 	bl	800540c <USB_FlushRxFifo>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e043      	b.n	8005280 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520e:	d118      	bne.n	8005242 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e013      	b.n	8005254 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e008      	b.n	8005254 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005284:	461a      	mov	r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4293      	cmp	r3, r2
 800528a:	d3b5      	bcc.n	80051f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	e043      	b.n	800531a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a8:	d118      	bne.n	80052dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052bc:	461a      	mov	r2, r3
 80052be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	e013      	b.n	80052ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e008      	b.n	80052ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	461a      	mov	r2, r3
 800530e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	3301      	adds	r3, #1
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800531e:	461a      	mov	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4293      	cmp	r3, r2
 8005324:	d3b5      	bcc.n	8005292 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005338:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005346:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f043 0210 	orr.w	r2, r3, #16
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <USB_DevInit+0x2b8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005368:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f043 0208 	orr.w	r2, r3, #8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800537c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	803c3800 	.word	0x803c3800

080053a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053c2:	d901      	bls.n	80053c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e01b      	b.n	8005400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	daf2      	bge.n	80053b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	019b      	lsls	r3, r3, #6
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ec:	d901      	bls.n	80053f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e006      	b.n	8005400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d0f0      	beq.n	80053e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005424:	d901      	bls.n	800542a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e018      	b.n	800545c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	daf2      	bge.n	8005418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2210      	movs	r2, #16
 800543a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005448:	d901      	bls.n	800544e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b10      	cmp	r3, #16
 8005458:	d0f0      	beq.n	800543c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054b4:	f023 0303 	bic.w	r3, r3, #3
 80054b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0301 	and.w	r3, r3, #1
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005510:	d901      	bls.n	8005516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e01b      	b.n	800554e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	daf2      	bge.n	8005504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3301      	adds	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800553a:	d901      	bls.n	8005540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d0f0      	beq.n	800552e <USB_CoreReset+0x36>

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <memset>:
 800555a:	4402      	add	r2, r0
 800555c:	4603      	mov	r3, r0
 800555e:	4293      	cmp	r3, r2
 8005560:	d100      	bne.n	8005564 <memset+0xa>
 8005562:	4770      	bx	lr
 8005564:	f803 1b01 	strb.w	r1, [r3], #1
 8005568:	e7f9      	b.n	800555e <memset+0x4>
	...

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	@ (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	@ (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	@ (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	@ (80055b0 <__libc_init_array+0x44>)
 8005580:	f000 f818 	bl	80055b4 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	080055f4 	.word	0x080055f4
 80055a8:	080055f4 	.word	0x080055f4
 80055ac:	080055f4 	.word	0x080055f4
 80055b0:	080055f8 	.word	0x080055f8

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
