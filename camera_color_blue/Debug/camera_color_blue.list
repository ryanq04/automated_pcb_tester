
camera_color_blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008974  08008974  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008974  08008974  00009974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800897c  0800897c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800897c  0800897c  0000997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008980  08008980  00009980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008984  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cbf0  2000005c  080089e0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cc4c  080089e0  0000ac4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189df  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340a  00000000  00000000  00022a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00025e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001062  00000000  00000000  00027350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024345  00000000  00000000  000283b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6f6  00000000  00000000  0004c6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d761d  00000000  00000000  00067ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed8  00000000  00000000  0013f450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00145328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086a8 	.word	0x080086a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080086a8 	.word	0x080086a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_msg>:
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;


void print_msg(char * msg) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <print_msg+0x24>)
 80005c8:	f006 fd10 	bl	8006fec <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000020c 	.word	0x2000020c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fbd6 	bl	8007d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a22      	ldr	r2, [pc, #136]	@ (80006ac <SystemClock_Config+0xd4>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	@ 0xa8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fb27 	bl	8005cb4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fa84 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fc9c 	bl	8004fcc <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 fa6d 	bl	8000b78 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
void MX_DCMI_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_DCMI_Init+0x64>)
 80006b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c8:	2280      	movs	r2, #128	@ 0x80
 80006ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006fe:	f001 fb99 	bl	8001e34 <HAL_DCMI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fa36 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	50050000 	.word	0x50050000

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f003 fb05 	bl	8003d64 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa0a 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000128 	.word	0x20000128
 800076c:	40005800 	.word	0x40005800
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b092      	sub	sp, #72	@ 0x48
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 fafa 	bl	8007d98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007a6:	4a33      	ldr	r2, [pc, #204]	@ (8000874 <MX_TIM1_Init+0x100>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b8:	2214      	movs	r2, #20
 80007ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ce:	4828      	ldr	r0, [pc, #160]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007d0:	f005 fd5d 	bl	800628e <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f9cd 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ea:	4619      	mov	r1, r3
 80007ec:	4820      	ldr	r0, [pc, #128]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ee:	f006 facb 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80007f8:	f000 f9be 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8000800:	230a      	movs	r3, #10
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000822:	f005 ff3b 	bl	800669c <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800082c:	f000 f9a4 	bl	8000b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000854:	f006 fb14 	bl	8006e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800085e:	f000 f98b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000862:	4803      	ldr	r0, [pc, #12]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000864:	f000 fdc4 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3748      	adds	r7, #72	@ 0x48
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000017c 	.word	0x2000017c
 8000874:	40010000 	.word	0x40010000

08000878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000888:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_TIM6_Init+0x68>)
 800088a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_TIM6_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM6_Init+0x64>)
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a8:	f005 fca2 	bl	80061f0 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008b2:	f000 f961 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008c4:	f006 fa60 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ce:	f000 f953 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001c4 	.word	0x200001c4
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f006 fb16 	bl	8006f4c <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f927 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000020c 	.word	0x2000020c
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000942:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2206      	movs	r2, #6
 8000948:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	f004 f9ec 	bl	8004d58 <HAL_PCD_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f8f7 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2039      	movs	r0, #57	@ 0x39
 80009bc:	f001 f811 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009c0:	2039      	movs	r0, #57	@ 0x39
 80009c2:	f001 f82a 	bl	8001a1a <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5d      	ldr	r2, [pc, #372]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4b57      	ldr	r3, [pc, #348]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a56      	ldr	r2, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b54      	ldr	r3, [pc, #336]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a48      	ldr	r2, [pc, #288]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b46      	ldr	r3, [pc, #280]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a41      	ldr	r2, [pc, #260]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b38      	ldr	r3, [pc, #224]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ad0:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000ad2:	f003 f8ef 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	4825      	ldr	r0, [pc, #148]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000adc:	f003 f8ea 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <MX_GPIO_Init+0x1a0>)
 8000af8:	f002 ff30 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000afc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000b16:	f002 ff21 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1a:	2340      	movs	r3, #64	@ 0x40
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000b32:	f002 ff13 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000b4a:	f002 ff07 	bl	800395c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2028      	movs	r0, #40	@ 0x28
 8000b54:	f000 ff45 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	@ 0x28
 8000b5a:	f000 ff5e 	bl	8001a1a <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	@ 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <send_img_rgb565>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}

}

void send_img_rgb565(){
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	f5ad 4d44 	sub.w	sp, sp, #50176	@ 0xc400
 8000b8a:	b097      	sub	sp, #92	@ 0x5c
 8000b8c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; uint8_t end[] = "\r\nEND!\r\n";
 8000b8e:	4b82      	ldr	r3, [pc, #520]	@ (8000d98 <send_img_rgb565+0x214>)
 8000b90:	f507 4444 	add.w	r4, r7, #50176	@ 0xc400
 8000b94:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8000b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b9c:	8023      	strh	r3, [r4, #0]
 8000b9e:	4a7f      	ldr	r2, [pc, #508]	@ (8000d9c <send_img_rgb565+0x218>)
 8000ba0:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000ba4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000baa:	c303      	stmia	r3!, {r0, r1}
 8000bac:	701a      	strb	r2, [r3, #0]
	char msg[100];
	uint8_t send_ptr_rgb[FRAMESIZE*2] = {0}; // Each pixel needs 16 bits (2 bytes)
 8000bae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000bb2:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	f24c 32bc 	movw	r2, #50108	@ 0xc3bc
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f007 f8e8 	bl	8007d98 <memset>
	uint16_t* byte_ptr = (uint16_t*)snapshot_buff;
 8000bc8:	4b75      	ldr	r3, [pc, #468]	@ (8000da0 <send_img_rgb565+0x21c>)
 8000bca:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000bce:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000bd2:	6013      	str	r3, [r2, #0]

	uint32_t framesize = IMG_COLS * IMG_ROWS; 
 8000bd4:	f246 13e0 	movw	r3, #25056	@ 0x61e0
 8000bd8:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000bdc:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8000be0:	6013      	str	r3, [r2, #0]

	 
	for (int i = framesize - 1, j = 0; i >= 0 && j < framesize * 2; i--, j += 2) {
 8000be2:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000be6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000bf2:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000bfe:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e04a      	b.n	8000c9c <send_img_rgb565+0x118>
		send_ptr_rgb[j+1] = (byte_ptr[i] >> 8) & 0xFF; //High byte
 8000c06:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c0a:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000c16:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c28:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2d1      	uxtb	r1, r2
 8000c32:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8000c36:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 8000c3a:	54d1      	strb	r1, [r2, r3]
		send_ptr_rgb[j] = byte_ptr[i] & 0xFF; // Low byte
 8000c3c:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c40:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000c4c:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b2d9      	uxtb	r1, r3
 8000c58:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c5c:	f5a3 628b 	sub.w	r2, r3, #1112	@ 0x458
 8000c60:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c64:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
	for (int i = framesize - 1, j = 0; i >= 0 && j < framesize * 2; i--, j += 2) {
 8000c70:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c74:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000c80:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000c8a:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3302      	adds	r3, #2
 8000c92:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000c96:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000ca0:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0c      	blt.n	8000cc4 <send_img_rgb565+0x140>
 8000caa:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000cae:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	005a      	lsls	r2, r3, #1
 8000cb6:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000cba:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8a0      	bhi.n	8000c06 <send_img_rgb565+0x82>
	}
	

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000cca:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e01a      	b.n	8000d08 <send_img_rgb565+0x184>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000cd2:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000cd6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000cda:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000cde:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	18d1      	adds	r1, r2, r3
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cea:	2201      	movs	r2, #1
 8000cec:	482d      	ldr	r0, [pc, #180]	@ (8000da4 <send_img_rgb565+0x220>)
 8000cee:	f006 f97d 	bl	8006fec <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000cf2:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000cf6:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000d02:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000d0c:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b0c      	cmp	r3, #12
 8000d14:	dddd      	ble.n	8000cd2 <send_img_rgb565+0x14e>
	}

	HAL_UART_Transmit(&huart3, send_ptr_rgb, framesize*2, HAL_MAX_DELAY);
 8000d16:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000d1a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000d2a:	3958      	subs	r1, #88	@ 0x58
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	481c      	ldr	r0, [pc, #112]	@ (8000da4 <send_img_rgb565+0x220>)
 8000d32:	f006 f95b 	bl	8006fec <HAL_UART_Transmit>

	//SEND SUFFIX
	for(int i = 0; i < 7; i++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000d3c:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01a      	b.n	8000d7a <send_img_rgb565+0x1f6>
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
 8000d44:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000d48:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000d4c:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000d50:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	18d1      	adds	r1, r2, r3
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <send_img_rgb565+0x220>)
 8000d60:	f006 f944 	bl	8006fec <HAL_UART_Transmit>
	for(int i = 0; i < 7; i++){
 8000d64:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000d68:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f507 4244 	add.w	r2, r7, #50176	@ 0xc400
 8000d74:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	f507 4344 	add.w	r3, r7, #50176	@ 0xc400
 8000d7e:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	dddd      	ble.n	8000d44 <send_img_rgb565+0x1c0>
	}

}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	f507 4744 	add.w	r7, r7, #50176	@ 0xc400
 8000d90:	375c      	adds	r7, #92	@ 0x5c
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0800876c 	.word	0x0800876c
 8000d9c:	0800877c 	.word	0x0800877c
 8000da0:	20000738 	.word	0x20000738
 8000da4:	2000020c 	.word	0x2000020c

08000da8 <p3>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void p3(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <p3+0x34>)
 8000dae:	f000 f92b 	bl	8001008 <ov7670_snapshot>
		while(!dma_flag)
 8000db2:	e002      	b.n	8000dba <p3+0x12>
		{
			HAL_Delay(10);	
 8000db4:	200a      	movs	r0, #10
 8000db6:	f000 fd15 	bl	80017e4 <HAL_Delay>
		while(!dma_flag)
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <p3+0x38>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f8      	beq.n	8000db4 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000dc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <p3+0x3c>)
 8000dc8:	f002 ff8d 	bl	8003ce6 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <p3+0x38>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		//send_img(); 
		//send_img_ycbcr();
		//send_cb_image();
		//send_img_rgb();
		send_img_rgb565();
 8000dd2:	f7ff fed7 	bl	8000b84 <send_img_rgb565>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000738 	.word	0x20000738
 8000de0:	2000caf8 	.word	0x2000caf8
 8000de4:	40020400 	.word	0x40020400

08000de8 <main>:
}



int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09a      	sub	sp, #104	@ 0x68
 8000dec:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  HAL_Init();
 8000dee:	f000 fc87 	bl	8001700 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f7ff fbf1 	bl	80005d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f7ff fded 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfa:	f7ff fdcb 	bl	8000994 <MX_DMA_Init>
  MX_DCMI_Init();
 8000dfe:	f7ff fc57 	bl	80006b0 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000e02:	f7ff fd6f 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e06:	f7ff fd97 	bl	8000938 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000e0a:	f7ff fc85 	bl	8000718 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e0e:	f7ff fcb1 	bl	8000774 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000e12:	f7ff fd31 	bl	8000878 <MX_TIM6_Init>
	
	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <main+0x88>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <main+0x88>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0210 	orr.w	r2, r2, #16
 8000e24:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e26:	2039      	movs	r0, #57	@ 0x39
 8000e28:	f000 fdf7 	bl	8001a1a <HAL_NVIC_EnableIRQ>

  char msg[100];
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <main+0x8c>)
 8000e30:	f005 fa7c 	bl	800632c <HAL_TIM_PWM_Start>
  ov7670_init();
 8000e34:	f000 f824 	bl	8000e80 <ov7670_init>
	ov7_config();
 8000e38:	f000 f854 	bl	8000ee4 <ov7_config>


  while (1)
  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <main+0x90>)
 8000e40:	f002 ff51 	bl	8003ce6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	@ 0x64
 8000e46:	f000 fccd 	bl	80017e4 <HAL_Delay>
    
    if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000e4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <main+0x94>)
 8000e50:	f002 ff18 	bl	8003c84 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <main+0x54>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <main+0x90>)
 8000e5e:	f002 ff42 	bl	8003ce6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e62:	2064      	movs	r0, #100	@ 0x64
 8000e64:	f000 fcbe 	bl	80017e4 <HAL_Delay>
			
			p3();
 8000e68:	f7ff ff9e 	bl	8000da8 <p3>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e6c:	e7e6      	b.n	8000e3c <main+0x54>
 8000e6e:	bf00      	nop
 8000e70:	200000c8 	.word	0x200000c8
 8000e74:	2000017c 	.word	0x2000017c
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020800 	.word	0x40020800

08000e80 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	@ 0x68
 8000e84:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8000e86:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <ov7670_init+0x58>)
 8000e88:	f7ff fb92 	bl	80005b0 <print_msg>
  val = ov7670_read(0x0A);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 f875 	bl	8000f7c <ov7670_read>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8000e98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e9c:	2b76      	cmp	r3, #118	@ 0x76
 8000e9e:	d00c      	beq.n	8000eba <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000ea0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	490d      	ldr	r1, [pc, #52]	@ (8000edc <ov7670_init+0x5c>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 ff55 	bl	8007d58 <siprintf>
    print_msg(msg);
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fb7d 	bl	80005b0 <print_msg>
    return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e009      	b.n	8000ece <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <ov7670_init+0x60>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 ff4a 	bl	8007d58 <siprintf>
    print_msg(msg);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb72 	bl	80005b0 <print_msg>

  // Your code here

  //

  return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3768      	adds	r7, #104	@ 0x68
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08008788 	.word	0x08008788
 8000edc:	08008794 	.word	0x08008794
 8000ee0:	080087b0 	.word	0x080087b0

08000ee4 <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e037      	b.n	8000f60 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f70 <ov7_config+0x8c>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ef8:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8000efa:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <ov7_config+0x8c>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8000f06:	463a      	mov	r2, r7
 8000f08:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	2142      	movs	r1, #66	@ 0x42
 8000f12:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <ov7_config+0x90>)
 8000f14:	f003 f86a 	bl	8003fec <HAL_I2C_Master_Transmit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8000f1c:	e017      	b.n	8000f4e <ov7_config+0x6a>
			 sprintf(msg, "Error\n");
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4915      	ldr	r1, [pc, #84]	@ (8000f78 <ov7_config+0x94>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 ff18 	bl	8007d58 <siprintf>
       print_msg(msg);
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb40 	bl	80005b0 <print_msg>
       HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f34:	f000 fc56 	bl	80017e4 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8000f38:	463a      	mov	r2, r7
 8000f3a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	2142      	movs	r1, #66	@ 0x42
 8000f44:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <ov7_config+0x90>)
 8000f46:	f003 f851 	bl	8003fec <HAL_I2C_Master_Transmit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8000f4e:	7efb      	ldrb	r3, [r7, #27]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e4      	bne.n	8000f1e <ov7_config+0x3a>
    }
		HAL_Delay(10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 fc45 	bl	80017e4 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b79      	cmp	r3, #121	@ 0x79
 8000f64:	ddc4      	ble.n	8000ef0 <ov7_config+0xc>
	}
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0800882c 	.word	0x0800882c
 8000f74:	20000128 	.word	0x20000128
 8000f78:	08008810 	.word	0x08008810

08000f7c <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09e      	sub	sp, #120	@ 0x78
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2142      	movs	r1, #66	@ 0x42
 8000f92:	481b      	ldr	r0, [pc, #108]	@ (8001000 <ov7670_read+0x84>)
 8000f94:	f003 f82a 	bl	8003fec <HAL_I2C_Master_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8000f9e:	e01a      	b.n	8000fd6 <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4917      	ldr	r1, [pc, #92]	@ (8001004 <ov7670_read+0x88>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fed6 	bl	8007d58 <siprintf>
       print_msg(msg);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fafd 	bl	80005b0 <print_msg>
       HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fba:	f000 fc13 	bl	80017e4 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2142      	movs	r1, #66	@ 0x42
 8000fca:	480d      	ldr	r0, [pc, #52]	@ (8001000 <ov7670_read+0x84>)
 8000fcc:	f003 f80e 	bl	8003fec <HAL_I2C_Master_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8000fd6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1e0      	bne.n	8000fa0 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (ADDR_OV7670+1), &data, 1, HAL_MAX_DELAY);
 8000fde:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2143      	movs	r1, #67	@ 0x43
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <ov7670_read+0x84>)
 8000fee:	f003 f8fb 	bl	80041e8 <HAL_I2C_Master_Receive>
    return data;
 8000ff2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3770      	adds	r7, #112	@ 0x70
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000128 	.word	0x20000128
 8001004:	08008810 	.word	0x08008810

08001008 <ov7670_snapshot>:
HAL_StatusTypeDef ov7670_write(uint8_t reg,uint8_t val){
  // Your code here
}


void ov7670_snapshot(uint16_t *buff){
 8001008:	b580      	push	{r7, lr}
 800100a:	b09c      	sub	sp, #112	@ 0x70
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <ov7670_snapshot+0x44>)
 8001012:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 8001016:	2102      	movs	r1, #2
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <ov7670_snapshot+0x48>)
 800101a:	f000 fd19 	bl	8001a50 <HAL_DCMI_Start_DMA>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 8001024:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00a      	beq.n	8001042 <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4908      	ldr	r1, [pc, #32]	@ (8001054 <ov7670_snapshot+0x4c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fe90 	bl	8007d58 <siprintf>
       print_msg(msg);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fab7 	bl	80005b0 <print_msg>
    }
}//goes back to main for waiting for interrupt
 8001042:	bf00      	nop
 8001044:	3770      	adds	r7, #112	@ 0x70
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000738 	.word	0x20000738
 8001050:	20000078 	.word	0x20000078
 8001054:	08008818 	.word	0x08008818

08001058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001096:	2007      	movs	r0, #7
 8001098:	f000 fc98 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	@ 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a78      	ldr	r2, [pc, #480]	@ (80012a8 <HAL_DCMI_MspInit+0x200>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	f040 80e9 	bne.w	800129e <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d4:	4a75      	ldr	r2, [pc, #468]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6353      	str	r3, [r2, #52]	@ 0x34
 80010dc:	4b73      	ldr	r3, [pc, #460]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a6e      	ldr	r2, [pc, #440]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	4a67      	ldr	r2, [pc, #412]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6313      	str	r3, [r2, #48]	@ 0x30
 8001114:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	4b61      	ldr	r3, [pc, #388]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	4a60      	ldr	r2, [pc, #384]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	4a59      	ldr	r2, [pc, #356]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6313      	str	r3, [r2, #48]	@ 0x30
 800114c:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30
 8001168:	4b50      	ldr	r3, [pc, #320]	@ (80012ac <HAL_DCMI_MspInit+0x204>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001174:	2370      	movs	r3, #112	@ 0x70
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001184:	230d      	movs	r3, #13
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4848      	ldr	r0, [pc, #288]	@ (80012b0 <HAL_DCMI_MspInit+0x208>)
 8001190:	f002 fbe4 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001194:	2350      	movs	r3, #80	@ 0x50
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a4:	230d      	movs	r3, #13
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4841      	ldr	r0, [pc, #260]	@ (80012b4 <HAL_DCMI_MspInit+0x20c>)
 80011b0:	f002 fbd4 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011b4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c6:	230d      	movs	r3, #13
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4839      	ldr	r0, [pc, #228]	@ (80012b8 <HAL_DCMI_MspInit+0x210>)
 80011d2:	f002 fbc3 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d6:	2308      	movs	r3, #8
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011e6:	230d      	movs	r3, #13
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4832      	ldr	r0, [pc, #200]	@ (80012bc <HAL_DCMI_MspInit+0x214>)
 80011f2:	f002 fbb3 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001208:	230d      	movs	r3, #13
 800120a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	482b      	ldr	r0, [pc, #172]	@ (80012c0 <HAL_DCMI_MspInit+0x218>)
 8001214:	f002 fba2 	bl	800395c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800121a:	4a2b      	ldr	r2, [pc, #172]	@ (80012c8 <HAL_DCMI_MspInit+0x220>)
 800121c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001220:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001224:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001234:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800123c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001240:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001244:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001248:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800124c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001250:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001254:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001258:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800125c:	2204      	movs	r2, #4
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001262:	2203      	movs	r2, #3
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800126e:	2200      	movs	r2, #0
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001272:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001274:	f000 fe58 	bl	8001f28 <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800127e:	f7ff fc7b 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a0f      	ldr	r2, [pc, #60]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 8001286:	649a      	str	r2, [r3, #72]	@ 0x48
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_DCMI_MspInit+0x21c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	204e      	movs	r0, #78	@ 0x4e
 8001294:	f000 fba5 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001298:	204e      	movs	r0, #78	@ 0x4e
 800129a:	f000 fbbe 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3738      	adds	r7, #56	@ 0x38
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	50050000 	.word	0x50050000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021800 	.word	0x40021800
 80012c4:	200000c8 	.word	0x200000c8
 80012c8:	40026428 	.word	0x40026428

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <HAL_I2C_MspInit+0x84>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12b      	bne.n	8001346 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130a:	2303      	movs	r3, #3
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130e:	2312      	movs	r3, #18
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2301      	movs	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800131a:	2304      	movs	r3, #4
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <HAL_I2C_MspInit+0x8c>)
 8001326:	f002 fb19 	bl	800395c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 8001334:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_I2C_MspInit+0x88>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	@ 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005800 	.word	0x40005800
 8001354:	40023800 	.word	0x40023800
 8001358:	40021400 	.word	0x40021400

0800135c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10d      	bne.n	800138a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_TIM_PWM_MspInit+0x40>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a09      	ldr	r2, [pc, #36]	@ (800139c <HAL_TIM_PWM_MspInit+0x40>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_TIM_PWM_MspInit+0x40>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40010000 	.word	0x40010000
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_TIM_Base_MspInit+0x48>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d115      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013bc:	f043 0310 	orr.w	r3, r3, #16
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2036      	movs	r0, #54	@ 0x36
 80013d4:	f000 fb05 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d8:	2036      	movs	r0, #54	@ 0x36
 80013da:	f000 fb1e 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40001000 	.word	0x40001000
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_TIM_MspPostInit+0x68>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d11e      	bne.n	8001450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_TIM_MspPostInit+0x6c>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_TIM_MspPostInit+0x6c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <HAL_TIM_MspPostInit+0x70>)
 800144c:	f002 fa86 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010000 	.word	0x40010000
 800145c:	40023800 	.word	0x40023800
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <HAL_UART_MspInit+0x84>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12c      	bne.n	80014e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <HAL_UART_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <HAL_UART_MspInit+0x88>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_UART_MspInit+0x88>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_UART_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a10      	ldr	r2, [pc, #64]	@ (80014ec <HAL_UART_MspInit+0x88>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <HAL_UART_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014d0:	2307      	movs	r3, #7
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <HAL_UART_MspInit+0x8c>)
 80014dc:	f002 fa3e 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40004800 	.word	0x40004800
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0a0      	sub	sp, #128	@ 0x80
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	225c      	movs	r2, #92	@ 0x5c
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fc3f 	bl	8007d98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001522:	d14e      	bne.n	80015c2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001528:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800152a:	2300      	movs	r3, #0
 800152c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fe64 	bl	8005200 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fb1b 	bl	8000b78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a20      	ldr	r2, [pc, #128]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800155e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001562:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001570:	230a      	movs	r3, #10
 8001572:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001578:	4619      	mov	r1, r3
 800157a:	4815      	ldr	r0, [pc, #84]	@ (80015d0 <HAL_PCD_MspInit+0xdc>)
 800157c:	f002 f9ee 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001584:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	@ (80015d0 <HAL_PCD_MspInit+0xdc>)
 8001596:	f002 f9e1 	bl	800395c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159e:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_PCD_MspInit+0xd8>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3780      	adds	r7, #128	@ 0x80
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f8bb 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}

08001632 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001636:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800163a:	f002 fb6f 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM6_DAC_IRQHandler+0x10>)
 800164a:	f004 ff37 	bl	80064bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001c4 	.word	0x200001c4

08001658 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <DMA2_Stream1_IRQHandler+0x14>)
 800165e:	f000 fd8b 	bl	8002178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8001662:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <DMA2_Stream1_IRQHandler+0x18>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000c8 	.word	0x200000c8
 8001670:	2000caf8 	.word	0x2000caf8

08001674 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DCMI_IRQHandler+0x10>)
 800167a:	f000 fa89 	bl	8001b90 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000078 	.word	0x20000078

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016da:	f006 fb65 	bl	8007da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff fb83 	bl	8000de8 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016f0:	08008984 	.word	0x08008984
  ldr r2, =_sbss
 80016f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016f8:	2000cc4c 	.word	0x2000cc4c

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <HAL_Init+0x40>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_Init+0x40>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_Init+0x40>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f94f 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f808 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fc90 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_InitTick+0x54>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_InitTick+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f967 	bl	8001a36 <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001780:	f000 f92f 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <HAL_InitTick+0x5c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000000 	.word	0x20000000
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008
 80017c8:	2000cafc 	.word	0x2000cafc

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000cafc 	.word	0x2000cafc

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	@ (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	@ (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff3e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff31 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_DCMI_Start_DMA+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e086      	b.n	8001b7e <HAL_DCMI_Start_DMA+0x12e>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0202 	bic.w	r2, r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab4:	4a34      	ldr	r2, [pc, #208]	@ (8001b88 <HAL_DCMI_Start_DMA+0x138>)
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abc:	4a33      	ldr	r2, [pc, #204]	@ (8001b8c <HAL_DCMI_Start_DMA+0x13c>)
 8001abe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ada:	d20a      	bcs.n	8001af2 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3328      	adds	r3, #40	@ 0x28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	f000 faca 	bl	8002084 <HAL_DMA_Start_IT>
 8001af0:	e038      	b.n	8001b64 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	4a24      	ldr	r2, [pc, #144]	@ (8001b88 <HAL_DCMI_Start_DMA+0x138>)
 8001af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001b0c:	e009      	b.n	8001b22 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b12:	085a      	lsrs	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1c:	005a      	lsls	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2a:	d2f0      	bcs.n	8001b0e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b30:	1e9a      	subs	r2, r3, #2
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3328      	adds	r3, #40	@ 0x28
 8001b54:	4619      	mov	r1, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	f000 fd74 	bl	800264c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	08001cdd 	.word	0x08001cdd
 8001b8c:	08001e07 	.word	0x08001e07

08001b90 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d016      	beq.n	8001bd8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bca:	4a2f      	ldr	r2, [pc, #188]	@ (8001c88 <HAL_DCMI_IRQHandler+0xf8>)
 8001bcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 faae 	bl	8002134 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DCMI_IRQHandler+0xf8>)
 8001c04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fa92 	bl	8002134 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f83c 	bl	8001ca0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2208      	movs	r2, #8
 8001c38:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f83a 	bl	8001cb4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d019      	beq.n	8001c7e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d107      	bne.n	8001c68 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 021e 	bic.w	r2, r2, #30
 8001c66:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f825 	bl	8001cc8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08001e07 	.word	0x08001e07

08001c8c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cec:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d043      	beq.n	8001d7e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d02:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <DCMI_DMAXferCplt+0x66>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	00da      	lsls	r2, r3, #3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	f001 fdd3 	bl	80038dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d40:	e044      	b.n	8001dcc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13c      	bne.n	8001dcc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	00da      	lsls	r2, r3, #3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f001 fdb5 	bl	80038dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d7c:	e026      	b.n	8001dcc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	e017      	b.n	8001dcc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10f      	bne.n	8001dcc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	440a      	add	r2, r1
 8001dc2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d112      	bne.n	8001dfe <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e12:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ff30 	bl	8001c8c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e069      	b.n	8001f1a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff f924 	bl	80010a8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff f921 	bl	80010a8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <HAL_DCMI_Init+0xf0>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e92:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e9e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001eaa:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8001eb6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ec2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d112      	bne.n	8001efa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7f5b      	ldrb	r3, [r3, #29]
 8001ede:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ee0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7f9b      	ldrb	r3, [r3, #30]
 8001ee6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001ee8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7fdb      	ldrb	r3, [r3, #31]
 8001ef0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001ef6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ef8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 021e 	orr.w	r2, r2, #30
 8001f08:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	ffe0f007 	.word	0xffe0f007

08001f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff fc4a 	bl	80017cc <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e099      	b.n	8002078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e00f      	b.n	8001f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff fc31 	bl	80017cc <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d908      	bls.n	8001f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e078      	b.n	8002078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e8      	bne.n	8001f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <HAL_DMA_Init+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	2b04      	cmp	r3, #4
 8002018:	d117      	bne.n	800204a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa91 	bl	8002554 <DMA_CheckFifoParam>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002046:	2301      	movs	r3, #1
 8002048:	e016      	b.n	8002078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa48 	bl	80024e8 <DMA_CalcBaseAndBitshift>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	223f      	movs	r2, #63	@ 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	f010803f 	.word	0xf010803f

08002084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x26>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e040      	b.n	800212c <HAL_DMA_Start_IT+0xa8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12f      	bne.n	800211e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9da 	bl	800248c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0216 	orr.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e005      	b.n	800212a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00c      	b.n	800216c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002184:	4b8e      	ldr	r3, [pc, #568]	@ (80023c0 <HAL_DMA_IRQHandler+0x248>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a8e      	ldr	r2, [pc, #568]	@ (80023c4 <HAL_DMA_IRQHandler+0x24c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a2:	2208      	movs	r2, #8
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0204 	bic.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2208      	movs	r2, #8
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2201      	movs	r2, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	2204      	movs	r2, #4
 800223e:	409a      	lsls	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2210      	movs	r2, #16
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	2210      	movs	r2, #16
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d018      	beq.n	80022ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e01f      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01b      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e016      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0208 	bic.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	2220      	movs	r2, #32
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 808f 	beq.w	8002418 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8087 	beq.w	8002418 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	2220      	movs	r2, #32
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	d136      	bne.n	8002390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0216 	bic.w	r2, r2, #22
 8002330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_DMA_IRQHandler+0x1da>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0208 	bic.w	r2, r2, #8
 8002360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	223f      	movs	r2, #63	@ 0x3f
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d07e      	beq.n	8002484 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
        }
        return;
 800238e:	e079      	b.n	8002484 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01d      	beq.n	80023da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d031      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	e02c      	b.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000
 80023c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e01e      	b.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10f      	bne.n	8002408 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0210 	bic.w	r2, r2, #16
 80023f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d032      	beq.n	8002486 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d022      	beq.n	8002472 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2205      	movs	r2, #5
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d307      	bcc.n	8002460 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f2      	bne.n	8002444 <HAL_DMA_IRQHandler+0x2cc>
 800245e:	e000      	b.n	8002462 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002460:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e000      	b.n	8002486 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002484:	bf00      	nop
    }
  }
}
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b40      	cmp	r3, #64	@ 0x40
 80024b8:	d108      	bne.n	80024cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ca:	e007      	b.n	80024dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3b10      	subs	r3, #16
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <DMA_CalcBaseAndBitshift+0x64>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002502:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <DMA_CalcBaseAndBitshift+0x68>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d909      	bls.n	800252a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	@ 0x58
 8002528:	e007      	b.n	800253a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	aaaaaaab 	.word	0xaaaaaaab
 8002550:	08008938 	.word	0x08008938

08002554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11f      	bne.n	80025ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d856      	bhi.n	8002622 <DMA_CheckFifoParam+0xce>
 8002574:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <DMA_CheckFifoParam+0x28>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800259f 	.word	0x0800259f
 8002584:	0800258d 	.word	0x0800258d
 8002588:	08002623 	.word	0x08002623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d046      	beq.n	8002626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e043      	b.n	8002626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a6:	d140      	bne.n	800262a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e03d      	b.n	800262a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025b6:	d121      	bne.n	80025fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d837      	bhi.n	800262e <DMA_CheckFifoParam+0xda>
 80025be:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <DMA_CheckFifoParam+0x70>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025db 	.word	0x080025db
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	080025ed 	.word	0x080025ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e030      	b.n	800263c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d025      	beq.n	8002632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e022      	b.n	8002632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fa:	e01c      	b.n	8002636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d903      	bls.n	800260a <DMA_CheckFifoParam+0xb6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002608:	e018      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      break;
 800260e:	e015      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e00b      	b.n	800263a <DMA_CheckFifoParam+0xe6>
      break;
 8002622:	bf00      	nop
 8002624:	e00a      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e008      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e006      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;   
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
    }
  } 
  
  return status; 
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b80      	cmp	r3, #128	@ 0x80
 8002664:	d106      	bne.n	8002674 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f001 b911 	b.w	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2240      	movs	r2, #64	@ 0x40
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f001 b8ff 	b.w	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80026a2:	2302      	movs	r3, #2
 80026a4:	f001 b8f7 	b.w	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f041 80e5 	bne.w	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80026da:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f001 f910 	bl	8003910 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b8d      	ldr	r3, [pc, #564]	@ (800292c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d960      	bls.n	80027be <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8b      	ldr	r2, [pc, #556]	@ (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d057      	beq.n	80027b6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8a      	ldr	r2, [pc, #552]	@ (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d050      	beq.n	80027b2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a88      	ldr	r2, [pc, #544]	@ (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d049      	beq.n	80027ae <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a87      	ldr	r2, [pc, #540]	@ (800293c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d042      	beq.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a85      	ldr	r2, [pc, #532]	@ (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d03a      	beq.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a84      	ldr	r2, [pc, #528]	@ (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d032      	beq.n	800279e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a82      	ldr	r2, [pc, #520]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02a      	beq.n	8002798 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a81      	ldr	r2, [pc, #516]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7f      	ldr	r2, [pc, #508]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01a      	beq.n	800278c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7e      	ldr	r2, [pc, #504]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d012      	beq.n	8002786 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7c      	ldr	r2, [pc, #496]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00a      	beq.n	8002780 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7b      	ldr	r2, [pc, #492]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002774:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002778:	e01e      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800277a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800277e:	e01b      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002780:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002784:	e018      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002786:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800278a:	e015      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800278c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002790:	e012      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002796:	e00f      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002798:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279c:	e00c      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800279e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027a2:	e009      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027a8:	e006      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027ae:	2320      	movs	r3, #32
 80027b0:	e002      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b2:	2320      	movs	r3, #32
 80027b4:	e000      	b.n	80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b6:	2320      	movs	r3, #32
 80027b8:	4a69      	ldr	r2, [pc, #420]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	e14f      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b67      	ldr	r3, [pc, #412]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d960      	bls.n	800288c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d057      	beq.n	8002884 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d050      	beq.n	8002880 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a55      	ldr	r2, [pc, #340]	@ (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d049      	beq.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a53      	ldr	r2, [pc, #332]	@ (800293c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d042      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a52      	ldr	r2, [pc, #328]	@ (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d03a      	beq.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a50      	ldr	r2, [pc, #320]	@ (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d032      	beq.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a4f      	ldr	r2, [pc, #316]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d02a      	beq.n	8002866 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a4d      	ldr	r2, [pc, #308]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a4c      	ldr	r2, [pc, #304]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01a      	beq.n	800285a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a4a      	ldr	r2, [pc, #296]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d012      	beq.n	8002854 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a49      	ldr	r2, [pc, #292]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00a      	beq.n	800284e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a47      	ldr	r2, [pc, #284]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d102      	bne.n	8002848 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002842:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002846:	e01e      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002848:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800284c:	e01b      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800284e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002852:	e018      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002854:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002858:	e015      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800285a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800285e:	e012      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002860:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002864:	e00f      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002866:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800286a:	e00c      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800286c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002870:	e009      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002876:	e006      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002878:	2320      	movs	r3, #32
 800287a:	e004      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800287c:	2320      	movs	r3, #32
 800287e:	e002      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002880:	2320      	movs	r3, #32
 8002882:	e000      	b.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002884:	2320      	movs	r3, #32
 8002886:	4a36      	ldr	r2, [pc, #216]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e0e8      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b35      	ldr	r3, [pc, #212]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002894:	429a      	cmp	r2, r3
 8002896:	f240 8082 	bls.w	800299e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a24      	ldr	r2, [pc, #144]	@ (8002930 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d078      	beq.n	8002996 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d071      	beq.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d06a      	beq.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d063      	beq.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d05b      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d053      	beq.n	800297e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04b      	beq.n	8002978 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d043      	beq.n	8002972 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d03b      	beq.n	800296c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d012      	beq.n	8002924 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00a      	beq.n	800291e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a13      	ldr	r2, [pc, #76]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d102      	bne.n	8002918 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002912:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002916:	e03f      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002918:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800291c:	e03c      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800291e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002922:	e039      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002924:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002928:	e036      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800292a:	bf00      	nop
 800292c:	40026458 	.word	0x40026458
 8002930:	40026010 	.word	0x40026010
 8002934:	40026410 	.word	0x40026410
 8002938:	40026070 	.word	0x40026070
 800293c:	40026470 	.word	0x40026470
 8002940:	40026028 	.word	0x40026028
 8002944:	40026428 	.word	0x40026428
 8002948:	40026088 	.word	0x40026088
 800294c:	40026488 	.word	0x40026488
 8002950:	40026040 	.word	0x40026040
 8002954:	40026440 	.word	0x40026440
 8002958:	400260a0 	.word	0x400260a0
 800295c:	400264a0 	.word	0x400264a0
 8002960:	40026400 	.word	0x40026400
 8002964:	400260b8 	.word	0x400260b8
 8002968:	40026058 	.word	0x40026058
 800296c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002970:	e012      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002976:	e00f      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002978:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800297c:	e00c      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800297e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002982:	e009      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002988:	e006      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800298a:	2320      	movs	r3, #32
 800298c:	e004      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800298e:	2320      	movs	r3, #32
 8002990:	e002      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002992:	2320      	movs	r3, #32
 8002994:	e000      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002996:	2320      	movs	r3, #32
 8002998:	4a8c      	ldr	r2, [pc, #560]	@ (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800299a:	60d3      	str	r3, [r2, #12]
 800299c:	e05f      	b.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a8b      	ldr	r2, [pc, #556]	@ (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d057      	beq.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a89      	ldr	r2, [pc, #548]	@ (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d050      	beq.n	8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a88      	ldr	r2, [pc, #544]	@ (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d049      	beq.n	8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a86      	ldr	r2, [pc, #536]	@ (8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d042      	beq.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a85      	ldr	r2, [pc, #532]	@ (8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03a      	beq.n	8002a46 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a83      	ldr	r2, [pc, #524]	@ (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d032      	beq.n	8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a82      	ldr	r2, [pc, #520]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d02a      	beq.n	8002a3a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a80      	ldr	r2, [pc, #512]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d022      	beq.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7f      	ldr	r2, [pc, #508]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d01a      	beq.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a7d      	ldr	r2, [pc, #500]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d012      	beq.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00a      	beq.n	8002a22 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7a      	ldr	r2, [pc, #488]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002a16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a1a:	e01e      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a20:	e01b      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a22:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a26:	e018      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a2c:	e015      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a32:	e012      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a38:	e00f      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a3e:	e00c      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a44:	e009      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a4a:	e006      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e004      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a50:	2320      	movs	r3, #32
 8002a52:	e002      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a54:	2320      	movs	r3, #32
 8002a56:	e000      	b.n	8002a5a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a58:	2320      	movs	r3, #32
 8002a5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002a5c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d960      	bls.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a58      	ldr	r2, [pc, #352]	@ (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d057      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a56      	ldr	r2, [pc, #344]	@ (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d050      	beq.n	8002b20 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a55      	ldr	r2, [pc, #340]	@ (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d049      	beq.n	8002b1c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a53      	ldr	r2, [pc, #332]	@ (8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d042      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d03a      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a50      	ldr	r2, [pc, #320]	@ (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d032      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4f      	ldr	r2, [pc, #316]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d02a      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01a      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d012      	beq.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a49      	ldr	r2, [pc, #292]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00a      	beq.n	8002aee <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a47      	ldr	r2, [pc, #284]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002ae2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ae6:	e01e      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ae8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002aec:	e01b      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002aee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002af2:	e018      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002af4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002af8:	e015      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002afa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002afe:	e012      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b04:	e00f      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b0a:	e00c      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b10:	e009      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b16:	e006      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	e004      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	e002      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b20:	2310      	movs	r3, #16
 8002b22:	e000      	b.n	8002b26 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b24:	2310      	movs	r3, #16
 8002b26:	4a37      	ldr	r2, [pc, #220]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002b28:	60d3      	str	r3, [r2, #12]
 8002b2a:	e14f      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b35      	ldr	r3, [pc, #212]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f240 8082 	bls.w	8002c3e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a24      	ldr	r2, [pc, #144]	@ (8002bd0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d078      	beq.n	8002c36 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d071      	beq.n	8002c32 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d06a      	beq.n	8002c2e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d063      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1e      	ldr	r2, [pc, #120]	@ (8002be0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d05b      	beq.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1c      	ldr	r2, [pc, #112]	@ (8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d053      	beq.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d04b      	beq.n	8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d043      	beq.n	8002c12 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a18      	ldr	r2, [pc, #96]	@ (8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d012      	beq.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a15      	ldr	r2, [pc, #84]	@ (8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00a      	beq.n	8002bbe <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d102      	bne.n	8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002bb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bb6:	e03f      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bb8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bbc:	e03c      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bc2:	e039      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bc8:	e036      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bca:	bf00      	nop
 8002bcc:	40026000 	.word	0x40026000
 8002bd0:	40026010 	.word	0x40026010
 8002bd4:	40026410 	.word	0x40026410
 8002bd8:	40026070 	.word	0x40026070
 8002bdc:	40026470 	.word	0x40026470
 8002be0:	40026028 	.word	0x40026028
 8002be4:	40026428 	.word	0x40026428
 8002be8:	40026088 	.word	0x40026088
 8002bec:	40026488 	.word	0x40026488
 8002bf0:	40026040 	.word	0x40026040
 8002bf4:	40026440 	.word	0x40026440
 8002bf8:	400260a0 	.word	0x400260a0
 8002bfc:	400264a0 	.word	0x400264a0
 8002c00:	40026458 	.word	0x40026458
 8002c04:	40026400 	.word	0x40026400
 8002c08:	400260b8 	.word	0x400260b8
 8002c0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c10:	e012      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c16:	e00f      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1c:	e00c      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c22:	e009      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c28:	e006      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	e004      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e002      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c32:	2310      	movs	r3, #16
 8002c34:	e000      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c36:	2310      	movs	r3, #16
 8002c38:	4a8c      	ldr	r2, [pc, #560]	@ (8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	e0c6      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b8a      	ldr	r3, [pc, #552]	@ (8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d960      	bls.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a89      	ldr	r2, [pc, #548]	@ (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d057      	beq.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a87      	ldr	r2, [pc, #540]	@ (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d050      	beq.n	8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a86      	ldr	r2, [pc, #536]	@ (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d049      	beq.n	8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a84      	ldr	r2, [pc, #528]	@ (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d042      	beq.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a83      	ldr	r2, [pc, #524]	@ (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03a      	beq.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a81      	ldr	r2, [pc, #516]	@ (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d032      	beq.n	8002cec <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a80      	ldr	r2, [pc, #512]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02a      	beq.n	8002ce6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a7e      	ldr	r2, [pc, #504]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d022      	beq.n	8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d01a      	beq.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7b      	ldr	r2, [pc, #492]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d012      	beq.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00a      	beq.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a78      	ldr	r2, [pc, #480]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d102      	bne.n	8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002cc2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cc6:	e01e      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cc8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ccc:	e01b      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cd2:	e018      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cd4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cd8:	e015      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cda:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cde:	e012      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ce4:	e00f      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cea:	e00c      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf0:	e009      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf6:	e006      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	e004      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	e002      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d00:	2310      	movs	r3, #16
 8002d02:	e000      	b.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d04:	2310      	movs	r3, #16
 8002d06:	4a67      	ldr	r2, [pc, #412]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002d08:	60d3      	str	r3, [r2, #12]
 8002d0a:	e05f      	b.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a58      	ldr	r2, [pc, #352]	@ (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d057      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a57      	ldr	r2, [pc, #348]	@ (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d050      	beq.n	8002dc2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a55      	ldr	r2, [pc, #340]	@ (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d049      	beq.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a54      	ldr	r2, [pc, #336]	@ (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d042      	beq.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a52      	ldr	r2, [pc, #328]	@ (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d03a      	beq.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a51      	ldr	r2, [pc, #324]	@ (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d032      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02a      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a4e      	ldr	r2, [pc, #312]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01a      	beq.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d012      	beq.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a49      	ldr	r2, [pc, #292]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00a      	beq.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d102      	bne.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002d84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d88:	e01e      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d8e:	e01b      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d94:	e018      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d96:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d9a:	e015      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002da0:	e012      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002da6:	e00f      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dac:	e00c      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db2:	e009      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db8:	e006      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dba:	2310      	movs	r3, #16
 8002dbc:	e004      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	e002      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	e000      	b.n	8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	4a36      	ldr	r2, [pc, #216]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002dca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f240 8082 	bls.w	8002ede <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a25      	ldr	r2, [pc, #148]	@ (8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d078      	beq.n	8002ed6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d071      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	@ (8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d06a      	beq.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d063      	beq.n	8002eca <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d05b      	beq.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d053      	beq.n	8002ebe <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d04b      	beq.n	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d043      	beq.n	8002eb2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a19      	ldr	r2, [pc, #100]	@ (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d03b      	beq.n	8002eac <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d012      	beq.n	8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00a      	beq.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d102      	bne.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002e52:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e56:	e03f      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e5c:	e03c      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e5e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e62:	e039      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e68:	e036      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e6a:	bf00      	nop
 8002e6c:	40026400 	.word	0x40026400
 8002e70:	40026058 	.word	0x40026058
 8002e74:	40026010 	.word	0x40026010
 8002e78:	40026410 	.word	0x40026410
 8002e7c:	40026070 	.word	0x40026070
 8002e80:	40026470 	.word	0x40026470
 8002e84:	40026028 	.word	0x40026028
 8002e88:	40026428 	.word	0x40026428
 8002e8c:	40026088 	.word	0x40026088
 8002e90:	40026488 	.word	0x40026488
 8002e94:	40026040 	.word	0x40026040
 8002e98:	40026440 	.word	0x40026440
 8002e9c:	400260a0 	.word	0x400260a0
 8002ea0:	400264a0 	.word	0x400264a0
 8002ea4:	40026000 	.word	0x40026000
 8002ea8:	40026458 	.word	0x40026458
 8002eac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002eb0:	e012      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb6:	e00f      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ebc:	e00c      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ec2:	e009      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ec8:	e006      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	e004      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ece:	2308      	movs	r3, #8
 8002ed0:	e002      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	4a8c      	ldr	r2, [pc, #560]	@ (800310c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002eda:	60d3      	str	r3, [r2, #12]
 8002edc:	e14e      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d960      	bls.n	8002fac <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a89      	ldr	r2, [pc, #548]	@ (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d057      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a87      	ldr	r2, [pc, #540]	@ (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d050      	beq.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a86      	ldr	r2, [pc, #536]	@ (800311c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d049      	beq.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a84      	ldr	r2, [pc, #528]	@ (8003120 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d042      	beq.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a83      	ldr	r2, [pc, #524]	@ (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03a      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a81      	ldr	r2, [pc, #516]	@ (8003128 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d032      	beq.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a80      	ldr	r2, [pc, #512]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d02a      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7e      	ldr	r2, [pc, #504]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d022      	beq.n	8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7d      	ldr	r2, [pc, #500]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01a      	beq.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a7b      	ldr	r2, [pc, #492]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d012      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7a      	ldr	r2, [pc, #488]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00a      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a78      	ldr	r2, [pc, #480]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d102      	bne.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002f62:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f66:	e01e      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6c:	e01b      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f6e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f72:	e018      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f78:	e015      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f7e:	e012      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f84:	e00f      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f8a:	e00c      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f90:	e009      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f96:	e006      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f98:	2308      	movs	r3, #8
 8002f9a:	e004      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	e002      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	4a59      	ldr	r2, [pc, #356]	@ (800310c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002fa8:	6093      	str	r3, [r2, #8]
 8002faa:	e0e7      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b64      	ldr	r3, [pc, #400]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d960      	bls.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a55      	ldr	r2, [pc, #340]	@ (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d057      	beq.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a54      	ldr	r2, [pc, #336]	@ (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d050      	beq.n	800306e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	@ (800311c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d049      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a51      	ldr	r2, [pc, #324]	@ (8003120 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d042      	beq.n	8003066 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d03a      	beq.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4e      	ldr	r2, [pc, #312]	@ (8003128 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d032      	beq.n	800305a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02a      	beq.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a4b      	ldr	r2, [pc, #300]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a49      	ldr	r2, [pc, #292]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01a      	beq.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a48      	ldr	r2, [pc, #288]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d012      	beq.n	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a46      	ldr	r2, [pc, #280]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00a      	beq.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a45      	ldr	r2, [pc, #276]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d102      	bne.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003030:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003034:	e01e      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800303a:	e01b      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800303c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003040:	e018      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003042:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003046:	e015      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800304c:	e012      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800304e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003052:	e00f      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003058:	e00c      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800305a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800305e:	e009      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003064:	e006      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003066:	2308      	movs	r3, #8
 8003068:	e004      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800306a:	2308      	movs	r3, #8
 800306c:	e002      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800306e:	2308      	movs	r3, #8
 8003070:	e000      	b.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003072:	2308      	movs	r3, #8
 8003074:	4a34      	ldr	r2, [pc, #208]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003076:	60d3      	str	r3, [r2, #12]
 8003078:	e080      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d078      	beq.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d071      	beq.n	8003172 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a22      	ldr	r2, [pc, #136]	@ (800311c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d06a      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d063      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d05b      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d053      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04b      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d043      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d03b      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d012      	beq.n	8003104 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00a      	beq.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d102      	bne.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80030f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80030f6:	e03f      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030fc:	e03c      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030fe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003102:	e039      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003104:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003108:	e036      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800310a:	bf00      	nop
 800310c:	40026400 	.word	0x40026400
 8003110:	400260b8 	.word	0x400260b8
 8003114:	40026010 	.word	0x40026010
 8003118:	40026410 	.word	0x40026410
 800311c:	40026070 	.word	0x40026070
 8003120:	40026470 	.word	0x40026470
 8003124:	40026028 	.word	0x40026028
 8003128:	40026428 	.word	0x40026428
 800312c:	40026088 	.word	0x40026088
 8003130:	40026488 	.word	0x40026488
 8003134:	40026040 	.word	0x40026040
 8003138:	40026440 	.word	0x40026440
 800313c:	400260a0 	.word	0x400260a0
 8003140:	400264a0 	.word	0x400264a0
 8003144:	40026058 	.word	0x40026058
 8003148:	40026000 	.word	0x40026000
 800314c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003150:	e012      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003156:	e00f      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800315c:	e00c      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800315e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003162:	e009      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003168:	e006      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800316a:	2308      	movs	r3, #8
 800316c:	e004      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800316e:	2308      	movs	r3, #8
 8003170:	e002      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003172:	2308      	movs	r3, #8
 8003174:	e000      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003176:	2308      	movs	r3, #8
 8003178:	4a8a      	ldr	r2, [pc, #552]	@ (80033a4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800317a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b89      	ldr	r3, [pc, #548]	@ (80033a8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d960      	bls.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a87      	ldr	r2, [pc, #540]	@ (80033ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d057      	beq.n	8003242 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a86      	ldr	r2, [pc, #536]	@ (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d050      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a84      	ldr	r2, [pc, #528]	@ (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d049      	beq.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a83      	ldr	r2, [pc, #524]	@ (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d042      	beq.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a81      	ldr	r2, [pc, #516]	@ (80033bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d03a      	beq.n	8003230 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a80      	ldr	r2, [pc, #512]	@ (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d032      	beq.n	800322a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7e      	ldr	r2, [pc, #504]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02a      	beq.n	8003224 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7d      	ldr	r2, [pc, #500]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7b      	ldr	r2, [pc, #492]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01a      	beq.n	8003218 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7a      	ldr	r2, [pc, #488]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d012      	beq.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a78      	ldr	r2, [pc, #480]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00a      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a77      	ldr	r2, [pc, #476]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d102      	bne.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003200:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003204:	e01e      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003206:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800320a:	e01b      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800320c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003210:	e018      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003212:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003216:	e015      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003218:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800321c:	e012      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800321e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003222:	e00f      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003228:	e00c      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800322a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322e:	e009      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003234:	e006      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003236:	2304      	movs	r3, #4
 8003238:	e004      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800323a:	2304      	movs	r3, #4
 800323c:	e002      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800323e:	2304      	movs	r3, #4
 8003240:	e000      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003242:	2304      	movs	r3, #4
 8003244:	4a65      	ldr	r2, [pc, #404]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e150      	b.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d960      	bls.n	8003318 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a54      	ldr	r2, [pc, #336]	@ (80033ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d057      	beq.n	8003310 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d050      	beq.n	800330c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a51      	ldr	r2, [pc, #324]	@ (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d049      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4f      	ldr	r2, [pc, #316]	@ (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d042      	beq.n	8003304 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4e      	ldr	r2, [pc, #312]	@ (80033bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d03a      	beq.n	80032fe <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4c      	ldr	r2, [pc, #304]	@ (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d032      	beq.n	80032f8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4b      	ldr	r2, [pc, #300]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02a      	beq.n	80032f2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a49      	ldr	r2, [pc, #292]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a48      	ldr	r2, [pc, #288]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d01a      	beq.n	80032e6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a46      	ldr	r2, [pc, #280]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d012      	beq.n	80032e0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a45      	ldr	r2, [pc, #276]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00a      	beq.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a43      	ldr	r2, [pc, #268]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d102      	bne.n	80032d4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80032ce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032d2:	e01e      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d8:	e01b      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032da:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032de:	e018      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032e4:	e015      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032ea:	e012      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032f0:	e00f      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032f6:	e00c      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032fc:	e009      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003302:	e006      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003304:	2304      	movs	r3, #4
 8003306:	e004      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003308:	2304      	movs	r3, #4
 800330a:	e002      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800330c:	2304      	movs	r3, #4
 800330e:	e000      	b.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003310:	2304      	movs	r3, #4
 8003312:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	e0e9      	b.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b31      	ldr	r3, [pc, #196]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003320:	429a      	cmp	r2, r3
 8003322:	f240 8083 	bls.w	800342c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a20      	ldr	r2, [pc, #128]	@ (80033ac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d079      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d072      	beq.n	8003420 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d06b      	beq.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d064      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d05c      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d054      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04c      	beq.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d044      	beq.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03c      	beq.n	80033fa <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a12      	ldr	r2, [pc, #72]	@ (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d034      	beq.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d02c      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0f      	ldr	r2, [pc, #60]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d124      	bne.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800339e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033a2:	e040      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033a4:	40026000 	.word	0x40026000
 80033a8:	40026458 	.word	0x40026458
 80033ac:	40026010 	.word	0x40026010
 80033b0:	40026410 	.word	0x40026410
 80033b4:	40026070 	.word	0x40026070
 80033b8:	40026470 	.word	0x40026470
 80033bc:	40026028 	.word	0x40026028
 80033c0:	40026428 	.word	0x40026428
 80033c4:	40026088 	.word	0x40026088
 80033c8:	40026488 	.word	0x40026488
 80033cc:	40026040 	.word	0x40026040
 80033d0:	40026440 	.word	0x40026440
 80033d4:	400260a0 	.word	0x400260a0
 80033d8:	400264a0 	.word	0x400264a0
 80033dc:	40026400 	.word	0x40026400
 80033e0:	400260b8 	.word	0x400260b8
 80033e4:	40026058 	.word	0x40026058
 80033e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ec:	e01b      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033ee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033f2:	e018      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033f8:	e015      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033fa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033fe:	e012      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003404:	e00f      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800340a:	e00c      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800340c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003410:	e009      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003416:	e006      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003418:	2304      	movs	r3, #4
 800341a:	e004      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800341c:	2304      	movs	r3, #4
 800341e:	e002      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003420:	2304      	movs	r3, #4
 8003422:	e000      	b.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003424:	2304      	movs	r3, #4
 8003426:	4a8b      	ldr	r2, [pc, #556]	@ (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003428:	60d3      	str	r3, [r2, #12]
 800342a:	e05f      	b.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a89      	ldr	r2, [pc, #548]	@ (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d057      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a88      	ldr	r2, [pc, #544]	@ (800365c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d050      	beq.n	80034e2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a86      	ldr	r2, [pc, #536]	@ (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d049      	beq.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a85      	ldr	r2, [pc, #532]	@ (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d042      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a83      	ldr	r2, [pc, #524]	@ (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03a      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a82      	ldr	r2, [pc, #520]	@ (800366c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d032      	beq.n	80034ce <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a80      	ldr	r2, [pc, #512]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02a      	beq.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7f      	ldr	r2, [pc, #508]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a7d      	ldr	r2, [pc, #500]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01a      	beq.n	80034bc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7c      	ldr	r2, [pc, #496]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d012      	beq.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7a      	ldr	r2, [pc, #488]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00a      	beq.n	80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80034a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034a8:	e01e      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ae:	e01b      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034b4:	e018      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034b6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034ba:	e015      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034c0:	e012      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c6:	e00f      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034cc:	e00c      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034d2:	e009      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034d8:	e006      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034da:	2304      	movs	r3, #4
 80034dc:	e004      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034de:	2304      	movs	r3, #4
 80034e0:	e002      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e000      	b.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e6:	2304      	movs	r3, #4
 80034e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80034ea:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d95c      	bls.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a56      	ldr	r2, [pc, #344]	@ (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d053      	beq.n	80035aa <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a55      	ldr	r2, [pc, #340]	@ (800365c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04c      	beq.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a53      	ldr	r2, [pc, #332]	@ (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a52      	ldr	r2, [pc, #328]	@ (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03e      	beq.n	800359e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a50      	ldr	r2, [pc, #320]	@ (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d037      	beq.n	800359a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4f      	ldr	r2, [pc, #316]	@ (800366c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d030      	beq.n	8003596 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4d      	ldr	r2, [pc, #308]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d029      	beq.n	8003592 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4c      	ldr	r2, [pc, #304]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4a      	ldr	r2, [pc, #296]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01a      	beq.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a49      	ldr	r2, [pc, #292]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d012      	beq.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a47      	ldr	r2, [pc, #284]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00a      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a46      	ldr	r2, [pc, #280]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d102      	bne.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003574:	e01a      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003576:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800357a:	e017      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800357c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003580:	e014      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003586:	e011      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800358c:	e00e      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800358e:	2340      	movs	r3, #64	@ 0x40
 8003590:	e00c      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003592:	2340      	movs	r3, #64	@ 0x40
 8003594:	e00a      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003596:	2340      	movs	r3, #64	@ 0x40
 8003598:	e008      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800359a:	2340      	movs	r3, #64	@ 0x40
 800359c:	e006      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800359e:	2301      	movs	r3, #1
 80035a0:	e004      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e002      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035aa:	2301      	movs	r3, #1
 80035ac:	4a37      	ldr	r2, [pc, #220]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80035ae:	60d3      	str	r3, [r2, #12]
 80035b0:	e141      	b.n	8003836 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b35      	ldr	r3, [pc, #212]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d97c      	bls.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a25      	ldr	r2, [pc, #148]	@ (8003658 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d073      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a23      	ldr	r2, [pc, #140]	@ (800365c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d06c      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a22      	ldr	r2, [pc, #136]	@ (8003660 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d065      	beq.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a20      	ldr	r2, [pc, #128]	@ (8003664 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d05e      	beq.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003668 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d057      	beq.n	80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1d      	ldr	r2, [pc, #116]	@ (800366c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d050      	beq.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d049      	beq.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1a      	ldr	r2, [pc, #104]	@ (8003674 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d042      	beq.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01a      	beq.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a17      	ldr	r2, [pc, #92]	@ (800367c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d012      	beq.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00a      	beq.n	8003642 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d102      	bne.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800363a:	e03a      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800363c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003640:	e037      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003646:	e034      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800364c:	e031      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800364e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003652:	e02e      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003654:	40026000 	.word	0x40026000
 8003658:	40026010 	.word	0x40026010
 800365c:	40026410 	.word	0x40026410
 8003660:	40026070 	.word	0x40026070
 8003664:	40026470 	.word	0x40026470
 8003668:	40026028 	.word	0x40026028
 800366c:	40026428 	.word	0x40026428
 8003670:	40026088 	.word	0x40026088
 8003674:	40026488 	.word	0x40026488
 8003678:	40026040 	.word	0x40026040
 800367c:	40026440 	.word	0x40026440
 8003680:	400260a0 	.word	0x400260a0
 8003684:	400264a0 	.word	0x400264a0
 8003688:	40026458 	.word	0x40026458
 800368c:	40026400 	.word	0x40026400
 8003690:	400260b8 	.word	0x400260b8
 8003694:	2340      	movs	r3, #64	@ 0x40
 8003696:	e00c      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003698:	2340      	movs	r3, #64	@ 0x40
 800369a:	e00a      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800369c:	2340      	movs	r3, #64	@ 0x40
 800369e:	e008      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036a0:	2340      	movs	r3, #64	@ 0x40
 80036a2:	e006      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e004      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e002      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036b0:	2301      	movs	r3, #1
 80036b2:	4a7b      	ldr	r2, [pc, #492]	@ (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	e0be      	b.n	8003836 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b79      	ldr	r3, [pc, #484]	@ (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d95c      	bls.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	@ (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d053      	beq.n	8003776 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a76      	ldr	r2, [pc, #472]	@ (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d04c      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	@ (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d045      	beq.n	800376e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	@ (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d03e      	beq.n	800376a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a71      	ldr	r2, [pc, #452]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d037      	beq.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a70      	ldr	r2, [pc, #448]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d030      	beq.n	8003762 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d029      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6d      	ldr	r2, [pc, #436]	@ (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d022      	beq.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6b      	ldr	r2, [pc, #428]	@ (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01a      	beq.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6a      	ldr	r2, [pc, #424]	@ (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d012      	beq.n	800374e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a68      	ldr	r2, [pc, #416]	@ (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00a      	beq.n	8003748 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a67      	ldr	r2, [pc, #412]	@ (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d102      	bne.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800373c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003740:	e01a      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003746:	e017      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800374c:	e014      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800374e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003752:	e011      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003758:	e00e      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800375a:	2340      	movs	r3, #64	@ 0x40
 800375c:	e00c      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800375e:	2340      	movs	r3, #64	@ 0x40
 8003760:	e00a      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003762:	2340      	movs	r3, #64	@ 0x40
 8003764:	e008      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003766:	2340      	movs	r3, #64	@ 0x40
 8003768:	e006      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800376a:	2301      	movs	r3, #1
 800376c:	e004      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800376e:	2301      	movs	r3, #1
 8003770:	e002      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003776:	2301      	movs	r3, #1
 8003778:	4a57      	ldr	r2, [pc, #348]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800377a:	60d3      	str	r3, [r2, #12]
 800377c:	e05b      	b.n	8003836 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a49      	ldr	r2, [pc, #292]	@ (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d053      	beq.n	8003830 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a47      	ldr	r2, [pc, #284]	@ (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d04c      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a46      	ldr	r2, [pc, #280]	@ (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d045      	beq.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a44      	ldr	r2, [pc, #272]	@ (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03e      	beq.n	8003824 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a43      	ldr	r2, [pc, #268]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d037      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a41      	ldr	r2, [pc, #260]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d030      	beq.n	800381c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a40      	ldr	r2, [pc, #256]	@ (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d029      	beq.n	8003818 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3e      	ldr	r2, [pc, #248]	@ (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	@ (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01a      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d012      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a3a      	ldr	r2, [pc, #232]	@ (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00a      	beq.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a38      	ldr	r2, [pc, #224]	@ (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d102      	bne.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80037f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037fa:	e01a      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003800:	e017      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003806:	e014      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800380c:	e011      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800380e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003812:	e00e      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003814:	2340      	movs	r3, #64	@ 0x40
 8003816:	e00c      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003818:	2340      	movs	r3, #64	@ 0x40
 800381a:	e00a      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800381c:	2340      	movs	r3, #64	@ 0x40
 800381e:	e008      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003820:	2340      	movs	r3, #64	@ 0x40
 8003822:	e006      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003824:	2301      	movs	r3, #1
 8003826:	e004      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003828:	2301      	movs	r3, #1
 800382a:	e002      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003830:	2301      	movs	r3, #1
 8003832:	4a29      	ldr	r2, [pc, #164]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003834:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0216 	orr.w	r2, r2, #22
 8003844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0208 	orr.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e005      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40026400 	.word	0x40026400
 80038a4:	40026058 	.word	0x40026058
 80038a8:	40026010 	.word	0x40026010
 80038ac:	40026410 	.word	0x40026410
 80038b0:	40026070 	.word	0x40026070
 80038b4:	40026470 	.word	0x40026470
 80038b8:	40026028 	.word	0x40026028
 80038bc:	40026428 	.word	0x40026428
 80038c0:	40026088 	.word	0x40026088
 80038c4:	40026488 	.word	0x40026488
 80038c8:	40026040 	.word	0x40026040
 80038cc:	40026440 	.word	0x40026440
 80038d0:	400260a0 	.word	0x400260a0
 80038d4:	400264a0 	.word	0x400264a0
 80038d8:	40026000 	.word	0x40026000

080038dc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	e003      	b.n	8003902 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b40      	cmp	r3, #64	@ 0x40
 800392c:	d108      	bne.n	8003940 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800393e:	e007      	b.n	8003950 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e165      	b.n	8003c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8154 	bne.w	8003c3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d130      	bne.n	8003a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80ae 	beq.w	8003c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <HAL_GPIO_Init+0x300>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	4a5c      	ldr	r2, [pc, #368]	@ (8003c5c <HAL_GPIO_Init+0x300>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c5c <HAL_GPIO_Init+0x300>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003afe:	4a58      	ldr	r2, [pc, #352]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4f      	ldr	r2, [pc, #316]	@ (8003c64 <HAL_GPIO_Init+0x308>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d025      	beq.n	8003b76 <HAL_GPIO_Init+0x21a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c68 <HAL_GPIO_Init+0x30c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <HAL_GPIO_Init+0x216>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4d      	ldr	r2, [pc, #308]	@ (8003c6c <HAL_GPIO_Init+0x310>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x212>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c70 <HAL_GPIO_Init+0x314>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x20e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4b      	ldr	r2, [pc, #300]	@ (8003c74 <HAL_GPIO_Init+0x318>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x20a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c78 <HAL_GPIO_Init+0x31c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x206>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a49      	ldr	r2, [pc, #292]	@ (8003c7c <HAL_GPIO_Init+0x320>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x202>
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	e00c      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b5e:	2307      	movs	r3, #7
 8003b60:	e00a      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b62:	2305      	movs	r3, #5
 8003b64:	e008      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b66:	2304      	movs	r3, #4
 8003b68:	e006      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e004      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_GPIO_Init+0x21c>
 8003b76:	2300      	movs	r3, #0
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	f002 0203 	and.w	r2, r2, #3
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	4093      	lsls	r3, r2
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b88:	4935      	ldr	r1, [pc, #212]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	3302      	adds	r3, #2
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b96:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bba:	4a31      	ldr	r2, [pc, #196]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be4:	4a26      	ldr	r2, [pc, #152]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bea:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c14:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c38:	4a11      	ldr	r2, [pc, #68]	@ (8003c80 <HAL_GPIO_Init+0x324>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b0f      	cmp	r3, #15
 8003c48:	f67f ae96 	bls.w	8003978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	3724      	adds	r7, #36	@ 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40020000 	.word	0x40020000
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	40020800 	.word	0x40020800
 8003c70:	40020c00 	.word	0x40020c00
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40021400 	.word	0x40021400
 8003c7c:	40021800 	.word	0x40021800
 8003c80:	40013c00 	.word	0x40013c00

08003c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e001      	b.n	8003ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cd0:	e003      	b.n	8003cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	041a      	lsls	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	619a      	str	r2, [r3, #24]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	041a      	lsls	r2, r3, #16
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	400b      	ands	r3, r1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	619a      	str	r2, [r3, #24]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d26:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d32:	4a05      	ldr	r2, [pc, #20]	@ (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f806 	bl	8003d4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013c00 	.word	0x40013c00

08003d4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e12b      	b.n	8003fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fa9e 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f001 f9f2 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a81      	ldr	r2, [pc, #516]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d807      	bhi.n	8003de8 <HAL_I2C_Init+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a80      	ldr	r2, [pc, #512]	@ (8003fdc <HAL_I2C_Init+0x278>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e006      	b.n	8003df6 <HAL_I2C_Init+0x92>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a7d      	ldr	r2, [pc, #500]	@ (8003fe0 <HAL_I2C_Init+0x27c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bf94      	ite	ls
 8003df0:	2301      	movls	r3, #1
 8003df2:	2300      	movhi	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0e7      	b.n	8003fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a78      	ldr	r2, [pc, #480]	@ (8003fe4 <HAL_I2C_Init+0x280>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0c9b      	lsrs	r3, r3, #18
 8003e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d802      	bhi.n	8003e38 <HAL_I2C_Init+0xd4>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e009      	b.n	8003e4c <HAL_I2C_Init+0xe8>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_I2C_Init+0x284>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	495c      	ldr	r1, [pc, #368]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d819      	bhi.n	8003ea0 <HAL_I2C_Init+0x13c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e59      	subs	r1, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e80:	400b      	ands	r3, r1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_I2C_Init+0x138>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e59      	subs	r1, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	e051      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e04f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_I2C_Init+0x168>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_I2C_Init+0x18e>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	0099      	lsls	r1, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x196>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_I2C_Init+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e58      	subs	r0, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	440b      	add	r3, r1
 8003f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1e:	e00f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	0099      	lsls	r1, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	6809      	ldr	r1, [r1, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6911      	ldr	r1, [r2, #16]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	000186a0 	.word	0x000186a0
 8003fdc:	001e847f 	.word	0x001e847f
 8003fe0:	003d08ff 	.word	0x003d08ff
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	10624dd3 	.word	0x10624dd3

08003fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7fd fbe4 	bl	80017cc <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	f040 80e0 	bne.w	80041d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2319      	movs	r3, #25
 800401a:	2201      	movs	r2, #1
 800401c:	4970      	ldr	r1, [pc, #448]	@ (80041e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fc64 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	e0d3      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_I2C_Master_Transmit+0x50>
 8004038:	2302      	movs	r3, #2
 800403a:	e0cc      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d007      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2210      	movs	r2, #16
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	893a      	ldrh	r2, [r7, #8]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a50      	ldr	r2, [pc, #320]	@ (80041e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80040a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 face 	bl	800464c <I2C_MasterRequestWrite>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08d      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040d0:	e066      	b.n	80041a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fd22 	bl	8004b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06b      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11b      	bne.n	8004174 <HAL_I2C_Master_Transmit+0x188>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6a39      	ldr	r1, [r7, #32]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fd19 	bl	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	2b04      	cmp	r3, #4
 800418a:	d107      	bne.n	800419c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e01a      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d194      	bne.n	80040d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	00100002 	.word	0x00100002
 80041e4:	ffff0000 	.word	0xffff0000

080041e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	@ 0x30
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	461a      	mov	r2, r3
 80041f4:	460b      	mov	r3, r1
 80041f6:	817b      	strh	r3, [r7, #10]
 80041f8:	4613      	mov	r3, r2
 80041fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7fd fae6 	bl	80017cc <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	f040 8217 	bne.w	800463e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2319      	movs	r3, #25
 8004216:	2201      	movs	r2, #1
 8004218:	497c      	ldr	r1, [pc, #496]	@ (800440c <HAL_I2C_Master_Receive+0x224>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fb66 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
 8004228:	e20a      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_I2C_Master_Receive+0x50>
 8004234:	2302      	movs	r3, #2
 8004236:	e203      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d007      	beq.n	800425e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800426c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2222      	movs	r2, #34	@ 0x22
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2210      	movs	r2, #16
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	893a      	ldrh	r2, [r7, #8]
 800428e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a5c      	ldr	r2, [pc, #368]	@ (8004410 <HAL_I2C_Master_Receive+0x228>)
 800429e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fa52 	bl	8004750 <I2C_MasterRequestRead>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c4      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e198      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d11b      	bne.n	8004326 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e178      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432a:	2b02      	cmp	r3, #2
 800432c:	d11b      	bne.n	8004366 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800434c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	e158      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800438c:	e144      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b03      	cmp	r3, #3
 8004394:	f200 80f1 	bhi.w	800457a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439c:	2b01      	cmp	r3, #1
 800439e:	d123      	bne.n	80043e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fc4b 	bl	8004c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e145      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043e6:	e117      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d14e      	bne.n	800448e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	4906      	ldr	r1, [pc, #24]	@ (8004414 <HAL_I2C_Master_Receive+0x22c>)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa76 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e11a      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
 800440a:	bf00      	nop
 800440c:	00100002 	.word	0x00100002
 8004410:	ffff0000 	.word	0xffff0000
 8004414:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800448c:	e0c4      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	2200      	movs	r2, #0
 8004496:	496c      	ldr	r1, [pc, #432]	@ (8004648 <HAL_I2C_Master_Receive+0x460>)
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa27 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0cb      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	2200      	movs	r2, #0
 80044f2:	4955      	ldr	r1, [pc, #340]	@ (8004648 <HAL_I2C_Master_Receive+0x460>)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f9f9 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e09d      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004578:	e04e      	b.n	8004618 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb5e 	bl	8004c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e058      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d124      	bne.n	8004618 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d107      	bne.n	80045e6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f aeb6 	bne.w	800438e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3728      	adds	r7, #40	@ 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	00010004 	.word	0x00010004

0800464c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	460b      	mov	r3, r1
 800465a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d006      	beq.n	8004676 <I2C_MasterRequestWrite+0x2a>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d003      	beq.n	8004676 <I2C_MasterRequestWrite+0x2a>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004674:	d108      	bne.n	8004688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00b      	b.n	80046a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	2b12      	cmp	r3, #18
 800468e:	d107      	bne.n	80046a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800469e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f91d 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c6:	d103      	bne.n	80046d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e035      	b.n	8004740 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046dc:	d108      	bne.n	80046f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046ec:	611a      	str	r2, [r3, #16]
 80046ee:	e01b      	b.n	8004728 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046f0:	897b      	ldrh	r3, [r7, #10]
 80046f2:	11db      	asrs	r3, r3, #7
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0306 	and.w	r3, r3, #6
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f063 030f 	orn	r3, r3, #15
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	490e      	ldr	r1, [pc, #56]	@ (8004748 <I2C_MasterRequestWrite+0xfc>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f966 	bl	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e010      	b.n	8004740 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800471e:	897b      	ldrh	r3, [r7, #10]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4907      	ldr	r1, [pc, #28]	@ (800474c <I2C_MasterRequestWrite+0x100>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f956 	bl	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	00010008 	.word	0x00010008
 800474c:	00010002 	.word	0x00010002

08004750 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	460b      	mov	r3, r1
 800475e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004774:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d006      	beq.n	800478a <I2C_MasterRequestRead+0x3a>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d003      	beq.n	800478a <I2C_MasterRequestRead+0x3a>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004788:	d108      	bne.n	800479c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e00b      	b.n	80047b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	2b11      	cmp	r3, #17
 80047a2:	d107      	bne.n	80047b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f893 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047da:	d103      	bne.n	80047e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e079      	b.n	80048dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f0:	d108      	bne.n	8004804 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	e05f      	b.n	80048c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	11db      	asrs	r3, r3, #7
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 0306 	and.w	r3, r3, #6
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f063 030f 	orn	r3, r3, #15
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4930      	ldr	r1, [pc, #192]	@ (80048e4 <I2C_MasterRequestRead+0x194>)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8dc 	bl	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e054      	b.n	80048dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4929      	ldr	r1, [pc, #164]	@ (80048e8 <I2C_MasterRequestRead+0x198>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8cc 	bl	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e044      	b.n	80048dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004876:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f831 	bl	80048ec <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489e:	d103      	bne.n	80048a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e017      	b.n	80048dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048ac:	897b      	ldrh	r3, [r7, #10]
 80048ae:	11db      	asrs	r3, r3, #7
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 0306 	and.w	r3, r3, #6
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f063 030e 	orn	r3, r3, #14
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4907      	ldr	r1, [pc, #28]	@ (80048e8 <I2C_MasterRequestRead+0x198>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f888 	bl	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00010008 	.word	0x00010008
 80048e8:	00010002 	.word	0x00010002

080048ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fc:	e048      	b.n	8004990 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004904:	d044      	beq.n	8004990 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fc ff61 	bl	80017cc <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d139      	bne.n	8004990 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10d      	bne.n	8004942 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	e00c      	b.n	800495c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	43da      	mvns	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	429a      	cmp	r2, r3
 8004960:	d116      	bne.n	8004990 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	f043 0220 	orr.w	r2, r3, #32
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e023      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	0c1b      	lsrs	r3, r3, #16
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d10d      	bne.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	43da      	mvns	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	e00c      	b.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	43da      	mvns	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4013      	ands	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d093      	beq.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ee:	e071      	b.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fe:	d123      	bne.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e067      	b.n	8004b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a4e:	d041      	beq.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fc febc 	bl	80017cc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d136      	bne.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10c      	bne.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	43da      	mvns	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e00b      	b.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	43da      	mvns	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e021      	b.n	8004b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10c      	bne.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e00b      	b.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f af6d 	bne.w	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2c:	e034      	b.n	8004b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f8e3 	bl	8004cfa <I2C_IsAcknowledgeFailed>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e034      	b.n	8004ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b44:	d028      	beq.n	8004b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fc fe41 	bl	80017cc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11d      	bne.n	8004b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d016      	beq.n	8004b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e007      	b.n	8004ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba2:	2b80      	cmp	r3, #128	@ 0x80
 8004ba4:	d1c3      	bne.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbc:	e034      	b.n	8004c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f89b 	bl	8004cfa <I2C_IsAcknowledgeFailed>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e034      	b.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bd4:	d028      	beq.n	8004c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fc fdf9 	bl	80017cc <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11d      	bne.n	8004c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d016      	beq.n	8004c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e007      	b.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d1c3      	bne.n	8004bbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c4c:	e049      	b.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d119      	bne.n	8004c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0210 	mvn.w	r2, #16
 8004c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e030      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fc fd9c 	bl	80017cc <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11d      	bne.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d016      	beq.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e007      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d1ae      	bne.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d10:	d11b      	bne.n	8004d4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e108      	b.n	8004f7c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc fbb5 	bl	80014f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d98:	d102      	bne.n	8004da0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 fd41 	bl	800782c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7c1a      	ldrb	r2, [r3, #16]
 8004db2:	f88d 2000 	strb.w	r2, [sp]
 8004db6:	3304      	adds	r3, #4
 8004db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dba:	f002 fcd3 	bl	8007764 <USB_CoreInit>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0d5      	b.n	8004f7c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fd39 	bl	800784e <USB_SetCurrentMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0c6      	b.n	8004f7c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e04a      	b.n	8004e8a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	3315      	adds	r3, #21
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	3314      	adds	r3, #20
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	b298      	uxth	r0, r3
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	332e      	adds	r3, #46	@ 0x2e
 8004e30:	4602      	mov	r2, r0
 8004e32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	3318      	adds	r3, #24
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	331c      	adds	r3, #28
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3320      	adds	r3, #32
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3324      	adds	r3, #36	@ 0x24
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	3301      	adds	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3af      	bcc.n	8004df4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	e044      	b.n	8004f24 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e9a:	7bfa      	ldrb	r2, [r7, #15]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ec2:	7bfa      	ldrb	r2, [r7, #15]
 8004ec4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	3301      	adds	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	791b      	ldrb	r3, [r3, #4]
 8004f28:	7bfa      	ldrb	r2, [r7, #15]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3b5      	bcc.n	8004e9a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7c1a      	ldrb	r2, [r3, #16]
 8004f36:	f88d 2000 	strb.w	r2, [sp]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f3e:	f002 fcd3 	bl	80078e8 <USB_DevInit>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e013      	b.n	8004f7c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7b1b      	ldrb	r3, [r3, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f80a 	bl	8004f84 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f002 fe8e 	bl	8007c96 <USB_DevDisconnect>

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	f043 0303 	orr.w	r3, r3, #3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0cc      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b68      	ldr	r3, [pc, #416]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d90c      	bls.n	8005008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b65      	ldr	r3, [pc, #404]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b63      	ldr	r3, [pc, #396]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b8      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005020:	4b59      	ldr	r3, [pc, #356]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a58      	ldr	r2, [pc, #352]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800502a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005038:	4b53      	ldr	r3, [pc, #332]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a52      	ldr	r2, [pc, #328]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005044:	4b50      	ldr	r3, [pc, #320]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	494d      	ldr	r1, [pc, #308]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d044      	beq.n	80050ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b47      	ldr	r3, [pc, #284]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d119      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d003      	beq.n	800508a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005086:	2b03      	cmp	r3, #3
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b3b      	ldr	r3, [pc, #236]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e067      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b37      	ldr	r3, [pc, #220]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4934      	ldr	r1, [pc, #208]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050bc:	f7fc fb86 	bl	80017cc <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fc fb82 	bl	80017cc <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e04f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b2b      	ldr	r3, [pc, #172]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b25      	ldr	r3, [pc, #148]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d20c      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b22      	ldr	r3, [pc, #136]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b20      	ldr	r3, [pc, #128]	@ (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e032      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4916      	ldr	r1, [pc, #88]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513e:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	490e      	ldr	r1, [pc, #56]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005152:	f000 fb7f 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	490a      	ldr	r1, [pc, #40]	@ (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	5ccb      	ldrb	r3, [r1, r3]
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	4a09      	ldr	r2, [pc, #36]	@ (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <HAL_RCC_ClockConfig+0x1c8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fc fae6 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00
 8005188:	40023800 	.word	0x40023800
 800518c:	08008920 	.word	0x08008920
 8005190:	20000000 	.word	0x20000000
 8005194:	20000004 	.word	0x20000004

08005198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800519c:	4b03      	ldr	r3, [pc, #12]	@ (80051ac <HAL_RCC_GetHCLKFreq+0x14>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000000 	.word	0x20000000

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff0 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	@ (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08008930 	.word	0x08008930

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051dc:	f7ff ffdc 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0b5b      	lsrs	r3, r3, #13
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	@ (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	08008930 	.word	0x08008930

08005200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005238:	4b6f      	ldr	r3, [pc, #444]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800523e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	496c      	ldr	r1, [pc, #432]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005256:	2301      	movs	r3, #1
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005266:	4b64      	ldr	r3, [pc, #400]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800526c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	4960      	ldr	r1, [pc, #384]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005284:	2301      	movs	r3, #1
 8005286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005294:	4b58      	ldr	r3, [pc, #352]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800529a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	4955      	ldr	r1, [pc, #340]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052b2:	d101      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052d0:	4b49      	ldr	r3, [pc, #292]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052de:	4946      	ldr	r1, [pc, #280]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ee:	d101      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80052f0:	2301      	movs	r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80052fc:	2301      	movs	r3, #1
 80052fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 808a 	beq.w	8005422 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	4a38      	ldr	r2, [pc, #224]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531c:	6413      	str	r3, [r2, #64]	@ 0x40
 800531e:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800532a:	4b34      	ldr	r3, [pc, #208]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a33      	ldr	r2, [pc, #204]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005334:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005336:	f7fc fa49 	bl	80017cc <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533e:	f7fc fa45 	bl	80017cc <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e278      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005350:	4b2a      	ldr	r3, [pc, #168]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005364:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02f      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	429a      	cmp	r2, r3
 8005378:	d028      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537a:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005382:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005384:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538a:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005390:	4a19      	ldr	r2, [pc, #100]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005396:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d114      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fc fa13 	bl	80017cc <HAL_GetTick>
 80053a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fc fa0f 	bl	80017cc <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e240      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c0:	4b0d      	ldr	r3, [pc, #52]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ee      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d114      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ee:	4902      	ldr	r1, [pc, #8]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]
 80053f4:	e00c      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	42470e40 	.word	0x42470e40
 8005404:	4b4a      	ldr	r3, [pc, #296]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a49      	ldr	r2, [pc, #292]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800540a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005412:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541c:	4944      	ldr	r1, [pc, #272]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800541e:	4313      	orrs	r3, r2
 8005420:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005434:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005436:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005444:	4b3a      	ldr	r3, [pc, #232]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800544a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005452:	4937      	ldr	r1, [pc, #220]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005466:	4b32      	ldr	r3, [pc, #200]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	492e      	ldr	r1, [pc, #184]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d011      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005488:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	4926      	ldr	r1, [pc, #152]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a6:	d101      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80054a8:	2301      	movs	r3, #1
 80054aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	491a      	ldr	r1, [pc, #104]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80054da:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	4911      	ldr	r1, [pc, #68]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f8:	d101      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80054fa:	2301      	movs	r3, #1
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d005      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800550c:	f040 80ff 	bne.w	800570e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005510:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005516:	f7fc f959 	bl	80017cc <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551c:	e00e      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800551e:	f7fc f955 	bl	80017cc <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d907      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e188      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005530:	40023800 	.word	0x40023800
 8005534:	424711e0 	.word	0x424711e0
 8005538:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800553c:	4b7e      	ldr	r3, [pc, #504]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ea      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005564:	2b00      	cmp	r3, #0
 8005566:	d028      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d124      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005570:	4b71      	ldr	r3, [pc, #452]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	3301      	adds	r3, #1
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005582:	4b6d      	ldr	r3, [pc, #436]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005588:	0e1b      	lsrs	r3, r3, #24
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	431a      	orrs	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	431a      	orrs	r2, r3
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	071b      	lsls	r3, r3, #28
 80055b2:	4961      	ldr	r1, [pc, #388]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d035      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055e4:	d130      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80055e6:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	3301      	adds	r3, #1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055fe:	0f1b      	lsrs	r3, r3, #28
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	019b      	lsls	r3, r3, #6
 8005610:	431a      	orrs	r2, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	3b01      	subs	r3, #1
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	061b      	lsls	r3, r3, #24
 8005622:	431a      	orrs	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	071b      	lsls	r3, r3, #28
 8005628:	4943      	ldr	r1, [pc, #268]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005630:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005636:	f023 021f 	bic.w	r2, r3, #31
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	493d      	ldr	r1, [pc, #244]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005650:	2b00      	cmp	r3, #0
 8005652:	d029      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800565c:	d124      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800565e:	4b36      	ldr	r3, [pc, #216]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005670:	4b31      	ldr	r3, [pc, #196]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005676:	0f1b      	lsrs	r3, r3, #28
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	019b      	lsls	r3, r3, #6
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	431a      	orrs	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	071b      	lsls	r3, r3, #28
 80056a0:	4925      	ldr	r1, [pc, #148]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d016      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	4917      	ldr	r1, [pc, #92]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e2:	4b16      	ldr	r3, [pc, #88]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056e8:	f7fc f870 	bl	80017cc <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056f0:	f7fc f86c 	bl	80017cc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e09f      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	2b01      	cmp	r3, #1
 8005712:	f040 8095 	bne.w	8005840 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571c:	f7fc f856 	bl	80017cc <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005722:	e00f      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005724:	f7fc f852 	bl	80017cc <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d908      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e085      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	42470068 	.word	0x42470068
 8005740:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005744:	4b41      	ldr	r3, [pc, #260]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800574c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005750:	d0e8      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02b      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	d127      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800577a:	4b34      	ldr	r3, [pc, #208]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	3301      	adds	r3, #1
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	431a      	orrs	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	4928      	ldr	r1, [pc, #160]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057b0:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	3b01      	subs	r3, #1
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	4922      	ldr	r1, [pc, #136]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01d      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d118      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057e0:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	0e1b      	lsrs	r3, r3, #24
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	4910      	ldr	r1, [pc, #64]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005812:	4b0f      	ldr	r3, [pc, #60]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005818:	f7fb ffd8 	bl	80017cc <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005820:	f7fb ffd4 	bl	80017cc <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e007      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800583a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583e:	d1ef      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3730      	adds	r7, #48	@ 0x30
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	42470070 	.word	0x42470070

08005854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005858:	b0ae      	sub	sp, #184	@ 0xb8
 800585a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587a:	4bcb      	ldr	r3, [pc, #812]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b0c      	cmp	r3, #12
 8005884:	f200 8206 	bhi.w	8005c94 <HAL_RCC_GetSysClockFreq+0x440>
 8005888:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <HAL_RCC_GetSysClockFreq+0x3c>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058c5 	.word	0x080058c5
 8005894:	08005c95 	.word	0x08005c95
 8005898:	08005c95 	.word	0x08005c95
 800589c:	08005c95 	.word	0x08005c95
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	08005c95 	.word	0x08005c95
 80058a8:	08005c95 	.word	0x08005c95
 80058ac:	08005c95 	.word	0x08005c95
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	08005c95 	.word	0x08005c95
 80058b8:	08005c95 	.word	0x08005c95
 80058bc:	08005c95 	.word	0x08005c95
 80058c0:	08005ac5 	.word	0x08005ac5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058c4:	4bb9      	ldr	r3, [pc, #740]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x358>)
 80058c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058ca:	e1e7      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058cc:	4bb8      	ldr	r3, [pc, #736]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058d2:	e1e3      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058d4:	4bb4      	ldr	r3, [pc, #720]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058e0:	4bb1      	ldr	r3, [pc, #708]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d071      	beq.n	80059d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ec:	4bae      	ldr	r3, [pc, #696]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80058fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800590e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	0159      	lsls	r1, r3, #5
 8005920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005924:	0150      	lsls	r0, r2, #5
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4621      	mov	r1, r4
 800592c:	1a51      	subs	r1, r2, r1
 800592e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005930:	4629      	mov	r1, r5
 8005932:	eb63 0301 	sbc.w	r3, r3, r1
 8005936:	647b      	str	r3, [r7, #68]	@ 0x44
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005944:	4649      	mov	r1, r9
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	4641      	mov	r1, r8
 800594a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800594e:	4641      	mov	r1, r8
 8005950:	018a      	lsls	r2, r1, #6
 8005952:	4641      	mov	r1, r8
 8005954:	1a51      	subs	r1, r2, r1
 8005956:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005958:	4649      	mov	r1, r9
 800595a:	eb63 0301 	sbc.w	r3, r3, r1
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800596c:	4649      	mov	r1, r9
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4641      	mov	r1, r8
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4641      	mov	r1, r8
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4622      	mov	r2, r4
 8005982:	189b      	adds	r3, r3, r2
 8005984:	633b      	str	r3, [r7, #48]	@ 0x30
 8005986:	462b      	mov	r3, r5
 8005988:	460a      	mov	r2, r1
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800599c:	4629      	mov	r1, r5
 800599e:	024b      	lsls	r3, r1, #9
 80059a0:	4621      	mov	r1, r4
 80059a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a6:	4621      	mov	r1, r4
 80059a8:	024a      	lsls	r2, r1, #9
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80059c0:	f7fa fc7e 	bl	80002c0 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4613      	mov	r3, r2
 80059ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059ce:	e067      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d0:	4b75      	ldr	r3, [pc, #468]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80059e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ea:	2300      	movs	r3, #0
 80059ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80059f2:	4622      	mov	r2, r4
 80059f4:	462b      	mov	r3, r5
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a04:	0150      	lsls	r0, r2, #5
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	1a51      	subs	r1, r2, r1
 8005a0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a10:	4629      	mov	r1, r5
 8005a12:	eb63 0301 	sbc.w	r3, r3, r1
 8005a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005a24:	4649      	mov	r1, r9
 8005a26:	018b      	lsls	r3, r1, #6
 8005a28:	4641      	mov	r1, r8
 8005a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a2e:	4641      	mov	r1, r8
 8005a30:	018a      	lsls	r2, r1, #6
 8005a32:	4641      	mov	r1, r8
 8005a34:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a38:	4649      	mov	r1, r9
 8005a3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a52:	4692      	mov	sl, r2
 8005a54:	469b      	mov	fp, r3
 8005a56:	4623      	mov	r3, r4
 8005a58:	eb1a 0303 	adds.w	r3, sl, r3
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	462b      	mov	r3, r5
 8005a60:	eb4b 0303 	adc.w	r3, fp, r3
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005a72:	4629      	mov	r1, r5
 8005a74:	028b      	lsls	r3, r1, #10
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	028a      	lsls	r2, r1, #10
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a88:	2200      	movs	r2, #0
 8005a8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005a92:	f7fa fc15 	bl	80002c0 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005aa0:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	3301      	adds	r3, #1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ac2:	e0eb      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac4:	4b38      	ldr	r3, [pc, #224]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad0:	4b35      	ldr	r3, [pc, #212]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d06b      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005adc:	4b32      	ldr	r3, [pc, #200]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8005af0:	2300      	movs	r3, #0
 8005af2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005af4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	f04f 0000 	mov.w	r0, #0
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	0159      	lsls	r1, r3, #5
 8005b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b0a:	0150      	lsls	r0, r2, #5
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4621      	mov	r1, r4
 8005b12:	1a51      	subs	r1, r2, r1
 8005b14:	61b9      	str	r1, [r7, #24]
 8005b16:	4629      	mov	r1, r5
 8005b18:	eb63 0301 	sbc.w	r3, r3, r1
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	018b      	lsls	r3, r1, #6
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b34:	4651      	mov	r1, sl
 8005b36:	018a      	lsls	r2, r1, #6
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ebb2 0801 	subs.w	r8, r2, r1
 8005b3e:	4659      	mov	r1, fp
 8005b40:	eb63 0901 	sbc.w	r9, r3, r1
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b58:	4690      	mov	r8, r2
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	eb18 0303 	adds.w	r3, r8, r3
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	462b      	mov	r3, r5
 8005b66:	eb49 0303 	adc.w	r3, r9, r3
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005b78:	4629      	mov	r1, r5
 8005b7a:	024b      	lsls	r3, r1, #9
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b82:	4621      	mov	r1, r4
 8005b84:	024a      	lsls	r2, r1, #9
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b8e:	2200      	movs	r2, #0
 8005b90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005b94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b98:	f7fa fb92 	bl	80002c0 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ba6:	e065      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x420>
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x458>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005bce:	4642      	mov	r2, r8
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	0159      	lsls	r1, r3, #5
 8005bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005be0:	0150      	lsls	r0, r2, #5
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4641      	mov	r1, r8
 8005be8:	1a51      	subs	r1, r2, r1
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	4649      	mov	r1, r9
 8005bee:	eb63 0301 	sbc.w	r3, r3, r1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c00:	4659      	mov	r1, fp
 8005c02:	018b      	lsls	r3, r1, #6
 8005c04:	4651      	mov	r1, sl
 8005c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c0a:	4651      	mov	r1, sl
 8005c0c:	018a      	lsls	r2, r1, #6
 8005c0e:	4651      	mov	r1, sl
 8005c10:	1a54      	subs	r4, r2, r1
 8005c12:	4659      	mov	r1, fp
 8005c14:	eb63 0501 	sbc.w	r5, r3, r1
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	00eb      	lsls	r3, r5, #3
 8005c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c26:	00e2      	lsls	r2, r4, #3
 8005c28:	4614      	mov	r4, r2
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	18e3      	adds	r3, r4, r3
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	464b      	mov	r3, r9
 8005c34:	eb45 0303 	adc.w	r3, r5, r3
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c46:	4629      	mov	r1, r5
 8005c48:	028b      	lsls	r3, r1, #10
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c50:	4621      	mov	r1, r4
 8005c52:	028a      	lsls	r2, r1, #10
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c66:	f7fa fb2b 	bl	80002c0 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4613      	mov	r3, r2
 8005c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c74:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x458>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	0f1b      	lsrs	r3, r3, #28
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	37b8      	adds	r7, #184	@ 0xb8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00f42400 	.word	0x00f42400

08005cb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e28d      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8083 	beq.w	8005dda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005cd4:	4b94      	ldr	r3, [pc, #592]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 030c 	and.w	r3, r3, #12
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d019      	beq.n	8005d14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005ce0:	4b91      	ldr	r3, [pc, #580]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d106      	bne.n	8005cfa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005cec:	4b8e      	ldr	r3, [pc, #568]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf8:	d00c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d02:	2b0c      	cmp	r3, #12
 8005d04:	d112      	bne.n	8005d2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d06:	4b88      	ldr	r3, [pc, #544]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	4b84      	ldr	r3, [pc, #528]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05b      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x124>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d157      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e25a      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d34:	d106      	bne.n	8005d44 <HAL_RCC_OscConfig+0x90>
 8005d36:	4b7c      	ldr	r3, [pc, #496]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e01d      	b.n	8005d80 <HAL_RCC_OscConfig+0xcc>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0xb4>
 8005d4e:	4b76      	ldr	r3, [pc, #472]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a75      	ldr	r2, [pc, #468]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b73      	ldr	r3, [pc, #460]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a72      	ldr	r2, [pc, #456]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0xcc>
 8005d68:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b6c      	ldr	r3, [pc, #432]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6b      	ldr	r2, [pc, #428]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fb fd20 	bl	80017cc <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fb fd1c 	bl	80017cc <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	@ 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e21f      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	4b61      	ldr	r3, [pc, #388]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xdc>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fb fd0c 	bl	80017cc <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fb fd08 	bl	80017cc <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	@ 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e20b      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dca:	4b57      	ldr	r3, [pc, #348]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x104>
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d06f      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005de6:	4b50      	ldr	r3, [pc, #320]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d017      	beq.n	8005e22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005df2:	4b4d      	ldr	r3, [pc, #308]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
        || \
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d105      	bne.n	8005e0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0a:	4b47      	ldr	r3, [pc, #284]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d11c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e16:	4b44      	ldr	r3, [pc, #272]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d116      	bne.n	8005e50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e22:	4b41      	ldr	r3, [pc, #260]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_RCC_OscConfig+0x186>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d001      	beq.n	8005e3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e1d3      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4937      	ldr	r1, [pc, #220]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4e:	e03a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e58:	4b34      	ldr	r3, [pc, #208]	@ (8005f2c <HAL_RCC_OscConfig+0x278>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb fcb5 	bl	80017cc <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e66:	f7fb fcb1 	bl	80017cc <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e1b4      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e78:	4b2b      	ldr	r3, [pc, #172]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e84:	4b28      	ldr	r3, [pc, #160]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4925      	ldr	r1, [pc, #148]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]
 8005e98:	e015      	b.n	8005ec6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9a:	4b24      	ldr	r3, [pc, #144]	@ (8005f2c <HAL_RCC_OscConfig+0x278>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fc94 	bl	80017cc <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fb fc90 	bl	80017cc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e193      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eba:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d036      	beq.n	8005f40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eda:	4b15      	ldr	r3, [pc, #84]	@ (8005f30 <HAL_RCC_OscConfig+0x27c>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fb fc74 	bl	80017cc <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee8:	f7fb fc70 	bl	80017cc <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e173      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efa:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <HAL_RCC_OscConfig+0x274>)
 8005efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x234>
 8005f06:	e01b      	b.n	8005f40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f08:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <HAL_RCC_OscConfig+0x27c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0e:	f7fb fc5d 	bl	80017cc <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f14:	e00e      	b.n	8005f34 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f16:	f7fb fc59 	bl	80017cc <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d907      	bls.n	8005f34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e15c      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	42470000 	.word	0x42470000
 8005f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	4b8a      	ldr	r3, [pc, #552]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ea      	bne.n	8005f16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8097 	beq.w	800607c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f52:	4b83      	ldr	r3, [pc, #524]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	4a7e      	ldr	r2, [pc, #504]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7e:	4b79      	ldr	r3, [pc, #484]	@ (8006164 <HAL_RCC_OscConfig+0x4b0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d118      	bne.n	8005fbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f8a:	4b76      	ldr	r3, [pc, #472]	@ (8006164 <HAL_RCC_OscConfig+0x4b0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a75      	ldr	r2, [pc, #468]	@ (8006164 <HAL_RCC_OscConfig+0x4b0>)
 8005f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f96:	f7fb fc19 	bl	80017cc <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9e:	f7fb fc15 	bl	80017cc <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e118      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8006164 <HAL_RCC_OscConfig+0x4b0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d106      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x31e>
 8005fc4:	4b66      	ldr	r3, [pc, #408]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc8:	4a65      	ldr	r2, [pc, #404]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd0:	e01c      	b.n	800600c <HAL_RCC_OscConfig+0x358>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x340>
 8005fda:	4b61      	ldr	r3, [pc, #388]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fde:	4a60      	ldr	r2, [pc, #384]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fe0:	f043 0304 	orr.w	r3, r3, #4
 8005fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fea:	4a5d      	ldr	r2, [pc, #372]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0x358>
 8005ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	4a59      	ldr	r2, [pc, #356]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006000:	4b57      	ldr	r3, [pc, #348]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006004:	4a56      	ldr	r2, [pc, #344]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006006:	f023 0304 	bic.w	r3, r3, #4
 800600a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d015      	beq.n	8006040 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fb fbda 	bl	80017cc <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601a:	e00a      	b.n	8006032 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601c:	f7fb fbd6 	bl	80017cc <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e0d7      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006032:	4b4b      	ldr	r3, [pc, #300]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ee      	beq.n	800601c <HAL_RCC_OscConfig+0x368>
 800603e:	e014      	b.n	800606a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fb fbc4 	bl	80017cc <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006046:	e00a      	b.n	800605e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006048:	f7fb fbc0 	bl	80017cc <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e0c1      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605e:	4b40      	ldr	r3, [pc, #256]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ee      	bne.n	8006048 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d105      	bne.n	800607c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006070:	4b3b      	ldr	r3, [pc, #236]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	4a3a      	ldr	r2, [pc, #232]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800607a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80ad 	beq.w	80061e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006086:	4b36      	ldr	r3, [pc, #216]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b08      	cmp	r3, #8
 8006090:	d060      	beq.n	8006154 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d145      	bne.n	8006126 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b33      	ldr	r3, [pc, #204]	@ (8006168 <HAL_RCC_OscConfig+0x4b4>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fb fb94 	bl	80017cc <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fb fb90 	bl	80017cc <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e093      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	4b29      	ldr	r3, [pc, #164]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	019b      	lsls	r3, r3, #6
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	3b01      	subs	r3, #1
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	061b      	lsls	r3, r3, #24
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	071b      	lsls	r3, r3, #28
 80060f2:	491b      	ldr	r1, [pc, #108]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <HAL_RCC_OscConfig+0x4b4>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fb fb65 	bl	80017cc <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006106:	f7fb fb61 	bl	80017cc <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e064      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006118:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x452>
 8006124:	e05c      	b.n	80061e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <HAL_RCC_OscConfig+0x4b4>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fb fb4e 	bl	80017cc <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fb fb4a 	bl	80017cc <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e04d      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x480>
 8006152:	e045      	b.n	80061e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e040      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
 8006160:	40023800 	.word	0x40023800
 8006164:	40007000 	.word	0x40007000
 8006168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616c:	4b1f      	ldr	r3, [pc, #124]	@ (80061ec <HAL_RCC_OscConfig+0x538>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d030      	beq.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d129      	bne.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d122      	bne.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d119      	bne.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	3b01      	subs	r3, #1
 80061b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d10f      	bne.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800

080061f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e041      	b.n	8006286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb f8c2 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fb28 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e041      	b.n	8006324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fb f851 	bl	800135c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 fad9 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_TIM_PWM_Start+0x24>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e022      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d109      	bne.n	800636a <HAL_TIM_PWM_Start+0x3e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	e015      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d109      	bne.n	8006384 <HAL_TIM_PWM_Start+0x58>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e008      	b.n	8006396 <HAL_TIM_PWM_Start+0x6a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e07c      	b.n	8006498 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start+0x82>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start+0x92>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_PWM_Start+0xaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fcac 	bl	8006d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <HAL_TIM_PWM_Start+0x174>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_PWM_Start+0xcc>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2c      	ldr	r2, [pc, #176]	@ (80064a4 <HAL_TIM_PWM_Start+0x178>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d101      	bne.n	80063fc <HAL_TIM_PWM_Start+0xd0>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_TIM_PWM_Start+0xd2>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a22      	ldr	r2, [pc, #136]	@ (80064a0 <HAL_TIM_PWM_Start+0x174>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d022      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006424:	d01d      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_TIM_PWM_Start+0x17c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d018      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <HAL_TIM_PWM_Start+0x180>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_TIM_PWM_Start+0x184>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a16      	ldr	r2, [pc, #88]	@ (80064a4 <HAL_TIM_PWM_Start+0x178>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <HAL_TIM_PWM_Start+0x188>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_TIM_PWM_Start+0x136>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <HAL_TIM_PWM_Start+0x18c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d111      	bne.n	8006486 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d010      	beq.n	8006496 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	e007      	b.n	8006496 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40001800 	.word	0x40001800

080064bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d020      	beq.n	8006520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0202 	mvn.w	r2, #2
 80064f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f99e 	bl	8006848 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f990 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9a1 	bl	800685c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0204 	mvn.w	r2, #4
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f978 	bl	8006848 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f96a 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f97b 	bl	800685c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d020      	beq.n	80065b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01b      	beq.n	80065b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0208 	mvn.w	r2, #8
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f952 	bl	8006848 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f944 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f955 	bl	800685c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d020      	beq.n	8006604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0210 	mvn.w	r2, #16
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2208      	movs	r2, #8
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f92c 	bl	8006848 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f91e 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f92f 	bl	800685c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0201 	mvn.w	r2, #1
 8006620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8fc 	bl	8006820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fc76 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f900 	bl	8006870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0220 	mvn.w	r2, #32
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc48 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0ae      	b.n	8006818 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	f200 809f 	bhi.w	8006808 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006705 	.word	0x08006705
 80066d4:	08006809 	.word	0x08006809
 80066d8:	08006809 	.word	0x08006809
 80066dc:	08006809 	.word	0x08006809
 80066e0:	08006745 	.word	0x08006745
 80066e4:	08006809 	.word	0x08006809
 80066e8:	08006809 	.word	0x08006809
 80066ec:	08006809 	.word	0x08006809
 80066f0:	08006787 	.word	0x08006787
 80066f4:	08006809 	.word	0x08006809
 80066f8:	08006809 	.word	0x08006809
 80066fc:	08006809 	.word	0x08006809
 8006700:	080067c7 	.word	0x080067c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f966 	bl	80069dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0208 	orr.w	r2, r2, #8
 800671e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0204 	bic.w	r2, r2, #4
 800672e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6999      	ldr	r1, [r3, #24]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	619a      	str	r2, [r3, #24]
      break;
 8006742:	e064      	b.n	800680e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f9b6 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	021a      	lsls	r2, r3, #8
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	619a      	str	r2, [r3, #24]
      break;
 8006784:	e043      	b.n	800680e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fa0b 	bl	8006ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0208 	orr.w	r2, r2, #8
 80067a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0204 	bic.w	r2, r2, #4
 80067b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69d9      	ldr	r1, [r3, #28]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
      break;
 80067c4:	e023      	b.n	800680e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fa5f 	bl	8006c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	021a      	lsls	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	61da      	str	r2, [r3, #28]
      break;
 8006806:	e002      	b.n	800680e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
      break;
 800680c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a46      	ldr	r2, [pc, #280]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a43      	ldr	r2, [pc, #268]	@ (80069b4 <TIM_Base_SetConfig+0x130>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a42      	ldr	r2, [pc, #264]	@ (80069b8 <TIM_Base_SetConfig+0x134>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a41      	ldr	r2, [pc, #260]	@ (80069bc <TIM_Base_SetConfig+0x138>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a40      	ldr	r2, [pc, #256]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d02b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e4:	d027      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a32      	ldr	r2, [pc, #200]	@ (80069b4 <TIM_Base_SetConfig+0x130>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d023      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a31      	ldr	r2, [pc, #196]	@ (80069b8 <TIM_Base_SetConfig+0x134>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a30      	ldr	r2, [pc, #192]	@ (80069bc <TIM_Base_SetConfig+0x138>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2f      	ldr	r2, [pc, #188]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d017      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2e      	ldr	r2, [pc, #184]	@ (80069c4 <TIM_Base_SetConfig+0x140>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2d      	ldr	r2, [pc, #180]	@ (80069c8 <TIM_Base_SetConfig+0x144>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <TIM_Base_SetConfig+0x148>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2b      	ldr	r2, [pc, #172]	@ (80069d0 <TIM_Base_SetConfig+0x14c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2a      	ldr	r2, [pc, #168]	@ (80069d4 <TIM_Base_SetConfig+0x150>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a29      	ldr	r2, [pc, #164]	@ (80069d8 <TIM_Base_SetConfig+0x154>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d108      	bne.n	8006948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800693c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a10      	ldr	r2, [pc, #64]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_Base_SetConfig+0xf8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a12      	ldr	r2, [pc, #72]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d103      	bne.n	8006984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d105      	bne.n	80069a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	611a      	str	r2, [r3, #16]
  }
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	f023 0201 	bic.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 0302 	bic.w	r3, r3, #2
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a20      	ldr	r2, [pc, #128]	@ (8006ab4 <TIM_OC1_SetConfig+0xd8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC1_SetConfig+0x64>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <TIM_OC1_SetConfig+0xdc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0308 	bic.w	r3, r3, #8
 8006a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0304 	bic.w	r3, r3, #4
 8006a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <TIM_OC1_SetConfig+0xd8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_OC1_SetConfig+0x8e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a14      	ldr	r2, [pc, #80]	@ (8006ab8 <TIM_OC1_SetConfig+0xdc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d111      	bne.n	8006a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	621a      	str	r2, [r3, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 0210 	bic.w	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0320 	bic.w	r3, r3, #32
 8006b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a22      	ldr	r2, [pc, #136]	@ (8006ba0 <TIM_OC2_SetConfig+0xe4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC2_SetConfig+0x68>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	@ (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10d      	bne.n	8006b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a17      	ldr	r2, [pc, #92]	@ (8006ba0 <TIM_OC2_SetConfig+0xe4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC2_SetConfig+0x94>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d113      	bne.n	8006b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a21      	ldr	r2, [pc, #132]	@ (8006c88 <TIM_OC3_SetConfig+0xe0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC3_SetConfig+0x66>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a20      	ldr	r2, [pc, #128]	@ (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10d      	bne.n	8006c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a16      	ldr	r2, [pc, #88]	@ (8006c88 <TIM_OC3_SetConfig+0xe0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0x92>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a15      	ldr	r2, [pc, #84]	@ (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d113      	bne.n	8006c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010400 	.word	0x40010400

08006c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	@ (8006d34 <TIM_OC4_SetConfig+0xa4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC4_SetConfig+0x68>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a11      	ldr	r2, [pc, #68]	@ (8006d38 <TIM_OC4_SetConfig+0xa8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d109      	bne.n	8006d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	019b      	lsls	r3, r3, #6
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40010400 	.word	0x40010400

08006d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2201      	movs	r2, #1
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	401a      	ands	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1a      	ldr	r2, [r3, #32]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e05a      	b.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a21      	ldr	r2, [pc, #132]	@ (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d01d      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1a      	ldr	r2, [pc, #104]	@ (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a18      	ldr	r2, [pc, #96]	@ (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a15      	ldr	r2, [pc, #84]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10c      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40001800 	.word	0x40001800

08006e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e03d      	b.n	8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e042      	b.n	8006fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa fa76 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	@ 0x24
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f973 	bl	800727c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	@ 0x28
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b20      	cmp	r3, #32
 800700a:	d175      	bne.n	80070f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_UART_Transmit+0x2c>
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e06e      	b.n	80070fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2221      	movs	r2, #33	@ 0x21
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702a:	f7fa fbcf 	bl	80017cc <HAL_GetTick>
 800702e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d108      	bne.n	8007058 <HAL_UART_Transmit+0x6c>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	e003      	b.n	8007060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007060:	e02e      	b.n	80070c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2200      	movs	r2, #0
 800706a:	2180      	movs	r1, #128	@ 0x80
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f848 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e03a      	b.n	80070fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	3302      	adds	r3, #2
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e007      	b.n	80070b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	3301      	adds	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1cb      	bne.n	8007062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2200      	movs	r2, #0
 80070d2:	2140      	movs	r1, #64	@ 0x40
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f814 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007112:	e03b      	b.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711a:	d037      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7fa fb56 	bl	80017cc <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	6a3a      	ldr	r2, [r7, #32]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <UART_WaitOnFlagUntilTimeout+0x30>
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e03a      	b.n	80071ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d023      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b80      	cmp	r3, #128	@ 0x80
 8007148:	d020      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b40      	cmp	r3, #64	@ 0x40
 800714e:	d01d      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b08      	cmp	r3, #8
 800715c:	d116      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f81d 	bl	80071b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2208      	movs	r2, #8
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e00f      	b.n	80071ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4013      	ands	r3, r2
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d0b4      	beq.n	8007114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b095      	sub	sp, #84	@ 0x54
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e5      	bne.n	80071bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e5      	bne.n	80071f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	2b01      	cmp	r3, #1
 800722a:	d119      	bne.n	8007260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	60bb      	str	r3, [r7, #8]
   return(result);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f023 0310 	bic.w	r3, r3, #16
 8007242:	647b      	str	r3, [r7, #68]	@ 0x44
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800724c:	61ba      	str	r2, [r7, #24]
 800724e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6979      	ldr	r1, [r7, #20]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	613b      	str	r3, [r7, #16]
   return(result);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800726e:	bf00      	nop
 8007270:	3754      	adds	r7, #84	@ 0x54
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007280:	b0c0      	sub	sp, #256	@ 0x100
 8007282:	af00      	add	r7, sp, #0
 8007284:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	68d9      	ldr	r1, [r3, #12]
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	ea40 0301 	orr.w	r3, r0, r1
 80072a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072d4:	f021 010c 	bic.w	r1, r1, #12
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072e2:	430b      	orrs	r3, r1
 80072e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f6:	6999      	ldr	r1, [r3, #24]
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	ea40 0301 	orr.w	r3, r0, r1
 8007302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b8f      	ldr	r3, [pc, #572]	@ (8007548 <UART_SetConfig+0x2cc>)
 800730c:	429a      	cmp	r2, r3
 800730e:	d005      	beq.n	800731c <UART_SetConfig+0xa0>
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b8d      	ldr	r3, [pc, #564]	@ (800754c <UART_SetConfig+0x2d0>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d104      	bne.n	8007326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800731c:	f7fd ff5c 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 8007320:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007324:	e003      	b.n	800732e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007326:	f7fd ff43 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 800732a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007338:	f040 810c 	bne.w	8007554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800733c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007340:	2200      	movs	r2, #0
 8007342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007346:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800734a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	1891      	adds	r1, r2, r2
 8007354:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007356:	415b      	adcs	r3, r3
 8007358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800735a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800735e:	4621      	mov	r1, r4
 8007360:	eb12 0801 	adds.w	r8, r2, r1
 8007364:	4629      	mov	r1, r5
 8007366:	eb43 0901 	adc.w	r9, r3, r1
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	f04f 0300 	mov.w	r3, #0
 8007372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800737a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800737e:	4690      	mov	r8, r2
 8007380:	4699      	mov	r9, r3
 8007382:	4623      	mov	r3, r4
 8007384:	eb18 0303 	adds.w	r3, r8, r3
 8007388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800738c:	462b      	mov	r3, r5
 800738e:	eb49 0303 	adc.w	r3, r9, r3
 8007392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073aa:	460b      	mov	r3, r1
 80073ac:	18db      	adds	r3, r3, r3
 80073ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b0:	4613      	mov	r3, r2
 80073b2:	eb42 0303 	adc.w	r3, r2, r3
 80073b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073c0:	f7f8 ff7e 	bl	80002c0 <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4b61      	ldr	r3, [pc, #388]	@ (8007550 <UART_SetConfig+0x2d4>)
 80073ca:	fba3 2302 	umull	r2, r3, r3, r2
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	011c      	lsls	r4, r3, #4
 80073d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073e4:	4642      	mov	r2, r8
 80073e6:	464b      	mov	r3, r9
 80073e8:	1891      	adds	r1, r2, r2
 80073ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073ec:	415b      	adcs	r3, r3
 80073ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073f4:	4641      	mov	r1, r8
 80073f6:	eb12 0a01 	adds.w	sl, r2, r1
 80073fa:	4649      	mov	r1, r9
 80073fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800740c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007414:	4692      	mov	sl, r2
 8007416:	469b      	mov	fp, r3
 8007418:	4643      	mov	r3, r8
 800741a:	eb1a 0303 	adds.w	r3, sl, r3
 800741e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007422:	464b      	mov	r3, r9
 8007424:	eb4b 0303 	adc.w	r3, fp, r3
 8007428:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007438:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800743c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007440:	460b      	mov	r3, r1
 8007442:	18db      	adds	r3, r3, r3
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
 8007446:	4613      	mov	r3, r2
 8007448:	eb42 0303 	adc.w	r3, r2, r3
 800744c:	647b      	str	r3, [r7, #68]	@ 0x44
 800744e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007456:	f7f8 ff33 	bl	80002c0 <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4611      	mov	r1, r2
 8007460:	4b3b      	ldr	r3, [pc, #236]	@ (8007550 <UART_SetConfig+0x2d4>)
 8007462:	fba3 2301 	umull	r2, r3, r3, r1
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	2264      	movs	r2, #100	@ 0x64
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	1acb      	subs	r3, r1, r3
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007476:	4b36      	ldr	r3, [pc, #216]	@ (8007550 <UART_SetConfig+0x2d4>)
 8007478:	fba3 2302 	umull	r2, r3, r3, r2
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007484:	441c      	add	r4, r3
 8007486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007490:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	1891      	adds	r1, r2, r2
 800749e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074a0:	415b      	adcs	r3, r3
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074a8:	4641      	mov	r1, r8
 80074aa:	1851      	adds	r1, r2, r1
 80074ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80074ae:	4649      	mov	r1, r9
 80074b0:	414b      	adcs	r3, r1
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074c0:	4659      	mov	r1, fp
 80074c2:	00cb      	lsls	r3, r1, #3
 80074c4:	4651      	mov	r1, sl
 80074c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ca:	4651      	mov	r1, sl
 80074cc:	00ca      	lsls	r2, r1, #3
 80074ce:	4610      	mov	r0, r2
 80074d0:	4619      	mov	r1, r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	4642      	mov	r2, r8
 80074d6:	189b      	adds	r3, r3, r2
 80074d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074dc:	464b      	mov	r3, r9
 80074de:	460a      	mov	r2, r1
 80074e0:	eb42 0303 	adc.w	r3, r2, r3
 80074e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074fc:	460b      	mov	r3, r1
 80074fe:	18db      	adds	r3, r3, r3
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007502:	4613      	mov	r3, r2
 8007504:	eb42 0303 	adc.w	r3, r2, r3
 8007508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800750a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800750e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007512:	f7f8 fed5 	bl	80002c0 <__aeabi_uldivmod>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4b0d      	ldr	r3, [pc, #52]	@ (8007550 <UART_SetConfig+0x2d4>)
 800751c:	fba3 1302 	umull	r1, r3, r3, r2
 8007520:	095b      	lsrs	r3, r3, #5
 8007522:	2164      	movs	r1, #100	@ 0x64
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	3332      	adds	r3, #50	@ 0x32
 800752e:	4a08      	ldr	r2, [pc, #32]	@ (8007550 <UART_SetConfig+0x2d4>)
 8007530:	fba2 2303 	umull	r2, r3, r2, r3
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	f003 0207 	and.w	r2, r3, #7
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4422      	add	r2, r4
 8007542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007544:	e106      	b.n	8007754 <UART_SetConfig+0x4d8>
 8007546:	bf00      	nop
 8007548:	40011000 	.word	0x40011000
 800754c:	40011400 	.word	0x40011400
 8007550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800755e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007566:	4642      	mov	r2, r8
 8007568:	464b      	mov	r3, r9
 800756a:	1891      	adds	r1, r2, r2
 800756c:	6239      	str	r1, [r7, #32]
 800756e:	415b      	adcs	r3, r3
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
 8007572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007576:	4641      	mov	r1, r8
 8007578:	1854      	adds	r4, r2, r1
 800757a:	4649      	mov	r1, r9
 800757c:	eb43 0501 	adc.w	r5, r3, r1
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	00eb      	lsls	r3, r5, #3
 800758a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758e:	00e2      	lsls	r2, r4, #3
 8007590:	4614      	mov	r4, r2
 8007592:	461d      	mov	r5, r3
 8007594:	4643      	mov	r3, r8
 8007596:	18e3      	adds	r3, r4, r3
 8007598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800759c:	464b      	mov	r3, r9
 800759e:	eb45 0303 	adc.w	r3, r5, r3
 80075a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075c2:	4629      	mov	r1, r5
 80075c4:	008b      	lsls	r3, r1, #2
 80075c6:	4621      	mov	r1, r4
 80075c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075cc:	4621      	mov	r1, r4
 80075ce:	008a      	lsls	r2, r1, #2
 80075d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075d4:	f7f8 fe74 	bl	80002c0 <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4b60      	ldr	r3, [pc, #384]	@ (8007760 <UART_SetConfig+0x4e4>)
 80075de:	fba3 2302 	umull	r2, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	011c      	lsls	r4, r3, #4
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	1891      	adds	r1, r2, r2
 80075fe:	61b9      	str	r1, [r7, #24]
 8007600:	415b      	adcs	r3, r3
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007608:	4641      	mov	r1, r8
 800760a:	1851      	adds	r1, r2, r1
 800760c:	6139      	str	r1, [r7, #16]
 800760e:	4649      	mov	r1, r9
 8007610:	414b      	adcs	r3, r1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007620:	4659      	mov	r1, fp
 8007622:	00cb      	lsls	r3, r1, #3
 8007624:	4651      	mov	r1, sl
 8007626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762a:	4651      	mov	r1, sl
 800762c:	00ca      	lsls	r2, r1, #3
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	4603      	mov	r3, r0
 8007634:	4642      	mov	r2, r8
 8007636:	189b      	adds	r3, r3, r2
 8007638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800763c:	464b      	mov	r3, r9
 800763e:	460a      	mov	r2, r1
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007652:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007660:	4649      	mov	r1, r9
 8007662:	008b      	lsls	r3, r1, #2
 8007664:	4641      	mov	r1, r8
 8007666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800766a:	4641      	mov	r1, r8
 800766c:	008a      	lsls	r2, r1, #2
 800766e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007672:	f7f8 fe25 	bl	80002c0 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4611      	mov	r1, r2
 800767c:	4b38      	ldr	r3, [pc, #224]	@ (8007760 <UART_SetConfig+0x4e4>)
 800767e:	fba3 2301 	umull	r2, r3, r3, r1
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	2264      	movs	r2, #100	@ 0x64
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	1acb      	subs	r3, r1, r3
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	3332      	adds	r3, #50	@ 0x32
 8007690:	4a33      	ldr	r2, [pc, #204]	@ (8007760 <UART_SetConfig+0x4e4>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800769c:	441c      	add	r4, r3
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a2:	2200      	movs	r2, #0
 80076a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80076a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80076a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	1891      	adds	r1, r2, r2
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	415b      	adcs	r3, r3
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076bc:	4641      	mov	r1, r8
 80076be:	1851      	adds	r1, r2, r1
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	4649      	mov	r1, r9
 80076c4:	414b      	adcs	r3, r1
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076d4:	4659      	mov	r1, fp
 80076d6:	00cb      	lsls	r3, r1, #3
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076de:	4651      	mov	r1, sl
 80076e0:	00ca      	lsls	r2, r1, #3
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	4642      	mov	r2, r8
 80076ea:	189b      	adds	r3, r3, r2
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ee:	464b      	mov	r3, r9
 80076f0:	460a      	mov	r2, r1
 80076f2:	eb42 0303 	adc.w	r3, r2, r3
 80076f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	663b      	str	r3, [r7, #96]	@ 0x60
 8007702:	667a      	str	r2, [r7, #100]	@ 0x64
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007710:	4649      	mov	r1, r9
 8007712:	008b      	lsls	r3, r1, #2
 8007714:	4641      	mov	r1, r8
 8007716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771a:	4641      	mov	r1, r8
 800771c:	008a      	lsls	r2, r1, #2
 800771e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007722:	f7f8 fdcd 	bl	80002c0 <__aeabi_uldivmod>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <UART_SetConfig+0x4e4>)
 800772c:	fba3 1302 	umull	r1, r3, r3, r2
 8007730:	095b      	lsrs	r3, r3, #5
 8007732:	2164      	movs	r1, #100	@ 0x64
 8007734:	fb01 f303 	mul.w	r3, r1, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	3332      	adds	r3, #50	@ 0x32
 800773e:	4a08      	ldr	r2, [pc, #32]	@ (8007760 <UART_SetConfig+0x4e4>)
 8007740:	fba2 2303 	umull	r2, r3, r2, r3
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	f003 020f 	and.w	r2, r3, #15
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4422      	add	r2, r4
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	bf00      	nop
 8007756:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800775a:	46bd      	mov	sp, r7
 800775c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007760:	51eb851f 	.word	0x51eb851f

08007764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007764:	b084      	sub	sp, #16
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	f107 001c 	add.w	r0, r7, #28
 8007772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007776:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800777a:	2b01      	cmp	r3, #1
 800777c:	d123      	bne.n	80077c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d105      	bne.n	80077ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa9a 	bl	8007cf4 <USB_CoreReset>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	e01b      	b.n	80077fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa8e 	bl	8007cf4 <USB_CoreReset>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80077f0:	e005      	b.n	80077fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077fe:	7fbb      	ldrb	r3, [r7, #30]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10b      	bne.n	800781c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f043 0206 	orr.w	r2, r3, #6
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007828:	b004      	add	sp, #16
 800782a:	4770      	bx	lr

0800782c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f023 0201 	bic.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d115      	bne.n	800789c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800787c:	200a      	movs	r0, #10
 800787e:	f7f9 ffb1 	bl	80017e4 <HAL_Delay>
      ms += 10U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	330a      	adds	r3, #10
 8007886:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa25 	bl	8007cd8 <USB_GetMode>
 800788e:	4603      	mov	r3, r0
 8007890:	2b01      	cmp	r3, #1
 8007892:	d01e      	beq.n	80078d2 <USB_SetCurrentMode+0x84>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2bc7      	cmp	r3, #199	@ 0xc7
 8007898:	d9f0      	bls.n	800787c <USB_SetCurrentMode+0x2e>
 800789a:	e01a      	b.n	80078d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d115      	bne.n	80078ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ae:	200a      	movs	r0, #10
 80078b0:	f7f9 ff98 	bl	80017e4 <HAL_Delay>
      ms += 10U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	330a      	adds	r3, #10
 80078b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa0c 	bl	8007cd8 <USB_GetMode>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <USB_SetCurrentMode+0x84>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078ca:	d9f0      	bls.n	80078ae <USB_SetCurrentMode+0x60>
 80078cc:	e001      	b.n	80078d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e005      	b.n	80078de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80078d6:	d101      	bne.n	80078dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078e8:	b084      	sub	sp, #16
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b086      	sub	sp, #24
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e009      	b.n	800791c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3340      	adds	r3, #64	@ 0x40
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	2200      	movs	r2, #0
 8007914:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3301      	adds	r3, #1
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b0e      	cmp	r3, #14
 8007920:	d9f2      	bls.n	8007908 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007922:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11c      	bne.n	8007964 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007942:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e005      	b.n	8007970 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007968:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007976:	461a      	mov	r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800797c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10d      	bne.n	80079a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800798c:	2100      	movs	r1, #0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f968 	bl	8007c64 <USB_SetDevSpeed>
 8007994:	e008      	b.n	80079a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007996:	2101      	movs	r1, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f963 	bl	8007c64 <USB_SetDevSpeed>
 800799e:	e003      	b.n	80079a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079a0:	2103      	movs	r1, #3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f95e 	bl	8007c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079a8:	2110      	movs	r1, #16
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8fa 	bl	8007ba4 <USB_FlushTxFifo>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f924 	bl	8007c08 <USB_FlushRxFifo>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079dc:	461a      	mov	r2, r3
 80079de:	2300      	movs	r3, #0
 80079e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e8:	461a      	mov	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	e043      	b.n	8007a7c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a0a:	d118      	bne.n	8007a3e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e013      	b.n	8007a50 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a34:	461a      	mov	r2, r3
 8007a36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	e008      	b.n	8007a50 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a80:	461a      	mov	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d3b5      	bcc.n	80079f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	e043      	b.n	8007b16 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aa4:	d118      	bne.n	8007ad8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e013      	b.n	8007aea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	e008      	b.n	8007aea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af6:	461a      	mov	r2, r3
 8007af8:	2300      	movs	r3, #0
 8007afa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	3301      	adds	r3, #1
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d3b5      	bcc.n	8007a8e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	f043 0210 	orr.w	r2, r3, #16
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ba0 <USB_DevInit+0x2b8>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f043 0208 	orr.w	r2, r3, #8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d107      	bne.n	8007b90 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b88:	f043 0304 	orr.w	r3, r3, #4
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b9c:	b004      	add	sp, #16
 8007b9e:	4770      	bx	lr
 8007ba0:	803c3800 	.word	0x803c3800

08007ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bbe:	d901      	bls.n	8007bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e01b      	b.n	8007bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	daf2      	bge.n	8007bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	019b      	lsls	r3, r3, #6
 8007bd4:	f043 0220 	orr.w	r2, r3, #32
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be8:	d901      	bls.n	8007bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e006      	b.n	8007bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d0f0      	beq.n	8007bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c20:	d901      	bls.n	8007c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e018      	b.n	8007c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	daf2      	bge.n	8007c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2210      	movs	r2, #16
 8007c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c44:	d901      	bls.n	8007c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e006      	b.n	8007c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d0f0      	beq.n	8007c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cb0:	f023 0303 	bic.w	r3, r3, #3
 8007cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d0c:	d901      	bls.n	8007d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01b      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	daf2      	bge.n	8007d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d36:	d901      	bls.n	8007d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d0f0      	beq.n	8007d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <siprintf>:
 8007d58:	b40e      	push	{r1, r2, r3}
 8007d5a:	b500      	push	{lr}
 8007d5c:	b09c      	sub	sp, #112	@ 0x70
 8007d5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d60:	9002      	str	r0, [sp, #8]
 8007d62:	9006      	str	r0, [sp, #24]
 8007d64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d68:	4809      	ldr	r0, [pc, #36]	@ (8007d90 <siprintf+0x38>)
 8007d6a:	9107      	str	r1, [sp, #28]
 8007d6c:	9104      	str	r1, [sp, #16]
 8007d6e:	4909      	ldr	r1, [pc, #36]	@ (8007d94 <siprintf+0x3c>)
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	a902      	add	r1, sp, #8
 8007d7c:	f000 f896 	bl	8007eac <_svfiprintf_r>
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	b01c      	add	sp, #112	@ 0x70
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	ffff0208 	.word	0xffff0208

08007d98 <memset>:
 8007d98:	4402      	add	r2, r0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <__libc_init_array>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4d0d      	ldr	r5, [pc, #52]	@ (8007de0 <__libc_init_array+0x38>)
 8007dac:	4c0d      	ldr	r4, [pc, #52]	@ (8007de4 <__libc_init_array+0x3c>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	2600      	movs	r6, #0
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	d109      	bne.n	8007dcc <__libc_init_array+0x24>
 8007db8:	4d0b      	ldr	r5, [pc, #44]	@ (8007de8 <__libc_init_array+0x40>)
 8007dba:	4c0c      	ldr	r4, [pc, #48]	@ (8007dec <__libc_init_array+0x44>)
 8007dbc:	f000 fc74 	bl	80086a8 <_init>
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d105      	bne.n	8007dd6 <__libc_init_array+0x2e>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd0:	4798      	blx	r3
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7ee      	b.n	8007db4 <__libc_init_array+0xc>
 8007dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dda:	4798      	blx	r3
 8007ddc:	3601      	adds	r6, #1
 8007dde:	e7f2      	b.n	8007dc6 <__libc_init_array+0x1e>
 8007de0:	0800897c 	.word	0x0800897c
 8007de4:	0800897c 	.word	0x0800897c
 8007de8:	0800897c 	.word	0x0800897c
 8007dec:	08008980 	.word	0x08008980

08007df0 <__retarget_lock_acquire_recursive>:
 8007df0:	4770      	bx	lr

08007df2 <__retarget_lock_release_recursive>:
 8007df2:	4770      	bx	lr

08007df4 <__ssputs_r>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	688e      	ldr	r6, [r1, #8]
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	42be      	cmp	r6, r7
 8007dfe:	680b      	ldr	r3, [r1, #0]
 8007e00:	4682      	mov	sl, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	4690      	mov	r8, r2
 8007e06:	d82d      	bhi.n	8007e64 <__ssputs_r+0x70>
 8007e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e10:	d026      	beq.n	8007e60 <__ssputs_r+0x6c>
 8007e12:	6965      	ldr	r5, [r4, #20]
 8007e14:	6909      	ldr	r1, [r1, #16]
 8007e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e1a:	eba3 0901 	sub.w	r9, r3, r1
 8007e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e22:	1c7b      	adds	r3, r7, #1
 8007e24:	444b      	add	r3, r9
 8007e26:	106d      	asrs	r5, r5, #1
 8007e28:	429d      	cmp	r5, r3
 8007e2a:	bf38      	it	cc
 8007e2c:	461d      	movcc	r5, r3
 8007e2e:	0553      	lsls	r3, r2, #21
 8007e30:	d527      	bpl.n	8007e82 <__ssputs_r+0x8e>
 8007e32:	4629      	mov	r1, r5
 8007e34:	f000 f958 	bl	80080e8 <_malloc_r>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	b360      	cbz	r0, 8007e96 <__ssputs_r+0xa2>
 8007e3c:	6921      	ldr	r1, [r4, #16]
 8007e3e:	464a      	mov	r2, r9
 8007e40:	f000 fbc4 	bl	80085cc <memcpy>
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	6126      	str	r6, [r4, #16]
 8007e52:	6165      	str	r5, [r4, #20]
 8007e54:	444e      	add	r6, r9
 8007e56:	eba5 0509 	sub.w	r5, r5, r9
 8007e5a:	6026      	str	r6, [r4, #0]
 8007e5c:	60a5      	str	r5, [r4, #8]
 8007e5e:	463e      	mov	r6, r7
 8007e60:	42be      	cmp	r6, r7
 8007e62:	d900      	bls.n	8007e66 <__ssputs_r+0x72>
 8007e64:	463e      	mov	r6, r7
 8007e66:	6820      	ldr	r0, [r4, #0]
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	f000 fb84 	bl	8008578 <memmove>
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	1b9b      	subs	r3, r3, r6
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	4433      	add	r3, r6
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e82:	462a      	mov	r2, r5
 8007e84:	f000 fb4a 	bl	800851c <_realloc_r>
 8007e88:	4606      	mov	r6, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d1e0      	bne.n	8007e50 <__ssputs_r+0x5c>
 8007e8e:	6921      	ldr	r1, [r4, #16]
 8007e90:	4650      	mov	r0, sl
 8007e92:	f000 fba9 	bl	80085e8 <_free_r>
 8007e96:	230c      	movs	r3, #12
 8007e98:	f8ca 3000 	str.w	r3, [sl]
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ea8:	e7e9      	b.n	8007e7e <__ssputs_r+0x8a>
	...

08007eac <_svfiprintf_r>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4698      	mov	r8, r3
 8007eb2:	898b      	ldrh	r3, [r1, #12]
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	b09d      	sub	sp, #116	@ 0x74
 8007eb8:	4607      	mov	r7, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	d510      	bpl.n	8007ee2 <_svfiprintf_r+0x36>
 8007ec0:	690b      	ldr	r3, [r1, #16]
 8007ec2:	b973      	cbnz	r3, 8007ee2 <_svfiprintf_r+0x36>
 8007ec4:	2140      	movs	r1, #64	@ 0x40
 8007ec6:	f000 f90f 	bl	80080e8 <_malloc_r>
 8007eca:	6028      	str	r0, [r5, #0]
 8007ecc:	6128      	str	r0, [r5, #16]
 8007ece:	b930      	cbnz	r0, 8007ede <_svfiprintf_r+0x32>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ed8:	b01d      	add	sp, #116	@ 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	2340      	movs	r3, #64	@ 0x40
 8007ee0:	616b      	str	r3, [r5, #20]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee6:	2320      	movs	r3, #32
 8007ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef0:	2330      	movs	r3, #48	@ 0x30
 8007ef2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008090 <_svfiprintf_r+0x1e4>
 8007ef6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007efa:	f04f 0901 	mov.w	r9, #1
 8007efe:	4623      	mov	r3, r4
 8007f00:	469a      	mov	sl, r3
 8007f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f06:	b10a      	cbz	r2, 8007f0c <_svfiprintf_r+0x60>
 8007f08:	2a25      	cmp	r2, #37	@ 0x25
 8007f0a:	d1f9      	bne.n	8007f00 <_svfiprintf_r+0x54>
 8007f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f10:	d00b      	beq.n	8007f2a <_svfiprintf_r+0x7e>
 8007f12:	465b      	mov	r3, fp
 8007f14:	4622      	mov	r2, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	4638      	mov	r0, r7
 8007f1a:	f7ff ff6b 	bl	8007df4 <__ssputs_r>
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f000 80a7 	beq.w	8008072 <_svfiprintf_r+0x1c6>
 8007f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f26:	445a      	add	r2, fp
 8007f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 809f 	beq.w	8008072 <_svfiprintf_r+0x1c6>
 8007f34:	2300      	movs	r3, #0
 8007f36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f3e:	f10a 0a01 	add.w	sl, sl, #1
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	9307      	str	r3, [sp, #28]
 8007f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f4c:	4654      	mov	r4, sl
 8007f4e:	2205      	movs	r2, #5
 8007f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f54:	484e      	ldr	r0, [pc, #312]	@ (8008090 <_svfiprintf_r+0x1e4>)
 8007f56:	f7f8 f963 	bl	8000220 <memchr>
 8007f5a:	9a04      	ldr	r2, [sp, #16]
 8007f5c:	b9d8      	cbnz	r0, 8007f96 <_svfiprintf_r+0xea>
 8007f5e:	06d0      	lsls	r0, r2, #27
 8007f60:	bf44      	itt	mi
 8007f62:	2320      	movmi	r3, #32
 8007f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f68:	0711      	lsls	r1, r2, #28
 8007f6a:	bf44      	itt	mi
 8007f6c:	232b      	movmi	r3, #43	@ 0x2b
 8007f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f72:	f89a 3000 	ldrb.w	r3, [sl]
 8007f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f78:	d015      	beq.n	8007fa6 <_svfiprintf_r+0xfa>
 8007f7a:	9a07      	ldr	r2, [sp, #28]
 8007f7c:	4654      	mov	r4, sl
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f04f 0c0a 	mov.w	ip, #10
 8007f84:	4621      	mov	r1, r4
 8007f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f8a:	3b30      	subs	r3, #48	@ 0x30
 8007f8c:	2b09      	cmp	r3, #9
 8007f8e:	d94b      	bls.n	8008028 <_svfiprintf_r+0x17c>
 8007f90:	b1b0      	cbz	r0, 8007fc0 <_svfiprintf_r+0x114>
 8007f92:	9207      	str	r2, [sp, #28]
 8007f94:	e014      	b.n	8007fc0 <_svfiprintf_r+0x114>
 8007f96:	eba0 0308 	sub.w	r3, r0, r8
 8007f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	9304      	str	r3, [sp, #16]
 8007fa2:	46a2      	mov	sl, r4
 8007fa4:	e7d2      	b.n	8007f4c <_svfiprintf_r+0xa0>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	1d19      	adds	r1, r3, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfbb      	ittet	lt
 8007fb2:	425b      	neglt	r3, r3
 8007fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007fb8:	9307      	strge	r3, [sp, #28]
 8007fba:	9307      	strlt	r3, [sp, #28]
 8007fbc:	bfb8      	it	lt
 8007fbe:	9204      	strlt	r2, [sp, #16]
 8007fc0:	7823      	ldrb	r3, [r4, #0]
 8007fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fc4:	d10a      	bne.n	8007fdc <_svfiprintf_r+0x130>
 8007fc6:	7863      	ldrb	r3, [r4, #1]
 8007fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fca:	d132      	bne.n	8008032 <_svfiprintf_r+0x186>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	1d1a      	adds	r2, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	9203      	str	r2, [sp, #12]
 8007fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fd8:	3402      	adds	r4, #2
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080a0 <_svfiprintf_r+0x1f4>
 8007fe0:	7821      	ldrb	r1, [r4, #0]
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	f7f8 f91b 	bl	8000220 <memchr>
 8007fea:	b138      	cbz	r0, 8007ffc <_svfiprintf_r+0x150>
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	eba0 000a 	sub.w	r0, r0, sl
 8007ff2:	2240      	movs	r2, #64	@ 0x40
 8007ff4:	4082      	lsls	r2, r0
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008000:	4824      	ldr	r0, [pc, #144]	@ (8008094 <_svfiprintf_r+0x1e8>)
 8008002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008006:	2206      	movs	r2, #6
 8008008:	f7f8 f90a 	bl	8000220 <memchr>
 800800c:	2800      	cmp	r0, #0
 800800e:	d036      	beq.n	800807e <_svfiprintf_r+0x1d2>
 8008010:	4b21      	ldr	r3, [pc, #132]	@ (8008098 <_svfiprintf_r+0x1ec>)
 8008012:	bb1b      	cbnz	r3, 800805c <_svfiprintf_r+0x1b0>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	3307      	adds	r3, #7
 8008018:	f023 0307 	bic.w	r3, r3, #7
 800801c:	3308      	adds	r3, #8
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	4433      	add	r3, r6
 8008024:	9309      	str	r3, [sp, #36]	@ 0x24
 8008026:	e76a      	b.n	8007efe <_svfiprintf_r+0x52>
 8008028:	fb0c 3202 	mla	r2, ip, r2, r3
 800802c:	460c      	mov	r4, r1
 800802e:	2001      	movs	r0, #1
 8008030:	e7a8      	b.n	8007f84 <_svfiprintf_r+0xd8>
 8008032:	2300      	movs	r3, #0
 8008034:	3401      	adds	r4, #1
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	4619      	mov	r1, r3
 800803a:	f04f 0c0a 	mov.w	ip, #10
 800803e:	4620      	mov	r0, r4
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	3a30      	subs	r2, #48	@ 0x30
 8008046:	2a09      	cmp	r2, #9
 8008048:	d903      	bls.n	8008052 <_svfiprintf_r+0x1a6>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0c6      	beq.n	8007fdc <_svfiprintf_r+0x130>
 800804e:	9105      	str	r1, [sp, #20]
 8008050:	e7c4      	b.n	8007fdc <_svfiprintf_r+0x130>
 8008052:	fb0c 2101 	mla	r1, ip, r1, r2
 8008056:	4604      	mov	r4, r0
 8008058:	2301      	movs	r3, #1
 800805a:	e7f0      	b.n	800803e <_svfiprintf_r+0x192>
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	462a      	mov	r2, r5
 8008062:	4b0e      	ldr	r3, [pc, #56]	@ (800809c <_svfiprintf_r+0x1f0>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4638      	mov	r0, r7
 8008068:	f3af 8000 	nop.w
 800806c:	1c42      	adds	r2, r0, #1
 800806e:	4606      	mov	r6, r0
 8008070:	d1d6      	bne.n	8008020 <_svfiprintf_r+0x174>
 8008072:	89ab      	ldrh	r3, [r5, #12]
 8008074:	065b      	lsls	r3, r3, #25
 8008076:	f53f af2d 	bmi.w	8007ed4 <_svfiprintf_r+0x28>
 800807a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800807c:	e72c      	b.n	8007ed8 <_svfiprintf_r+0x2c>
 800807e:	ab03      	add	r3, sp, #12
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	462a      	mov	r2, r5
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <_svfiprintf_r+0x1f0>)
 8008086:	a904      	add	r1, sp, #16
 8008088:	4638      	mov	r0, r7
 800808a:	f000 f91b 	bl	80082c4 <_printf_i>
 800808e:	e7ed      	b.n	800806c <_svfiprintf_r+0x1c0>
 8008090:	08008940 	.word	0x08008940
 8008094:	0800894a 	.word	0x0800894a
 8008098:	00000000 	.word	0x00000000
 800809c:	08007df5 	.word	0x08007df5
 80080a0:	08008946 	.word	0x08008946

080080a4 <sbrk_aligned>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4e0f      	ldr	r6, [pc, #60]	@ (80080e4 <sbrk_aligned+0x40>)
 80080a8:	460c      	mov	r4, r1
 80080aa:	6831      	ldr	r1, [r6, #0]
 80080ac:	4605      	mov	r5, r0
 80080ae:	b911      	cbnz	r1, 80080b6 <sbrk_aligned+0x12>
 80080b0:	f000 fa7c 	bl	80085ac <_sbrk_r>
 80080b4:	6030      	str	r0, [r6, #0]
 80080b6:	4621      	mov	r1, r4
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 fa77 	bl	80085ac <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d103      	bne.n	80080ca <sbrk_aligned+0x26>
 80080c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80080c6:	4620      	mov	r0, r4
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	1cc4      	adds	r4, r0, #3
 80080cc:	f024 0403 	bic.w	r4, r4, #3
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d0f8      	beq.n	80080c6 <sbrk_aligned+0x22>
 80080d4:	1a21      	subs	r1, r4, r0
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 fa68 	bl	80085ac <_sbrk_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	d1f2      	bne.n	80080c6 <sbrk_aligned+0x22>
 80080e0:	e7ef      	b.n	80080c2 <sbrk_aligned+0x1e>
 80080e2:	bf00      	nop
 80080e4:	2000cc3c 	.word	0x2000cc3c

080080e8 <_malloc_r>:
 80080e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ec:	1ccd      	adds	r5, r1, #3
 80080ee:	f025 0503 	bic.w	r5, r5, #3
 80080f2:	3508      	adds	r5, #8
 80080f4:	2d0c      	cmp	r5, #12
 80080f6:	bf38      	it	cc
 80080f8:	250c      	movcc	r5, #12
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	4606      	mov	r6, r0
 80080fe:	db01      	blt.n	8008104 <_malloc_r+0x1c>
 8008100:	42a9      	cmp	r1, r5
 8008102:	d904      	bls.n	800810e <_malloc_r+0x26>
 8008104:	230c      	movs	r3, #12
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	2000      	movs	r0, #0
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081e4 <_malloc_r+0xfc>
 8008112:	f000 f9f7 	bl	8008504 <__malloc_lock>
 8008116:	f8d8 3000 	ldr.w	r3, [r8]
 800811a:	461c      	mov	r4, r3
 800811c:	bb44      	cbnz	r4, 8008170 <_malloc_r+0x88>
 800811e:	4629      	mov	r1, r5
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ffbf 	bl	80080a4 <sbrk_aligned>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	4604      	mov	r4, r0
 800812a:	d158      	bne.n	80081de <_malloc_r+0xf6>
 800812c:	f8d8 4000 	ldr.w	r4, [r8]
 8008130:	4627      	mov	r7, r4
 8008132:	2f00      	cmp	r7, #0
 8008134:	d143      	bne.n	80081be <_malloc_r+0xd6>
 8008136:	2c00      	cmp	r4, #0
 8008138:	d04b      	beq.n	80081d2 <_malloc_r+0xea>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	4639      	mov	r1, r7
 800813e:	4630      	mov	r0, r6
 8008140:	eb04 0903 	add.w	r9, r4, r3
 8008144:	f000 fa32 	bl	80085ac <_sbrk_r>
 8008148:	4581      	cmp	r9, r0
 800814a:	d142      	bne.n	80081d2 <_malloc_r+0xea>
 800814c:	6821      	ldr	r1, [r4, #0]
 800814e:	1a6d      	subs	r5, r5, r1
 8008150:	4629      	mov	r1, r5
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffa6 	bl	80080a4 <sbrk_aligned>
 8008158:	3001      	adds	r0, #1
 800815a:	d03a      	beq.n	80081d2 <_malloc_r+0xea>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	442b      	add	r3, r5
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	f8d8 3000 	ldr.w	r3, [r8]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	bb62      	cbnz	r2, 80081c4 <_malloc_r+0xdc>
 800816a:	f8c8 7000 	str.w	r7, [r8]
 800816e:	e00f      	b.n	8008190 <_malloc_r+0xa8>
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	1b52      	subs	r2, r2, r5
 8008174:	d420      	bmi.n	80081b8 <_malloc_r+0xd0>
 8008176:	2a0b      	cmp	r2, #11
 8008178:	d917      	bls.n	80081aa <_malloc_r+0xc2>
 800817a:	1961      	adds	r1, r4, r5
 800817c:	42a3      	cmp	r3, r4
 800817e:	6025      	str	r5, [r4, #0]
 8008180:	bf18      	it	ne
 8008182:	6059      	strne	r1, [r3, #4]
 8008184:	6863      	ldr	r3, [r4, #4]
 8008186:	bf08      	it	eq
 8008188:	f8c8 1000 	streq.w	r1, [r8]
 800818c:	5162      	str	r2, [r4, r5]
 800818e:	604b      	str	r3, [r1, #4]
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f9bd 	bl	8008510 <__malloc_unlock>
 8008196:	f104 000b 	add.w	r0, r4, #11
 800819a:	1d23      	adds	r3, r4, #4
 800819c:	f020 0007 	bic.w	r0, r0, #7
 80081a0:	1ac2      	subs	r2, r0, r3
 80081a2:	bf1c      	itt	ne
 80081a4:	1a1b      	subne	r3, r3, r0
 80081a6:	50a3      	strne	r3, [r4, r2]
 80081a8:	e7af      	b.n	800810a <_malloc_r+0x22>
 80081aa:	6862      	ldr	r2, [r4, #4]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	bf0c      	ite	eq
 80081b0:	f8c8 2000 	streq.w	r2, [r8]
 80081b4:	605a      	strne	r2, [r3, #4]
 80081b6:	e7eb      	b.n	8008190 <_malloc_r+0xa8>
 80081b8:	4623      	mov	r3, r4
 80081ba:	6864      	ldr	r4, [r4, #4]
 80081bc:	e7ae      	b.n	800811c <_malloc_r+0x34>
 80081be:	463c      	mov	r4, r7
 80081c0:	687f      	ldr	r7, [r7, #4]
 80081c2:	e7b6      	b.n	8008132 <_malloc_r+0x4a>
 80081c4:	461a      	mov	r2, r3
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d1fb      	bne.n	80081c4 <_malloc_r+0xdc>
 80081cc:	2300      	movs	r3, #0
 80081ce:	6053      	str	r3, [r2, #4]
 80081d0:	e7de      	b.n	8008190 <_malloc_r+0xa8>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 f99a 	bl	8008510 <__malloc_unlock>
 80081dc:	e794      	b.n	8008108 <_malloc_r+0x20>
 80081de:	6005      	str	r5, [r0, #0]
 80081e0:	e7d6      	b.n	8008190 <_malloc_r+0xa8>
 80081e2:	bf00      	nop
 80081e4:	2000cc40 	.word	0x2000cc40

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bfb8      	it	lt
 80081fc:	4613      	movlt	r3, r2
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008204:	4607      	mov	r7, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc26      	bgt.n	800827e <_printf_common+0x96>
 8008230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	3b00      	subs	r3, #0
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d42b      	bmi.n	8008298 <_printf_common+0xb0>
 8008240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008244:	4641      	mov	r1, r8
 8008246:	4638      	mov	r0, r7
 8008248:	47c8      	blx	r9
 800824a:	3001      	adds	r0, #1
 800824c:	d01e      	beq.n	800828c <_printf_common+0xa4>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	2b04      	cmp	r3, #4
 8008258:	bf02      	ittt	eq
 800825a:	68e5      	ldreq	r5, [r4, #12]
 800825c:	6833      	ldreq	r3, [r6, #0]
 800825e:	1aed      	subeq	r5, r5, r3
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	2600      	movs	r6, #0
 8008274:	341a      	adds	r4, #26
 8008276:	42b5      	cmp	r5, r6
 8008278:	d11a      	bne.n	80082b0 <_printf_common+0xc8>
 800827a:	2000      	movs	r0, #0
 800827c:	e008      	b.n	8008290 <_printf_common+0xa8>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4641      	mov	r1, r8
 8008284:	4638      	mov	r0, r7
 8008286:	47c8      	blx	r9
 8008288:	3001      	adds	r0, #1
 800828a:	d103      	bne.n	8008294 <_printf_common+0xac>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	3501      	adds	r5, #1
 8008296:	e7c6      	b.n	8008226 <_printf_common+0x3e>
 8008298:	18e1      	adds	r1, r4, r3
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2030      	movs	r0, #48	@ 0x30
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a2:	4422      	add	r2, r4
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082ac:	3302      	adds	r3, #2
 80082ae:	e7c7      	b.n	8008240 <_printf_common+0x58>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4622      	mov	r2, r4
 80082b4:	4641      	mov	r1, r8
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c8      	blx	r9
 80082ba:	3001      	adds	r0, #1
 80082bc:	d0e6      	beq.n	800828c <_printf_common+0xa4>
 80082be:	3601      	adds	r6, #1
 80082c0:	e7d9      	b.n	8008276 <_printf_common+0x8e>
	...

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	7e0f      	ldrb	r7, [r1, #24]
 80082ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082cc:	2f78      	cmp	r7, #120	@ 0x78
 80082ce:	4691      	mov	r9, r2
 80082d0:	4680      	mov	r8, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	469a      	mov	sl, r3
 80082d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	@ 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d2 	beq.w	800848a <_printf_i+0x1c6>
 80082e6:	2f58      	cmp	r7, #88	@ 0x58
 80082e8:	f000 80b9 	beq.w	800845e <_printf_i+0x19a>
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008304 <_printf_i+0x40>)
 8008300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	08008471 	.word	0x08008471
 8008334:	0800839b 	.word	0x0800839b
 8008338:	0800842b 	.word	0x0800842b
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	08008493 	.word	0x08008493
 8008348:	080082ed 	.word	0x080082ed
 800834c:	0800839b 	.word	0x0800839b
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008433 	.word	0x08008433
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6032      	str	r2, [r6, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e09d      	b.n	80084ac <_printf_i+0x1e8>
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	0606      	lsls	r6, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xbc>
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	e003      	b.n	8008388 <_printf_i+0xc4>
 8008380:	0645      	lsls	r5, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xb8>
 8008384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xd0>
 800838c:	232d      	movs	r3, #45	@ 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008394:	4859      	ldr	r0, [pc, #356]	@ (80084fc <_printf_i+0x238>)
 8008396:	230a      	movs	r3, #10
 8008398:	e011      	b.n	80083be <_printf_i+0xfa>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	0608      	lsls	r0, r1, #24
 80083a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0xe8>
 80083a6:	0649      	lsls	r1, r1, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ae:	4853      	ldr	r0, [pc, #332]	@ (80084fc <_printf_i+0x238>)
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	bf14      	ite	ne
 80083b4:	230a      	movne	r3, #10
 80083b6:	2308      	moveq	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083be:	6866      	ldr	r6, [r4, #4]
 80083c0:	60a6      	str	r6, [r4, #8]
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	bfa2      	ittt	ge
 80083c6:	6821      	ldrge	r1, [r4, #0]
 80083c8:	f021 0104 	bicge.w	r1, r1, #4
 80083cc:	6021      	strge	r1, [r4, #0]
 80083ce:	b90d      	cbnz	r5, 80083d4 <_printf_i+0x110>
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	d04b      	beq.n	800846c <_printf_i+0x1a8>
 80083d4:	4616      	mov	r6, r2
 80083d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083da:	fb03 5711 	mls	r7, r3, r1, r5
 80083de:	5dc7      	ldrb	r7, [r0, r7]
 80083e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e4:	462f      	mov	r7, r5
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	460d      	mov	r5, r1
 80083ea:	d9f4      	bls.n	80083d6 <_printf_i+0x112>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d10b      	bne.n	8008408 <_printf_i+0x144>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07df      	lsls	r7, r3, #31
 80083f4:	d508      	bpl.n	8008408 <_printf_i+0x144>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6861      	ldr	r1, [r4, #4]
 80083fa:	4299      	cmp	r1, r3
 80083fc:	bfde      	ittt	le
 80083fe:	2330      	movle	r3, #48	@ 0x30
 8008400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008404:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008408:	1b92      	subs	r2, r2, r6
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	f8cd a000 	str.w	sl, [sp]
 8008410:	464b      	mov	r3, r9
 8008412:	aa03      	add	r2, sp, #12
 8008414:	4621      	mov	r1, r4
 8008416:	4640      	mov	r0, r8
 8008418:	f7ff fee6 	bl	80081e8 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	d14a      	bne.n	80084b6 <_printf_i+0x1f2>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008424:	b004      	add	sp, #16
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	f043 0320 	orr.w	r3, r3, #32
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	4833      	ldr	r0, [pc, #204]	@ (8008500 <_printf_i+0x23c>)
 8008434:	2778      	movs	r7, #120	@ 0x78
 8008436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	6831      	ldr	r1, [r6, #0]
 800843e:	061f      	lsls	r7, r3, #24
 8008440:	f851 5b04 	ldr.w	r5, [r1], #4
 8008444:	d402      	bmi.n	800844c <_printf_i+0x188>
 8008446:	065f      	lsls	r7, r3, #25
 8008448:	bf48      	it	mi
 800844a:	b2ad      	uxthmi	r5, r5
 800844c:	6031      	str	r1, [r6, #0]
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	bf44      	itt	mi
 8008452:	f043 0320 	orrmi.w	r3, r3, #32
 8008456:	6023      	strmi	r3, [r4, #0]
 8008458:	b11d      	cbz	r5, 8008462 <_printf_i+0x19e>
 800845a:	2310      	movs	r3, #16
 800845c:	e7ac      	b.n	80083b8 <_printf_i+0xf4>
 800845e:	4827      	ldr	r0, [pc, #156]	@ (80084fc <_printf_i+0x238>)
 8008460:	e7e9      	b.n	8008436 <_printf_i+0x172>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	f023 0320 	bic.w	r3, r3, #32
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	e7f6      	b.n	800845a <_printf_i+0x196>
 800846c:	4616      	mov	r6, r2
 800846e:	e7bd      	b.n	80083ec <_printf_i+0x128>
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	6825      	ldr	r5, [r4, #0]
 8008474:	6961      	ldr	r1, [r4, #20]
 8008476:	1d18      	adds	r0, r3, #4
 8008478:	6030      	str	r0, [r6, #0]
 800847a:	062e      	lsls	r6, r5, #24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	d501      	bpl.n	8008484 <_printf_i+0x1c0>
 8008480:	6019      	str	r1, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0x1c6>
 8008484:	0668      	lsls	r0, r5, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0x1bc>
 8008488:	8019      	strh	r1, [r3, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	4616      	mov	r6, r2
 8008490:	e7bc      	b.n	800840c <_printf_i+0x148>
 8008492:	6833      	ldr	r3, [r6, #0]
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	6032      	str	r2, [r6, #0]
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	2100      	movs	r1, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	f7f7 febe 	bl	8000220 <memchr>
 80084a4:	b108      	cbz	r0, 80084aa <_printf_i+0x1e6>
 80084a6:	1b80      	subs	r0, r0, r6
 80084a8:	6060      	str	r0, [r4, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b4:	e7aa      	b.n	800840c <_printf_i+0x148>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4649      	mov	r1, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	47d0      	blx	sl
 80084c0:	3001      	adds	r0, #1
 80084c2:	d0ad      	beq.n	8008420 <_printf_i+0x15c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	079b      	lsls	r3, r3, #30
 80084c8:	d413      	bmi.n	80084f2 <_printf_i+0x22e>
 80084ca:	68e0      	ldr	r0, [r4, #12]
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	4298      	cmp	r0, r3
 80084d0:	bfb8      	it	lt
 80084d2:	4618      	movlt	r0, r3
 80084d4:	e7a6      	b.n	8008424 <_printf_i+0x160>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d09d      	beq.n	8008420 <_printf_i+0x15c>
 80084e4:	3501      	adds	r5, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	9903      	ldr	r1, [sp, #12]
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dcf2      	bgt.n	80084d6 <_printf_i+0x212>
 80084f0:	e7eb      	b.n	80084ca <_printf_i+0x206>
 80084f2:	2500      	movs	r5, #0
 80084f4:	f104 0619 	add.w	r6, r4, #25
 80084f8:	e7f5      	b.n	80084e6 <_printf_i+0x222>
 80084fa:	bf00      	nop
 80084fc:	08008951 	.word	0x08008951
 8008500:	08008962 	.word	0x08008962

08008504 <__malloc_lock>:
 8008504:	4801      	ldr	r0, [pc, #4]	@ (800850c <__malloc_lock+0x8>)
 8008506:	f7ff bc73 	b.w	8007df0 <__retarget_lock_acquire_recursive>
 800850a:	bf00      	nop
 800850c:	2000cc38 	.word	0x2000cc38

08008510 <__malloc_unlock>:
 8008510:	4801      	ldr	r0, [pc, #4]	@ (8008518 <__malloc_unlock+0x8>)
 8008512:	f7ff bc6e 	b.w	8007df2 <__retarget_lock_release_recursive>
 8008516:	bf00      	nop
 8008518:	2000cc38 	.word	0x2000cc38

0800851c <_realloc_r>:
 800851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	4680      	mov	r8, r0
 8008522:	4615      	mov	r5, r2
 8008524:	460c      	mov	r4, r1
 8008526:	b921      	cbnz	r1, 8008532 <_realloc_r+0x16>
 8008528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	4611      	mov	r1, r2
 800852e:	f7ff bddb 	b.w	80080e8 <_malloc_r>
 8008532:	b92a      	cbnz	r2, 8008540 <_realloc_r+0x24>
 8008534:	f000 f858 	bl	80085e8 <_free_r>
 8008538:	2400      	movs	r4, #0
 800853a:	4620      	mov	r0, r4
 800853c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008540:	f000 f89c 	bl	800867c <_malloc_usable_size_r>
 8008544:	4285      	cmp	r5, r0
 8008546:	4606      	mov	r6, r0
 8008548:	d802      	bhi.n	8008550 <_realloc_r+0x34>
 800854a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800854e:	d8f4      	bhi.n	800853a <_realloc_r+0x1e>
 8008550:	4629      	mov	r1, r5
 8008552:	4640      	mov	r0, r8
 8008554:	f7ff fdc8 	bl	80080e8 <_malloc_r>
 8008558:	4607      	mov	r7, r0
 800855a:	2800      	cmp	r0, #0
 800855c:	d0ec      	beq.n	8008538 <_realloc_r+0x1c>
 800855e:	42b5      	cmp	r5, r6
 8008560:	462a      	mov	r2, r5
 8008562:	4621      	mov	r1, r4
 8008564:	bf28      	it	cs
 8008566:	4632      	movcs	r2, r6
 8008568:	f000 f830 	bl	80085cc <memcpy>
 800856c:	4621      	mov	r1, r4
 800856e:	4640      	mov	r0, r8
 8008570:	f000 f83a 	bl	80085e8 <_free_r>
 8008574:	463c      	mov	r4, r7
 8008576:	e7e0      	b.n	800853a <_realloc_r+0x1e>

08008578 <memmove>:
 8008578:	4288      	cmp	r0, r1
 800857a:	b510      	push	{r4, lr}
 800857c:	eb01 0402 	add.w	r4, r1, r2
 8008580:	d902      	bls.n	8008588 <memmove+0x10>
 8008582:	4284      	cmp	r4, r0
 8008584:	4623      	mov	r3, r4
 8008586:	d807      	bhi.n	8008598 <memmove+0x20>
 8008588:	1e43      	subs	r3, r0, #1
 800858a:	42a1      	cmp	r1, r4
 800858c:	d008      	beq.n	80085a0 <memmove+0x28>
 800858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008596:	e7f8      	b.n	800858a <memmove+0x12>
 8008598:	4402      	add	r2, r0
 800859a:	4601      	mov	r1, r0
 800859c:	428a      	cmp	r2, r1
 800859e:	d100      	bne.n	80085a2 <memmove+0x2a>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085aa:	e7f7      	b.n	800859c <memmove+0x24>

080085ac <_sbrk_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d06      	ldr	r5, [pc, #24]	@ (80085c8 <_sbrk_r+0x1c>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	602b      	str	r3, [r5, #0]
 80085b8:	f000 f868 	bl	800868c <_sbrk>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_sbrk_r+0x1a>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_sbrk_r+0x1a>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	2000cc44 	.word	0x2000cc44

080085cc <memcpy>:
 80085cc:	440a      	add	r2, r1
 80085ce:	4291      	cmp	r1, r2
 80085d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80085d4:	d100      	bne.n	80085d8 <memcpy+0xc>
 80085d6:	4770      	bx	lr
 80085d8:	b510      	push	{r4, lr}
 80085da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e2:	4291      	cmp	r1, r2
 80085e4:	d1f9      	bne.n	80085da <memcpy+0xe>
 80085e6:	bd10      	pop	{r4, pc}

080085e8 <_free_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4605      	mov	r5, r0
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d041      	beq.n	8008674 <_free_r+0x8c>
 80085f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f4:	1f0c      	subs	r4, r1, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfb8      	it	lt
 80085fa:	18e4      	addlt	r4, r4, r3
 80085fc:	f7ff ff82 	bl	8008504 <__malloc_lock>
 8008600:	4a1d      	ldr	r2, [pc, #116]	@ (8008678 <_free_r+0x90>)
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	b933      	cbnz	r3, 8008614 <_free_r+0x2c>
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	6014      	str	r4, [r2, #0]
 800860a:	4628      	mov	r0, r5
 800860c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008610:	f7ff bf7e 	b.w	8008510 <__malloc_unlock>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d908      	bls.n	800862a <_free_r+0x42>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	1821      	adds	r1, r4, r0
 800861c:	428b      	cmp	r3, r1
 800861e:	bf01      	itttt	eq
 8008620:	6819      	ldreq	r1, [r3, #0]
 8008622:	685b      	ldreq	r3, [r3, #4]
 8008624:	1809      	addeq	r1, r1, r0
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	e7ed      	b.n	8008606 <_free_r+0x1e>
 800862a:	461a      	mov	r2, r3
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b10b      	cbz	r3, 8008634 <_free_r+0x4c>
 8008630:	42a3      	cmp	r3, r4
 8008632:	d9fa      	bls.n	800862a <_free_r+0x42>
 8008634:	6811      	ldr	r1, [r2, #0]
 8008636:	1850      	adds	r0, r2, r1
 8008638:	42a0      	cmp	r0, r4
 800863a:	d10b      	bne.n	8008654 <_free_r+0x6c>
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	4401      	add	r1, r0
 8008640:	1850      	adds	r0, r2, r1
 8008642:	4283      	cmp	r3, r0
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	d1e0      	bne.n	800860a <_free_r+0x22>
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	6053      	str	r3, [r2, #4]
 800864e:	4408      	add	r0, r1
 8008650:	6010      	str	r0, [r2, #0]
 8008652:	e7da      	b.n	800860a <_free_r+0x22>
 8008654:	d902      	bls.n	800865c <_free_r+0x74>
 8008656:	230c      	movs	r3, #12
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	e7d6      	b.n	800860a <_free_r+0x22>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	1821      	adds	r1, r4, r0
 8008660:	428b      	cmp	r3, r1
 8008662:	bf04      	itt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	bf04      	itt	eq
 800866c:	1809      	addeq	r1, r1, r0
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	6054      	str	r4, [r2, #4]
 8008672:	e7ca      	b.n	800860a <_free_r+0x22>
 8008674:	bd38      	pop	{r3, r4, r5, pc}
 8008676:	bf00      	nop
 8008678:	2000cc40 	.word	0x2000cc40

0800867c <_malloc_usable_size_r>:
 800867c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008680:	1f18      	subs	r0, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfbc      	itt	lt
 8008686:	580b      	ldrlt	r3, [r1, r0]
 8008688:	18c0      	addlt	r0, r0, r3
 800868a:	4770      	bx	lr

0800868c <_sbrk>:
 800868c:	4a04      	ldr	r2, [pc, #16]	@ (80086a0 <_sbrk+0x14>)
 800868e:	6811      	ldr	r1, [r2, #0]
 8008690:	4603      	mov	r3, r0
 8008692:	b909      	cbnz	r1, 8008698 <_sbrk+0xc>
 8008694:	4903      	ldr	r1, [pc, #12]	@ (80086a4 <_sbrk+0x18>)
 8008696:	6011      	str	r1, [r2, #0]
 8008698:	6810      	ldr	r0, [r2, #0]
 800869a:	4403      	add	r3, r0
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	4770      	bx	lr
 80086a0:	2000cc48 	.word	0x2000cc48
 80086a4:	2000cc50 	.word	0x2000cc50

080086a8 <_init>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr

080086b4 <_fini>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr
