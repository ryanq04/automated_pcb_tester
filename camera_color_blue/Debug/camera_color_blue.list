
camera_color_blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008520  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080086f0  080086f0  000096f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008944  08008944  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008944  08008944  00009944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800894c  0800894c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800894c  0800894c  0000994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008950  08008950  00009950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008954  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018fb0  2000005c  080089b0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001900c  080089b0  0000b00c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186d7  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333f  00000000  00000000  00022763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00025aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104e  00000000  00000000  00026f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024337  00000000  00000000  00027fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd70  00000000  00000000  0004c2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7614  00000000  00000000  0006805d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e48  00000000  00000000  0013f6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001454fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086d8 	.word	0x080086d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080086d8 	.word	0x080086d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_msg>:
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;


void print_msg(char * msg) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <print_msg+0x24>)
 80005c8:	f006 fd28 	bl	800701c <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000020c 	.word	0x2000020c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fbee 	bl	8007dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a22      	ldr	r2, [pc, #136]	@ (80006ac <SystemClock_Config+0xd4>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	@ 0xa8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fb3f 	bl	8005ce4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fa84 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fcb4 	bl	8004ffc <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 fa6d 	bl	8000b78 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
void MX_DCMI_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_DCMI_Init+0x64>)
 80006b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c8:	2280      	movs	r2, #128	@ 0x80
 80006ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006fe:	f001 fbb1 	bl	8001e64 <HAL_DCMI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fa36 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	50050000 	.word	0x50050000

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f003 fb1d 	bl	8003d94 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa0a 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000128 	.word	0x20000128
 800076c:	40005800 	.word	0x40005800
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b092      	sub	sp, #72	@ 0x48
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 fb12 	bl	8007dc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007a6:	4a33      	ldr	r2, [pc, #204]	@ (8000874 <MX_TIM1_Init+0x100>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b8:	2214      	movs	r2, #20
 80007ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ce:	4828      	ldr	r0, [pc, #160]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007d0:	f005 fd75 	bl	80062be <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f9cd 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ea:	4619      	mov	r1, r3
 80007ec:	4820      	ldr	r0, [pc, #128]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ee:	f006 fae3 	bl	8006db8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80007f8:	f000 f9be 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8000800:	230a      	movs	r3, #10
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000822:	f005 ff53 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800082c:	f000 f9a4 	bl	8000b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000854:	f006 fb2c 	bl	8006eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800085e:	f000 f98b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000862:	4803      	ldr	r0, [pc, #12]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000864:	f000 fd5c 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3748      	adds	r7, #72	@ 0x48
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000017c 	.word	0x2000017c
 8000874:	40010000 	.word	0x40010000

08000878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000888:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_TIM6_Init+0x68>)
 800088a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_TIM6_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM6_Init+0x64>)
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a8:	f005 fcba 	bl	8006220 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008b2:	f000 f961 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008c4:	f006 fa78 	bl	8006db8 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ce:	f000 f953 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001c4 	.word	0x200001c4
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f006 fb2e 	bl	8006f7c <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f927 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000020c 	.word	0x2000020c
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000942:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2206      	movs	r2, #6
 8000948:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	f004 fa04 	bl	8004d88 <HAL_PCD_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f8f7 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2039      	movs	r0, #57	@ 0x39
 80009bc:	f000 ffa9 	bl	8001912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009c0:	2039      	movs	r0, #57	@ 0x39
 80009c2:	f000 ffc2 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5d      	ldr	r2, [pc, #372]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b68 <MX_GPIO_Init+0x194>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4b57      	ldr	r3, [pc, #348]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a56      	ldr	r2, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b54      	ldr	r3, [pc, #336]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a48      	ldr	r2, [pc, #288]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b46      	ldr	r3, [pc, #280]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a41      	ldr	r2, [pc, #260]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b38      	ldr	r3, [pc, #224]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ad0:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000ad2:	f003 f907 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	4825      	ldr	r0, [pc, #148]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000adc:	f003 f902 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <MX_GPIO_Init+0x1a0>)
 8000af8:	f002 ff48 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000afc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000b16:	f002 ff39 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1a:	2340      	movs	r3, #64	@ 0x40
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000b32:	f002 ff2b 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000b4a:	f002 ff1f 	bl	800398c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2028      	movs	r0, #40	@ 0x28
 8000b54:	f000 fedd 	bl	8001912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	@ 0x28
 8000b5a:	f000 fef6 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	@ 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <send_img_rgb565>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img_rgb565(){
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a7      	sub	sp, #156	@ 0x9c
 8000b88:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; uint8_t end[] = "\r\nEND!\r\n";
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb8 <send_img_rgb565+0x134>)
 8000b8c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b92:	c407      	stmia	r4!, {r0, r1, r2}
 8000b94:	8023      	strh	r3, [r4, #0]
 8000b96:	4a49      	ldr	r2, [pc, #292]	@ (8000cbc <send_img_rgb565+0x138>)
 8000b98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b9e:	c303      	stmia	r3!, {r0, r1}
 8000ba0:	701a      	strb	r2, [r3, #0]
	char msg[100];
	
	uint16_t* byte_ptr = (uint16_t*)snapshot_buff;
 8000ba2:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <send_img_rgb565+0x13c>)
 8000ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	for (int i = FRAMESIZE - 1, j = 0; (i >= 0) && (j < FRAMESIZE * 2); i--, j += 2) {
 8000ba8:	f246 13df 	movw	r3, #25055	@ 0x61df
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000bb6:	e026      	b.n	8000c06 <send_img_rgb565+0x82>
		send_ptr_rgb[j+1] = (byte_ptr[i] >> 8) & 0xFF; //High byte
 8000bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000bc2:	4413      	add	r3, r2
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2d1      	uxtb	r1, r2
 8000bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc4 <send_img_rgb565+0x140>)
 8000bd4:	54d1      	strb	r1, [r2, r3]
		send_ptr_rgb[j] = byte_ptr[i] & 0xFF; // Low byte
 8000bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000be0:	4413      	add	r3, r2
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <send_img_rgb565+0x140>)
 8000be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bec:	4413      	add	r3, r2
 8000bee:	460a      	mov	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE - 1, j = 0; (i >= 0) && (j < FRAMESIZE * 2); i--, j += 2) {
 8000bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c00:	3302      	adds	r3, #2
 8000c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db05      	blt.n	8000c1a <send_img_rgb565+0x96>
 8000c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c12:	f24c 32bf 	movw	r2, #50111	@ 0xc3bf
 8000c16:	4293      	cmp	r3, r2
 8000c18:	ddce      	ble.n	8000bb8 <send_img_rgb565+0x34>
	}
	

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c20:	e00f      	b.n	8000c42 <send_img_rgb565+0xbe>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000c22:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c2a:	18d1      	adds	r1, r2, r3
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2201      	movs	r2, #1
 8000c32:	4825      	ldr	r0, [pc, #148]	@ (8000cc8 <send_img_rgb565+0x144>)
 8000c34:	f006 f9f2 	bl	800701c <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c46:	2b0c      	cmp	r3, #12
 8000c48:	ddeb      	ble.n	8000c22 <send_img_rgb565+0x9e>
	}

	for(int i = 0; i < FRAMESIZE*2; i++){
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c50:	e00e      	b.n	8000c70 <send_img_rgb565+0xec>
		HAL_UART_Transmit(&huart3, &send_ptr_rgb[i], 1, HAL_MAX_DELAY);
 8000c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c56:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <send_img_rgb565+0x140>)
 8000c58:	1899      	adds	r1, r3, r2
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4819      	ldr	r0, [pc, #100]	@ (8000cc8 <send_img_rgb565+0x144>)
 8000c62:	f006 f9db 	bl	800701c <HAL_UART_Transmit>
	for(int i = 0; i < FRAMESIZE*2; i++){
 8000c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c74:	f24c 32bf 	movw	r2, #50111	@ 0xc3bf
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	ddea      	ble.n	8000c52 <send_img_rgb565+0xce>
	}


	//SEND SUFFIX
	for(int i = 0; i < 7; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000c82:	e00f      	b.n	8000ca4 <send_img_rgb565+0x120>
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
 8000c84:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c8c:	18d1      	adds	r1, r2, r3
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	2201      	movs	r2, #1
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <send_img_rgb565+0x144>)
 8000c96:	f006 f9c1 	bl	800701c <HAL_UART_Transmit>
	for(int i = 0; i < 7; i++){
 8000c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	ddeb      	ble.n	8000c84 <send_img_rgb565+0x100>
	}

}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	379c      	adds	r7, #156	@ 0x9c
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800876c 	.word	0x0800876c
 8000cbc:	0800877c 	.word	0x0800877c
 8000cc0:	20000738 	.word	0x20000738
 8000cc4:	2000caf8 	.word	0x2000caf8
 8000cc8:	2000020c 	.word	0x2000020c

08000ccc <p4>:
		//send_cb_image();
		//send_img_rgb();
		send_img_rgb565();
}

void p4(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	while(1){
		HAL_DCMI_Suspend(&hdcmi);
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <p4+0x3c>)
 8000cd2:	f000 fef5 	bl	8001ac0 <HAL_DCMI_Suspend>
		ov7670_capture(snapshot_buff);
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <p4+0x40>)
 8000cd8:	f000 f92e 	bl	8000f38 <ov7670_capture>
		while(!dma_flag)
 8000cdc:	e002      	b.n	8000ce4 <p4+0x18>
		{
			HAL_Delay(10);	
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 fd18 	bl	8001714 <HAL_Delay>
		while(!dma_flag)
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <p4+0x44>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f8      	beq.n	8000cde <p4+0x12>
		}
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000cec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <p4+0x48>)
 8000cf2:	f003 f810 	bl	8003d16 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <p4+0x44>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		HAL_DCMI_Resume(&hdcmi);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <p4+0x3c>)
 8000cfe:	f000 ff33 	bl	8001b68 <HAL_DCMI_Resume>
		//send_img();
		send_img_rgb565();
 8000d02:	f7ff ff3f 	bl	8000b84 <send_img_rgb565>
		HAL_DCMI_Suspend(&hdcmi);
 8000d06:	e7e3      	b.n	8000cd0 <p4+0x4>
 8000d08:	20000078 	.word	0x20000078
 8000d0c:	20000738 	.word	0x20000738
 8000d10:	20018eb8 	.word	0x20018eb8
 8000d14:	40020400 	.word	0x40020400

08000d18 <main>:




int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09a      	sub	sp, #104	@ 0x68
 8000d1c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  HAL_Init();
 8000d1e:	f000 fc87 	bl	8001630 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f7ff fc59 	bl	80005d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f7ff fe55 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2a:	f7ff fe33 	bl	8000994 <MX_DMA_Init>
  MX_DCMI_Init();
 8000d2e:	f7ff fcbf 	bl	80006b0 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000d32:	f7ff fdd7 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d36:	f7ff fdff 	bl	8000938 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000d3a:	f7ff fced 	bl	8000718 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d3e:	f7ff fd19 	bl	8000774 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000d42:	f7ff fd99 	bl	8000878 <MX_TIM6_Init>
	
	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <main+0x88>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <main+0x88>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0210 	orr.w	r2, r2, #16
 8000d54:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d56:	2039      	movs	r0, #57	@ 0x39
 8000d58:	f000 fdf7 	bl	800194a <HAL_NVIC_EnableIRQ>

  char msg[100];
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <main+0x8c>)
 8000d60:	f005 fafc 	bl	800635c <HAL_TIM_PWM_Start>
  ov7670_init();
 8000d64:	f000 f824 	bl	8000db0 <ov7670_init>
	ov7_config();
 8000d68:	f000 f854 	bl	8000e14 <ov7_config>


  while (1)
  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	480e      	ldr	r0, [pc, #56]	@ (8000da8 <main+0x90>)
 8000d70:	f002 ffd1 	bl	8003d16 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	@ 0x64
 8000d76:	f000 fccd 	bl	8001714 <HAL_Delay>
    
    if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	480b      	ldr	r0, [pc, #44]	@ (8000dac <main+0x94>)
 8000d80:	f002 ff98 	bl	8003cb4 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f0      	beq.n	8000d6c <main+0x54>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d8a:	2180      	movs	r1, #128	@ 0x80
 8000d8c:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <main+0x90>)
 8000d8e:	f002 ffc2 	bl	8003d16 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000d92:	2064      	movs	r0, #100	@ 0x64
 8000d94:	f000 fcbe 	bl	8001714 <HAL_Delay>
			
			//p3();
			p4();
 8000d98:	f7ff ff98 	bl	8000ccc <p4>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d9c:	e7e6      	b.n	8000d6c <main+0x54>
 8000d9e:	bf00      	nop
 8000da0:	200000c8 	.word	0x200000c8
 8000da4:	2000017c 	.word	0x2000017c
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800

08000db0 <ov7670_init>:

{ 0xFF, 0xFF }    // End marker
};


uint8_t ov7670_init(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	@ 0x68
 8000db4:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <ov7670_init+0x58>)
 8000db8:	f7ff fbfa 	bl	80005b0 <print_msg>
  val = ov7670_read(0x0A);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f000 f875 	bl	8000eac <ov7670_read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8000dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dcc:	2b76      	cmp	r3, #118	@ 0x76
 8000dce:	d00c      	beq.n	8000dea <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000dd0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <ov7670_init+0x5c>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 ffd5 	bl	8007d88 <siprintf>
    print_msg(msg);
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fbe5 	bl	80005b0 <print_msg>
    return 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e009      	b.n	8000dfe <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8000dea:	463b      	mov	r3, r7
 8000dec:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <ov7670_init+0x60>)
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 ffca 	bl	8007d88 <siprintf>
    print_msg(msg);
 8000df4:	463b      	mov	r3, r7
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbda 	bl	80005b0 <print_msg>

  // Your code here

  //

  return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3768      	adds	r7, #104	@ 0x68
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08008788 	.word	0x08008788
 8000e0c:	08008794 	.word	0x08008794
 8000e10:	080087b0 	.word	0x080087b0

08000e14 <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e037      	b.n	8000e90 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8000e20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea0 <ov7_config+0x8c>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e28:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8000e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <ov7_config+0x8c>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8000e36:	463a      	mov	r2, r7
 8000e38:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2302      	movs	r3, #2
 8000e40:	2142      	movs	r1, #66	@ 0x42
 8000e42:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <ov7_config+0x90>)
 8000e44:	f003 f8ea 	bl	800401c <HAL_I2C_Master_Transmit>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8000e4c:	e017      	b.n	8000e7e <ov7_config+0x6a>
			 sprintf(msg, "Error\n");
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4915      	ldr	r1, [pc, #84]	@ (8000ea8 <ov7_config+0x94>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 ff98 	bl	8007d88 <siprintf>
       print_msg(msg);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fba8 	bl	80005b0 <print_msg>
       HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e64:	f000 fc56 	bl	8001714 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8000e68:	463a      	mov	r2, r7
 8000e6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2302      	movs	r3, #2
 8000e72:	2142      	movs	r1, #66	@ 0x42
 8000e74:	480b      	ldr	r0, [pc, #44]	@ (8000ea4 <ov7_config+0x90>)
 8000e76:	f003 f8d1 	bl	800401c <HAL_I2C_Master_Transmit>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8000e7e:	7efb      	ldrb	r3, [r7, #27]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e4      	bne.n	8000e4e <ov7_config+0x3a>
    }
		HAL_Delay(10);
 8000e84:	200a      	movs	r0, #10
 8000e86:	f000 fc45 	bl	8001714 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b60      	cmp	r3, #96	@ 0x60
 8000e94:	ddc4      	ble.n	8000e20 <ov7_config+0xc>
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	0800882c 	.word	0x0800882c
 8000ea4:	20000128 	.word	0x20000128
 8000ea8:	08008810 	.word	0x08008810

08000eac <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09e      	sub	sp, #120	@ 0x78
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8000eb6:	1dfa      	adds	r2, r7, #7
 8000eb8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2142      	movs	r1, #66	@ 0x42
 8000ec2:	481b      	ldr	r0, [pc, #108]	@ (8000f30 <ov7670_read+0x84>)
 8000ec4:	f003 f8aa 	bl	800401c <HAL_I2C_Master_Transmit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8000ece:	e01a      	b.n	8000f06 <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4917      	ldr	r1, [pc, #92]	@ (8000f34 <ov7670_read+0x88>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 ff56 	bl	8007d88 <siprintf>
       print_msg(msg);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb65 	bl	80005b0 <print_msg>
       HAL_Delay(1000);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eea:	f000 fc13 	bl	8001714 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2142      	movs	r1, #66	@ 0x42
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <ov7670_read+0x84>)
 8000efc:	f003 f88e 	bl	800401c <HAL_I2C_Master_Transmit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8000f06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e0      	bne.n	8000ed0 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (ADDR_OV7670+1), &data, 1, HAL_MAX_DELAY);
 8000f0e:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	2143      	movs	r1, #67	@ 0x43
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <ov7670_read+0x84>)
 8000f1e:	f003 f97b 	bl	8004218 <HAL_I2C_Master_Receive>
    return data;
 8000f22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3770      	adds	r7, #112	@ 0x70
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000128 	.word	0x20000128
 8000f34:	08008810 	.word	0x08008810

08000f38 <ov7670_capture>:
			 sprintf(msg, "Error DMA failed\n");
       print_msg(msg);
    }
}//goes back to main for waiting for interrupt

void ov7670_capture(uint16_t *buff){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09c      	sub	sp, #112	@ 0x70
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 8000f40:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <ov7670_capture+0x44>)
 8000f42:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 8000f46:	2100      	movs	r1, #0
 8000f48:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <ov7670_capture+0x48>)
 8000f4a:	f000 fd19 	bl	8001980 <HAL_DCMI_Start_DMA>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 8000f54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <ov7670_capture+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <ov7670_capture+0x4c>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 ff10 	bl	8007d88 <siprintf>
       print_msg(msg);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb1f 	bl	80005b0 <print_msg>
    }
}
 8000f72:	bf00      	nop
 8000f74:	3770      	adds	r7, #112	@ 0x70
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000738 	.word	0x20000738
 8000f80:	20000078 	.word	0x20000078
 8000f84:	08008818 	.word	0x08008818

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fc98 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	@ 0x38
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a78      	ldr	r2, [pc, #480]	@ (80011d8 <HAL_DCMI_MspInit+0x200>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f040 80e9 	bne.w	80011ce <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	4b76      	ldr	r3, [pc, #472]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001004:	4a75      	ldr	r2, [pc, #468]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6353      	str	r3, [r2, #52]	@ 0x34
 800100c:	4b73      	ldr	r3, [pc, #460]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800100e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	4b6f      	ldr	r3, [pc, #444]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	4a6e      	ldr	r2, [pc, #440]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6313      	str	r3, [r2, #48]	@ 0x30
 8001028:	4b6c      	ldr	r3, [pc, #432]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	4a67      	ldr	r2, [pc, #412]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6313      	str	r3, [r2, #48]	@ 0x30
 8001044:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	4a60      	ldr	r2, [pc, #384]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001060:	4b5e      	ldr	r3, [pc, #376]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	4b5a      	ldr	r3, [pc, #360]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a59      	ldr	r2, [pc, #356]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 8001092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001096:	6313      	str	r3, [r2, #48]	@ 0x30
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <HAL_DCMI_MspInit+0x204>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010a4:	2370      	movs	r3, #112	@ 0x70
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b4:	230d      	movs	r3, #13
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	4848      	ldr	r0, [pc, #288]	@ (80011e0 <HAL_DCMI_MspInit+0x208>)
 80010c0:	f002 fc64 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010c4:	2350      	movs	r3, #80	@ 0x50
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d4:	230d      	movs	r3, #13
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4841      	ldr	r0, [pc, #260]	@ (80011e4 <HAL_DCMI_MspInit+0x20c>)
 80010e0:	f002 fc54 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4839      	ldr	r0, [pc, #228]	@ (80011e8 <HAL_DCMI_MspInit+0x210>)
 8001102:	f002 fc43 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001106:	2308      	movs	r3, #8
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001116:	230d      	movs	r3, #13
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4832      	ldr	r0, [pc, #200]	@ (80011ec <HAL_DCMI_MspInit+0x214>)
 8001122:	f002 fc33 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001138:	230d      	movs	r3, #13
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	482b      	ldr	r0, [pc, #172]	@ (80011f0 <HAL_DCMI_MspInit+0x218>)
 8001144:	f002 fc22 	bl	800398c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001148:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800114a:	4a2b      	ldr	r2, [pc, #172]	@ (80011f8 <HAL_DCMI_MspInit+0x220>)
 800114c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800114e:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001154:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001168:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800116c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001170:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001174:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001178:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800117c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001180:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001184:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001188:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800118c:	2204      	movs	r2, #4
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001192:	2203      	movs	r2, #3
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 80011a4:	f000 fed8 	bl	8001f58 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 80011ae:	f7ff fce3 	bl	8000b78 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 80011b6:	649a      	str	r2, [r3, #72]	@ 0x48
 80011b8:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <HAL_DCMI_MspInit+0x21c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	204e      	movs	r0, #78	@ 0x4e
 80011c4:	f000 fba5 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80011c8:	204e      	movs	r0, #78	@ 0x4e
 80011ca:	f000 fbbe 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	@ 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50050000 	.word	0x50050000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021800 	.word	0x40021800
 80011f4:	200000c8 	.word	0x200000c8
 80011f8:	40026428 	.word	0x40026428

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <HAL_I2C_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12b      	bne.n	8001276 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800123a:	2303      	movs	r3, #3
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001242:	2301      	movs	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800124a:	2304      	movs	r3, #4
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <HAL_I2C_MspInit+0x8c>)
 8001256:	f002 fb99 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 8001264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_I2C_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005800 	.word	0x40005800
 8001284:	40023800 	.word	0x40023800
 8001288:	40021400 	.word	0x40021400

0800128c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10d      	bne.n	80012ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_TIM_PWM_MspInit+0x40>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <HAL_TIM_PWM_MspInit+0x40>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_TIM_PWM_MspInit+0x40>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <HAL_TIM_Base_MspInit+0x48>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d115      	bne.n	800130e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_TIM_Base_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <HAL_TIM_Base_MspInit+0x4c>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_TIM_Base_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2036      	movs	r0, #54	@ 0x36
 8001304:	f000 fb05 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001308:	2036      	movs	r0, #54	@ 0x36
 800130a:	f000 fb1e 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40001000 	.word	0x40001000
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <HAL_TIM_MspPostInit+0x68>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11e      	bne.n	8001380 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_TIM_MspPostInit+0x6c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	@ (800138c <HAL_TIM_MspPostInit+0x6c>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_TIM_MspPostInit+0x6c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800135e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001362:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_TIM_MspPostInit+0x70>)
 800137c:	f002 fb06 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40010000 	.word	0x40010000
 800138c:	40023800 	.word	0x40023800
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_UART_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12c      	bne.n	8001410 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001400:	2307      	movs	r3, #7
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <HAL_UART_MspInit+0x8c>)
 800140c:	f002 fabe 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00

08001424 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0a0      	sub	sp, #128	@ 0x80
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	225c      	movs	r2, #92	@ 0x5c
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f006 fcbf 	bl	8007dc8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001452:	d14e      	bne.n	80014f2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800145a:	2300      	movs	r3, #0
 800145c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fee4 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800146e:	f7ff fb83 	bl	8000b78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800148e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001492:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a0:	230a      	movs	r3, #10
 80014a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <HAL_PCD_MspInit+0xdc>)
 80014ac:	f002 fa6e 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	@ (8001500 <HAL_PCD_MspInit+0xdc>)
 80014c6:	f002 fa61 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 80014cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_PCD_MspInit+0xd8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3780      	adds	r7, #128	@ 0x80
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f8bb 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}

08001562 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001566:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800156a:	f002 fbef 	bl	8003d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <TIM6_DAC_IRQHandler+0x10>)
 800157a:	f004 ffb7 	bl	80064ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001c4 	.word	0x200001c4

08001588 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <DMA2_Stream1_IRQHandler+0x14>)
 800158e:	f000 fe0b 	bl	80021a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8001592:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <DMA2_Stream1_IRQHandler+0x18>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200000c8 	.word	0x200000c8
 80015a0:	20018eb8 	.word	0x20018eb8

080015a4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <DCMI_IRQHandler+0x10>)
 80015aa:	f000 fb09 	bl	8001bc0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000078 	.word	0x20000078

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e0:	f7ff ffea 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160a:	f006 fbe5 	bl	8007dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fb83 	bl	8000d18 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001620:	08008954 	.word	0x08008954
  ldr r2, =_sbss
 8001624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001628:	2001900c 	.word	0x2001900c

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f94f 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fc90 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f967 	bl	8001966 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f92f 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20018ebc 	.word	0x20018ebc

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20018ebc 	.word	0x20018ebc

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	@ (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	@ (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	@ (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	@ 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	@ 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_DCMI_Start_DMA+0x20>
 800199c:	2302      	movs	r3, #2
 800199e:	e086      	b.n	8001aae <HAL_DCMI_Start_DMA+0x12e>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019be:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0202 	bic.w	r2, r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e4:	4a34      	ldr	r2, [pc, #208]	@ (8001ab8 <HAL_DCMI_Start_DMA+0x138>)
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ec:	4a33      	ldr	r2, [pc, #204]	@ (8001abc <HAL_DCMI_Start_DMA+0x13c>)
 80019ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f4:	2200      	movs	r2, #0
 80019f6:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0a:	d20a      	bcs.n	8001a22 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3328      	adds	r3, #40	@ 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f000 fb4a 	bl	80020b4 <HAL_DMA_Start_IT>
 8001a20:	e038      	b.n	8001a94 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_DCMI_Start_DMA+0x138>)
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001a3c:	e009      	b.n	8001a52 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a42:	085a      	lsrs	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5a:	d2f0      	bcs.n	8001a3e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a60:	1e9a      	subs	r2, r3, #2
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3328      	adds	r3, #40	@ 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	f000 fdf4 	bl	800267c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	08001d0d 	.word	0x08001d0d
 8001abc:	08001e37 	.word	0x08001e37

08001ac0 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_DCMI_Suspend+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	4a25      	ldr	r2, [pc, #148]	@ (8001b64 <HAL_DCMI_Suspend+0xa4>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_DCMI_Suspend+0x2a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e033      	b.n	8001b52 <HAL_DCMI_Suspend+0x92>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d124      	bne.n	8001b48 <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2205      	movs	r2, #5
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10c      	bne.n	8001b3a <HAL_DCMI_Suspend+0x7a>
      {        
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        status = HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	73fb      	strb	r3, [r7, #15]
        break;
 8001b38:	e006      	b.n	8001b48 <HAL_DCMI_Suspend+0x88>
      }
    }
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e6      	bne.n	8001b16 <HAL_DCMI_Suspend+0x56>
  }    
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Return function status */
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000
 8001b64:	92492493 	.word	0x92492493

08001b68 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_DCMI_Resume+0x16>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e01a      	b.n	8001bb4 <HAL_DCMI_Resume+0x4c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10b      	bne.n	8001baa <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  } 
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d016      	beq.n	8001c08 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <HAL_DCMI_IRQHandler+0xf8>)
 8001bfc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 faae 	bl	8002164 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <HAL_DCMI_IRQHandler+0xf8>)
 8001c34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fa92 	bl	8002164 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f83c 	bl	8001cd0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2208      	movs	r2, #8
 8001c68:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f83a 	bl	8001ce4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d107      	bne.n	8001c98 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 021e 	bic.w	r2, r2, #30
 8001c96:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f825 	bl	8001cf8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08001e37 	.word	0x08001e37

08001cbc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d043      	beq.n	8001dae <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d32:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d118      	bne.n	8001d72 <DCMI_DMAXferCplt+0x66>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d015      	beq.n	8001d72 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	00da      	lsls	r2, r3, #3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	f001 fdd3 	bl	800390c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d70:	e044      	b.n	8001dfc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13c      	bne.n	8001dfc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	00da      	lsls	r2, r3, #3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f001 fdb5 	bl	800390c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dac:	e026      	b.n	8001dfc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	e017      	b.n	8001dfc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	0099      	lsls	r1, r3, #2
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	440a      	add	r2, r1
 8001df2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d112      	bne.n	8001e2e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d103      	bne.n	8001e2e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d003      	beq.n	8001e56 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff ff30 	bl	8001cbc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e069      	b.n	8001f4a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff f8a4 	bl	8000fd8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f8a1 	bl	8000fd8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f54 <HAL_DCMI_Init+0xf0>)
 8001eaa:	400b      	ands	r3, r1
 8001eac:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ec2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001ece:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001eda:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8001ee6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ef2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	d112      	bne.n	8001f2a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f1b      	ldrb	r3, [r3, #28]
 8001f08:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7f5b      	ldrb	r3, [r3, #29]
 8001f0e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f10:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f9b      	ldrb	r3, [r3, #30]
 8001f16:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001f18:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7fdb      	ldrb	r3, [r3, #31]
 8001f20:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001f26:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001f28:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 021e 	orr.w	r2, r2, #30
 8001f38:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	ffe0f007 	.word	0xffe0f007

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff fbca 	bl	80016fc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e099      	b.n	80020a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e00f      	b.n	8001fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff fbb1 	bl	80016fc <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d908      	bls.n	8001fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e078      	b.n	80020a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e8      	bne.n	8001f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <HAL_DMA_Init+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	2b04      	cmp	r3, #4
 8002048:	d117      	bne.n	800207a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fa91 	bl	8002584 <DMA_CheckFifoParam>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002076:	2301      	movs	r3, #1
 8002078:	e016      	b.n	80020a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa48 	bl	8002518 <DMA_CalcBaseAndBitshift>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	223f      	movs	r2, #63	@ 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	f010803f 	.word	0xf010803f

080020b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x26>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e040      	b.n	800215c <HAL_DMA_Start_IT+0xa8>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12f      	bne.n	800214e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f9da 	bl	80024bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	223f      	movs	r2, #63	@ 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0216 	orr.w	r2, r2, #22
 8002122:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e005      	b.n	800215a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00c      	b.n	800219c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2205      	movs	r2, #5
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b4:	4b8e      	ldr	r3, [pc, #568]	@ (80023f0 <HAL_DMA_IRQHandler+0x248>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a8e      	ldr	r2, [pc, #568]	@ (80023f4 <HAL_DMA_IRQHandler+0x24c>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a9b      	lsrs	r3, r3, #10
 80021c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	2208      	movs	r2, #8
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01a      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	2208      	movs	r2, #8
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d012      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2201      	movs	r2, #1
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2204      	movs	r2, #4
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	2204      	movs	r2, #4
 800226e:	409a      	lsls	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	2210      	movs	r2, #16
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d043      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03c      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	2210      	movs	r2, #16
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e01f      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
 80022e8:	e016      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	2220      	movs	r2, #32
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 808f 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8087 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	2220      	movs	r2, #32
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b05      	cmp	r3, #5
 8002350:	d136      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0216 	bic.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_DMA_IRQHandler+0x1da>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	223f      	movs	r2, #63	@ 0x3f
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d07e      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
        }
        return;
 80023be:	e079      	b.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e02c      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000
 80023f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
 8002408:	e01e      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10f      	bne.n	8002438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0210 	bic.w	r2, r2, #16
 8002426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	d307      	bcc.n	8002490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f2      	bne.n	8002474 <HAL_DMA_IRQHandler+0x2cc>
 800248e:	e000      	b.n	8002492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024b4:	bf00      	nop
    }
  }
}
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b40      	cmp	r3, #64	@ 0x40
 80024e8:	d108      	bne.n	80024fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024fa:	e007      	b.n	800250c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3b10      	subs	r3, #16
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <DMA_CalcBaseAndBitshift+0x64>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002532:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <DMA_CalcBaseAndBitshift+0x68>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d909      	bls.n	800255a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	@ 0x58
 8002558:	e007      	b.n	800256a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	aaaaaaab 	.word	0xaaaaaaab
 8002580:	08008908 	.word	0x08008908

08002584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11f      	bne.n	80025de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d856      	bhi.n	8002652 <DMA_CheckFifoParam+0xce>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <DMA_CheckFifoParam+0x28>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	080025cf 	.word	0x080025cf
 80025b4:	080025bd 	.word	0x080025bd
 80025b8:	08002653 	.word	0x08002653
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d046      	beq.n	8002656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e043      	b.n	8002656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d6:	d140      	bne.n	800265a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e03d      	b.n	800265a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e6:	d121      	bne.n	800262c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d837      	bhi.n	800265e <DMA_CheckFifoParam+0xda>
 80025ee:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <DMA_CheckFifoParam+0x70>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002605 	.word	0x08002605
 80025f8:	0800260b 	.word	0x0800260b
 80025fc:	08002605 	.word	0x08002605
 8002600:	0800261d 	.word	0x0800261d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e030      	b.n	800266c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d025      	beq.n	8002662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261a:	e022      	b.n	8002662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002624:	d11f      	bne.n	8002666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800262a:	e01c      	b.n	8002666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d903      	bls.n	800263a <DMA_CheckFifoParam+0xb6>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d003      	beq.n	8002640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002638:	e018      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
      break;
 800263e:	e015      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e00b      	b.n	800266a <DMA_CheckFifoParam+0xe6>
      break;
 8002652:	bf00      	nop
 8002654:	e00a      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e008      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e006      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e004      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
 8002664:	e002      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;   
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
    }
  } 
  
  return status; 
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b80      	cmp	r3, #128	@ 0x80
 8002694:	d106      	bne.n	80026a4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f001 b911 	b.w	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f001 b8ff 	b.w	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80026d2:	2302      	movs	r3, #2
 80026d4:	f001 b8f7 	b.w	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f041 80e5 	bne.w	80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800270a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f001 f910 	bl	8003940 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b8d      	ldr	r3, [pc, #564]	@ (800295c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d960      	bls.n	80027ee <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a8b      	ldr	r2, [pc, #556]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d057      	beq.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a8a      	ldr	r2, [pc, #552]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d050      	beq.n	80027e2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a88      	ldr	r2, [pc, #544]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d049      	beq.n	80027de <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a87      	ldr	r2, [pc, #540]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d042      	beq.n	80027da <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a85      	ldr	r2, [pc, #532]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03a      	beq.n	80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a84      	ldr	r2, [pc, #528]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d032      	beq.n	80027ce <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a82      	ldr	r2, [pc, #520]	@ (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02a      	beq.n	80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a81      	ldr	r2, [pc, #516]	@ (800297c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7f      	ldr	r2, [pc, #508]	@ (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01a      	beq.n	80027bc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7e      	ldr	r2, [pc, #504]	@ (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d012      	beq.n	80027b6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a7c      	ldr	r2, [pc, #496]	@ (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00a      	beq.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7b      	ldr	r2, [pc, #492]	@ (800298c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d102      	bne.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80027a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027a8:	e01e      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80027ae:	e01b      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027b4:	e018      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027ba:	e015      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027c0:	e012      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027c6:	e00f      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027cc:	e00c      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027d2:	e009      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027d8:	e006      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027da:	2320      	movs	r3, #32
 80027dc:	e004      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027de:	2320      	movs	r3, #32
 80027e0:	e002      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027e2:	2320      	movs	r3, #32
 80027e4:	e000      	b.n	80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80027e6:	2320      	movs	r3, #32
 80027e8:	4a69      	ldr	r2, [pc, #420]	@ (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80027ea:	60d3      	str	r3, [r2, #12]
 80027ec:	e14f      	b.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d960      	bls.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d057      	beq.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d050      	beq.n	80028b0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a55      	ldr	r2, [pc, #340]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d049      	beq.n	80028ac <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a53      	ldr	r2, [pc, #332]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d042      	beq.n	80028a8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a52      	ldr	r2, [pc, #328]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03a      	beq.n	80028a2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a50      	ldr	r2, [pc, #320]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d032      	beq.n	800289c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4f      	ldr	r2, [pc, #316]	@ (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d02a      	beq.n	8002896 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4d      	ldr	r2, [pc, #308]	@ (800297c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d022      	beq.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01a      	beq.n	800288a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4a      	ldr	r2, [pc, #296]	@ (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d012      	beq.n	8002884 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a49      	ldr	r2, [pc, #292]	@ (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00a      	beq.n	800287e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a47      	ldr	r2, [pc, #284]	@ (800298c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002872:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002876:	e01e      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800287c:	e01b      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800287e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002882:	e018      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002884:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002888:	e015      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800288a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800288e:	e012      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002890:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002894:	e00f      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800289a:	e00c      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800289c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028a0:	e009      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80028a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028a6:	e006      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80028a8:	2320      	movs	r3, #32
 80028aa:	e004      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80028ac:	2320      	movs	r3, #32
 80028ae:	e002      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80028b0:	2320      	movs	r3, #32
 80028b2:	e000      	b.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80028b4:	2320      	movs	r3, #32
 80028b6:	4a36      	ldr	r2, [pc, #216]	@ (8002990 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80028b8:	6093      	str	r3, [r2, #8]
 80028ba:	e0e8      	b.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b35      	ldr	r3, [pc, #212]	@ (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f240 8082 	bls.w	80029ce <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d078      	beq.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d071      	beq.n	80029c2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d06a      	beq.n	80029be <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d063      	beq.n	80029ba <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d05b      	beq.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d053      	beq.n	80029ae <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04b      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	@ (800297c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d043      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d03b      	beq.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d012      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00a      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a13      	ldr	r2, [pc, #76]	@ (800298c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002942:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002946:	e03f      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002948:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800294c:	e03c      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800294e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002952:	e039      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002954:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002958:	e036      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800295a:	bf00      	nop
 800295c:	40026458 	.word	0x40026458
 8002960:	40026010 	.word	0x40026010
 8002964:	40026410 	.word	0x40026410
 8002968:	40026070 	.word	0x40026070
 800296c:	40026470 	.word	0x40026470
 8002970:	40026028 	.word	0x40026028
 8002974:	40026428 	.word	0x40026428
 8002978:	40026088 	.word	0x40026088
 800297c:	40026488 	.word	0x40026488
 8002980:	40026040 	.word	0x40026040
 8002984:	40026440 	.word	0x40026440
 8002988:	400260a0 	.word	0x400260a0
 800298c:	400264a0 	.word	0x400264a0
 8002990:	40026400 	.word	0x40026400
 8002994:	400260b8 	.word	0x400260b8
 8002998:	40026058 	.word	0x40026058
 800299c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029a0:	e012      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029a6:	e00f      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029ac:	e00c      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029b2:	e009      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029b8:	e006      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029ba:	2320      	movs	r3, #32
 80029bc:	e004      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029be:	2320      	movs	r3, #32
 80029c0:	e002      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029c2:	2320      	movs	r3, #32
 80029c4:	e000      	b.n	80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80029c6:	2320      	movs	r3, #32
 80029c8:	4a8c      	ldr	r2, [pc, #560]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80029ca:	60d3      	str	r3, [r2, #12]
 80029cc:	e05f      	b.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a8b      	ldr	r2, [pc, #556]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d057      	beq.n	8002a88 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a89      	ldr	r2, [pc, #548]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d050      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a88      	ldr	r2, [pc, #544]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d049      	beq.n	8002a80 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a86      	ldr	r2, [pc, #536]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d042      	beq.n	8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a85      	ldr	r2, [pc, #532]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d03a      	beq.n	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d032      	beq.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a82      	ldr	r2, [pc, #520]	@ (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02a      	beq.n	8002a6a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a80      	ldr	r2, [pc, #512]	@ (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d022      	beq.n	8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7f      	ldr	r2, [pc, #508]	@ (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d01a      	beq.n	8002a5e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d012      	beq.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7c      	ldr	r2, [pc, #496]	@ (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00a      	beq.n	8002a52 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7a      	ldr	r2, [pc, #488]	@ (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d102      	bne.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002a46:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a4a:	e01e      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a50:	e01b      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a52:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a56:	e018      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a5c:	e015      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a5e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a62:	e012      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a68:	e00f      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a6e:	e00c      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a74:	e009      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a7a:	e006      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a80:	2320      	movs	r3, #32
 8002a82:	e002      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a84:	2320      	movs	r3, #32
 8002a86:	e000      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002a88:	2320      	movs	r3, #32
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002a8c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b66      	ldr	r3, [pc, #408]	@ (8002c30 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d960      	bls.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d057      	beq.n	8002b54 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a56      	ldr	r2, [pc, #344]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d050      	beq.n	8002b50 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a55      	ldr	r2, [pc, #340]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d049      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a53      	ldr	r2, [pc, #332]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d042      	beq.n	8002b48 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a52      	ldr	r2, [pc, #328]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d03a      	beq.n	8002b42 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a50      	ldr	r2, [pc, #320]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d032      	beq.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d02a      	beq.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4c      	ldr	r2, [pc, #304]	@ (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01a      	beq.n	8002b2a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d012      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a49      	ldr	r2, [pc, #292]	@ (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00a      	beq.n	8002b1e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a47      	ldr	r2, [pc, #284]	@ (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d102      	bne.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002b12:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b16:	e01e      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b18:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b1c:	e01b      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b22:	e018      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b28:	e015      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b2a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b2e:	e012      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b34:	e00f      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b3a:	e00c      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b40:	e009      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b46:	e006      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	e004      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	e002      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b50:	2310      	movs	r3, #16
 8002b52:	e000      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002b54:	2310      	movs	r3, #16
 8002b56:	4a37      	ldr	r2, [pc, #220]	@ (8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002b58:	60d3      	str	r3, [r2, #12]
 8002b5a:	e14f      	b.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f240 8082 	bls.w	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d078      	beq.n	8002c66 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d071      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d06a      	beq.n	8002c5e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d063      	beq.n	8002c5a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d05b      	beq.n	8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d053      	beq.n	8002c4e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04b      	beq.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d043      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a18      	ldr	r2, [pc, #96]	@ (8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d012      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	@ (8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00a      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d102      	bne.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002be2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002be6:	e03f      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002be8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bec:	e03c      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bf2:	e039      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bf8:	e036      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bfa:	bf00      	nop
 8002bfc:	40026000 	.word	0x40026000
 8002c00:	40026010 	.word	0x40026010
 8002c04:	40026410 	.word	0x40026410
 8002c08:	40026070 	.word	0x40026070
 8002c0c:	40026470 	.word	0x40026470
 8002c10:	40026028 	.word	0x40026028
 8002c14:	40026428 	.word	0x40026428
 8002c18:	40026088 	.word	0x40026088
 8002c1c:	40026488 	.word	0x40026488
 8002c20:	40026040 	.word	0x40026040
 8002c24:	40026440 	.word	0x40026440
 8002c28:	400260a0 	.word	0x400260a0
 8002c2c:	400264a0 	.word	0x400264a0
 8002c30:	40026458 	.word	0x40026458
 8002c34:	40026400 	.word	0x40026400
 8002c38:	400260b8 	.word	0x400260b8
 8002c3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c40:	e012      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c46:	e00f      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c4c:	e00c      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c52:	e009      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c58:	e006      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c5a:	2310      	movs	r3, #16
 8002c5c:	e004      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c5e:	2310      	movs	r3, #16
 8002c60:	e002      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c62:	2310      	movs	r3, #16
 8002c64:	e000      	b.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002c66:	2310      	movs	r3, #16
 8002c68:	4a8c      	ldr	r2, [pc, #560]	@ (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002c6a:	6093      	str	r3, [r2, #8]
 8002c6c:	e0c6      	b.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d960      	bls.n	8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a89      	ldr	r2, [pc, #548]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d057      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a87      	ldr	r2, [pc, #540]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d050      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a86      	ldr	r2, [pc, #536]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d049      	beq.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a84      	ldr	r2, [pc, #528]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d042      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a83      	ldr	r2, [pc, #524]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d03a      	beq.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a81      	ldr	r2, [pc, #516]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d032      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a80      	ldr	r2, [pc, #512]	@ (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02a      	beq.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7d      	ldr	r2, [pc, #500]	@ (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01a      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d012      	beq.n	8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00a      	beq.n	8002cfe <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a78      	ldr	r2, [pc, #480]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d102      	bne.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002cf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cf6:	e01e      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cf8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cfc:	e01b      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002cfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d02:	e018      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d08:	e015      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d0e:	e012      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d14:	e00f      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d1a:	e00c      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d20:	e009      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d26:	e006      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	e004      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	e002      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d30:	2310      	movs	r3, #16
 8002d32:	e000      	b.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002d34:	2310      	movs	r3, #16
 8002d36:	4a67      	ldr	r2, [pc, #412]	@ (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002d38:	60d3      	str	r3, [r2, #12]
 8002d3a:	e05f      	b.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d057      	beq.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d050      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a55      	ldr	r2, [pc, #340]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d049      	beq.n	8002dee <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a54      	ldr	r2, [pc, #336]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d042      	beq.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a52      	ldr	r2, [pc, #328]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d03a      	beq.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a51      	ldr	r2, [pc, #324]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d032      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02a      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01a      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a49      	ldr	r2, [pc, #292]	@ (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00a      	beq.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a48      	ldr	r2, [pc, #288]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002db4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002db8:	e01e      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002dbe:	e01b      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dc4:	e018      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dc6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dca:	e015      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dd0:	e012      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd6:	e00f      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ddc:	e00c      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002de2:	e009      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002de8:	e006      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dea:	2310      	movs	r3, #16
 8002dec:	e004      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002dee:	2310      	movs	r3, #16
 8002df0:	e002      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002df2:	2310      	movs	r3, #16
 8002df4:	e000      	b.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002df6:	2310      	movs	r3, #16
 8002df8:	4a36      	ldr	r2, [pc, #216]	@ (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002dfa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b35      	ldr	r3, [pc, #212]	@ (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f240 8082 	bls.w	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d078      	beq.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d071      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d06a      	beq.n	8002efe <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d063      	beq.n	8002efa <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d05b      	beq.n	8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d053      	beq.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04b      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d043      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a19      	ldr	r2, [pc, #100]	@ (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d012      	beq.n	8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00a      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d102      	bne.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002e82:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e86:	e03f      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e8c:	e03c      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e8e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e92:	e039      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e98:	e036      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e9a:	bf00      	nop
 8002e9c:	40026400 	.word	0x40026400
 8002ea0:	40026058 	.word	0x40026058
 8002ea4:	40026010 	.word	0x40026010
 8002ea8:	40026410 	.word	0x40026410
 8002eac:	40026070 	.word	0x40026070
 8002eb0:	40026470 	.word	0x40026470
 8002eb4:	40026028 	.word	0x40026028
 8002eb8:	40026428 	.word	0x40026428
 8002ebc:	40026088 	.word	0x40026088
 8002ec0:	40026488 	.word	0x40026488
 8002ec4:	40026040 	.word	0x40026040
 8002ec8:	40026440 	.word	0x40026440
 8002ecc:	400260a0 	.word	0x400260a0
 8002ed0:	400264a0 	.word	0x400264a0
 8002ed4:	40026000 	.word	0x40026000
 8002ed8:	40026458 	.word	0x40026458
 8002edc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002ee0:	e012      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee6:	e00f      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ee8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eec:	e00c      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ef2:	e009      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ef8:	e006      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002efa:	2308      	movs	r3, #8
 8002efc:	e004      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002efe:	2308      	movs	r3, #8
 8002f00:	e002      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e000      	b.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002f06:	2308      	movs	r3, #8
 8002f08:	4a8c      	ldr	r2, [pc, #560]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002f0a:	60d3      	str	r3, [r2, #12]
 8002f0c:	e14e      	b.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b8a      	ldr	r3, [pc, #552]	@ (8003140 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d960      	bls.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a89      	ldr	r2, [pc, #548]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d057      	beq.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a87      	ldr	r2, [pc, #540]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d050      	beq.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a86      	ldr	r2, [pc, #536]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d049      	beq.n	8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a84      	ldr	r2, [pc, #528]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d042      	beq.n	8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a83      	ldr	r2, [pc, #524]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03a      	beq.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a81      	ldr	r2, [pc, #516]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d032      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a80      	ldr	r2, [pc, #512]	@ (800315c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d02a      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a7e      	ldr	r2, [pc, #504]	@ (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01a      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a7b      	ldr	r2, [pc, #492]	@ (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d012      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7a      	ldr	r2, [pc, #488]	@ (800316c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00a      	beq.n	8002f9e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a78      	ldr	r2, [pc, #480]	@ (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d102      	bne.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002f92:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f96:	e01e      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9c:	e01b      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f9e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fa2:	e018      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fa8:	e015      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002faa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002fae:	e012      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fb4:	e00f      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fba:	e00c      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fc0:	e009      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fc6:	e006      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	e004      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	e002      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	4a59      	ldr	r2, [pc, #356]	@ (800313c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002fd8:	6093      	str	r3, [r2, #8]
 8002fda:	e0e7      	b.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d960      	bls.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a55      	ldr	r2, [pc, #340]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d057      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a54      	ldr	r2, [pc, #336]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d050      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d049      	beq.n	800309a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a51      	ldr	r2, [pc, #324]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d042      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4f      	ldr	r2, [pc, #316]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03a      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d032      	beq.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4c      	ldr	r2, [pc, #304]	@ (800315c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d02a      	beq.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4b      	ldr	r2, [pc, #300]	@ (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a49      	ldr	r2, [pc, #292]	@ (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01a      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a48      	ldr	r2, [pc, #288]	@ (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d012      	beq.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a46      	ldr	r2, [pc, #280]	@ (800316c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00a      	beq.n	800306c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a45      	ldr	r2, [pc, #276]	@ (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d102      	bne.n	8003066 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003060:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003064:	e01e      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800306a:	e01b      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800306c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003070:	e018      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003072:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003076:	e015      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003078:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800307c:	e012      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800307e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003082:	e00f      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003088:	e00c      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800308a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800308e:	e009      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003090:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003094:	e006      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003096:	2308      	movs	r3, #8
 8003098:	e004      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800309a:	2308      	movs	r3, #8
 800309c:	e002      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800309e:	2308      	movs	r3, #8
 80030a0:	e000      	b.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80030a2:	2308      	movs	r3, #8
 80030a4:	4a34      	ldr	r2, [pc, #208]	@ (8003178 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80030a6:	60d3      	str	r3, [r2, #12]
 80030a8:	e080      	b.n	80031ac <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a25      	ldr	r2, [pc, #148]	@ (8003144 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d078      	beq.n	80031a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	@ (8003148 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d071      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a22      	ldr	r2, [pc, #136]	@ (800314c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d06a      	beq.n	800319e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a20      	ldr	r2, [pc, #128]	@ (8003150 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d063      	beq.n	800319a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d05b      	beq.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d053      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04b      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003160 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d043      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d03b      	beq.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d012      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00a      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a14      	ldr	r2, [pc, #80]	@ (8003170 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d102      	bne.n	8003128 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003122:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003126:	e03f      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800312c:	e03c      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800312e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003132:	e039      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003134:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003138:	e036      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800313a:	bf00      	nop
 800313c:	40026400 	.word	0x40026400
 8003140:	400260b8 	.word	0x400260b8
 8003144:	40026010 	.word	0x40026010
 8003148:	40026410 	.word	0x40026410
 800314c:	40026070 	.word	0x40026070
 8003150:	40026470 	.word	0x40026470
 8003154:	40026028 	.word	0x40026028
 8003158:	40026428 	.word	0x40026428
 800315c:	40026088 	.word	0x40026088
 8003160:	40026488 	.word	0x40026488
 8003164:	40026040 	.word	0x40026040
 8003168:	40026440 	.word	0x40026440
 800316c:	400260a0 	.word	0x400260a0
 8003170:	400264a0 	.word	0x400264a0
 8003174:	40026058 	.word	0x40026058
 8003178:	40026000 	.word	0x40026000
 800317c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003180:	e012      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003186:	e00f      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800318c:	e00c      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800318e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003192:	e009      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003198:	e006      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800319a:	2308      	movs	r3, #8
 800319c:	e004      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800319e:	2308      	movs	r3, #8
 80031a0:	e002      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80031a2:	2308      	movs	r3, #8
 80031a4:	e000      	b.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80031a6:	2308      	movs	r3, #8
 80031a8:	4a8a      	ldr	r2, [pc, #552]	@ (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80031aa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b89      	ldr	r3, [pc, #548]	@ (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d960      	bls.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a87      	ldr	r2, [pc, #540]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d057      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a86      	ldr	r2, [pc, #536]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d050      	beq.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a84      	ldr	r2, [pc, #528]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d049      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a83      	ldr	r2, [pc, #524]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d042      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a81      	ldr	r2, [pc, #516]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d03a      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a80      	ldr	r2, [pc, #512]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d032      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7e      	ldr	r2, [pc, #504]	@ (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02a      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7d      	ldr	r2, [pc, #500]	@ (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7b      	ldr	r2, [pc, #492]	@ (80033fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01a      	beq.n	8003248 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7a      	ldr	r2, [pc, #488]	@ (8003400 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d012      	beq.n	8003242 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a78      	ldr	r2, [pc, #480]	@ (8003404 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00a      	beq.n	800323c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a77      	ldr	r2, [pc, #476]	@ (8003408 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d102      	bne.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003230:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003234:	e01e      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800323a:	e01b      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800323c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003240:	e018      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003242:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003246:	e015      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003248:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800324c:	e012      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800324e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003252:	e00f      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003258:	e00c      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800325a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325e:	e009      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003264:	e006      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003266:	2304      	movs	r3, #4
 8003268:	e004      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800326a:	2304      	movs	r3, #4
 800326c:	e002      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800326e:	2304      	movs	r3, #4
 8003270:	e000      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003272:	2304      	movs	r3, #4
 8003274:	4a65      	ldr	r2, [pc, #404]	@ (800340c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003276:	60d3      	str	r3, [r2, #12]
 8003278:	e150      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4b63      	ldr	r3, [pc, #396]	@ (8003410 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003282:	429a      	cmp	r2, r3
 8003284:	d960      	bls.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a54      	ldr	r2, [pc, #336]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d057      	beq.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d050      	beq.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a51      	ldr	r2, [pc, #324]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d049      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d042      	beq.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03a      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4c      	ldr	r2, [pc, #304]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d032      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a4b      	ldr	r2, [pc, #300]	@ (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02a      	beq.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a49      	ldr	r2, [pc, #292]	@ (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a48      	ldr	r2, [pc, #288]	@ (80033fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01a      	beq.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a46      	ldr	r2, [pc, #280]	@ (8003400 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d012      	beq.n	8003310 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a45      	ldr	r2, [pc, #276]	@ (8003404 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00a      	beq.n	800330a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a43      	ldr	r2, [pc, #268]	@ (8003408 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d102      	bne.n	8003304 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80032fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003302:	e01e      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003308:	e01b      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800330a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800330e:	e018      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003310:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003314:	e015      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003316:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800331a:	e012      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800331c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003320:	e00f      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003326:	e00c      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800332c:	e009      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800332e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003332:	e006      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003334:	2304      	movs	r3, #4
 8003336:	e004      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003338:	2304      	movs	r3, #4
 800333a:	e002      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800333c:	2304      	movs	r3, #4
 800333e:	e000      	b.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003340:	2304      	movs	r3, #4
 8003342:	4a32      	ldr	r2, [pc, #200]	@ (800340c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003344:	6093      	str	r3, [r2, #8]
 8003346:	e0e9      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003350:	429a      	cmp	r2, r3
 8003352:	f240 8083 	bls.w	800345c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a20      	ldr	r2, [pc, #128]	@ (80033dc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d079      	beq.n	8003454 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d072      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	@ (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d06b      	beq.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	@ (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d064      	beq.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d05c      	beq.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	@ (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d054      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04c      	beq.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d044      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03c      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d034      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a11      	ldr	r2, [pc, #68]	@ (8003404 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003408 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d124      	bne.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80033ce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033d2:	e040      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033d4:	40026000 	.word	0x40026000
 80033d8:	40026458 	.word	0x40026458
 80033dc:	40026010 	.word	0x40026010
 80033e0:	40026410 	.word	0x40026410
 80033e4:	40026070 	.word	0x40026070
 80033e8:	40026470 	.word	0x40026470
 80033ec:	40026028 	.word	0x40026028
 80033f0:	40026428 	.word	0x40026428
 80033f4:	40026088 	.word	0x40026088
 80033f8:	40026488 	.word	0x40026488
 80033fc:	40026040 	.word	0x40026040
 8003400:	40026440 	.word	0x40026440
 8003404:	400260a0 	.word	0x400260a0
 8003408:	400264a0 	.word	0x400264a0
 800340c:	40026400 	.word	0x40026400
 8003410:	400260b8 	.word	0x400260b8
 8003414:	40026058 	.word	0x40026058
 8003418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800341c:	e01b      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800341e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003422:	e018      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003424:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003428:	e015      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800342a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800342e:	e012      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003434:	e00f      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800343a:	e00c      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800343c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003440:	e009      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003446:	e006      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003448:	2304      	movs	r3, #4
 800344a:	e004      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800344c:	2304      	movs	r3, #4
 800344e:	e002      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003450:	2304      	movs	r3, #4
 8003452:	e000      	b.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003454:	2304      	movs	r3, #4
 8003456:	4a8b      	ldr	r2, [pc, #556]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003458:	60d3      	str	r3, [r2, #12]
 800345a:	e05f      	b.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a89      	ldr	r2, [pc, #548]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d057      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a88      	ldr	r2, [pc, #544]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d050      	beq.n	8003512 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a86      	ldr	r2, [pc, #536]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d049      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a85      	ldr	r2, [pc, #532]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d042      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a83      	ldr	r2, [pc, #524]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d03a      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a82      	ldr	r2, [pc, #520]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d032      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a80      	ldr	r2, [pc, #512]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02a      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7f      	ldr	r2, [pc, #508]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7d      	ldr	r2, [pc, #500]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01a      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7c      	ldr	r2, [pc, #496]	@ (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d012      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7a      	ldr	r2, [pc, #488]	@ (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00a      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a79      	ldr	r2, [pc, #484]	@ (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d102      	bne.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80034d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034d8:	e01e      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034de:	e01b      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034e4:	e018      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034ea:	e015      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034f0:	e012      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f6:	e00f      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034fc:	e00c      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80034fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003502:	e009      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003508:	e006      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800350a:	2304      	movs	r3, #4
 800350c:	e004      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800350e:	2304      	movs	r3, #4
 8003510:	e002      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003512:	2304      	movs	r3, #4
 8003514:	e000      	b.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003516:	2304      	movs	r3, #4
 8003518:	4a5a      	ldr	r2, [pc, #360]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800351a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b65      	ldr	r3, [pc, #404]	@ (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d95c      	bls.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a56      	ldr	r2, [pc, #344]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d053      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a55      	ldr	r2, [pc, #340]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04c      	beq.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a53      	ldr	r2, [pc, #332]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a52      	ldr	r2, [pc, #328]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d03e      	beq.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a50      	ldr	r2, [pc, #320]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d037      	beq.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4f      	ldr	r2, [pc, #316]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d030      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4d      	ldr	r2, [pc, #308]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d029      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4c      	ldr	r2, [pc, #304]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a4a      	ldr	r2, [pc, #296]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01a      	beq.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a49      	ldr	r2, [pc, #292]	@ (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d012      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a47      	ldr	r2, [pc, #284]	@ (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00a      	beq.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a46      	ldr	r2, [pc, #280]	@ (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d102      	bne.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80035a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035a4:	e01a      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035aa:	e017      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b0:	e014      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b6:	e011      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035bc:	e00e      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035be:	2340      	movs	r3, #64	@ 0x40
 80035c0:	e00c      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035c2:	2340      	movs	r3, #64	@ 0x40
 80035c4:	e00a      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035c6:	2340      	movs	r3, #64	@ 0x40
 80035c8:	e008      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035ca:	2340      	movs	r3, #64	@ 0x40
 80035cc:	e006      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e004      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e002      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80035da:	2301      	movs	r3, #1
 80035dc:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80035de:	60d3      	str	r3, [r2, #12]
 80035e0:	e141      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b35      	ldr	r3, [pc, #212]	@ (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d97c      	bls.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a25      	ldr	r2, [pc, #148]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d073      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a23      	ldr	r2, [pc, #140]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d06c      	beq.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a22      	ldr	r2, [pc, #136]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d065      	beq.n	80036d8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a20      	ldr	r2, [pc, #128]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d05e      	beq.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1f      	ldr	r2, [pc, #124]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d057      	beq.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d050      	beq.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d049      	beq.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1a      	ldr	r2, [pc, #104]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d042      	beq.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a19      	ldr	r2, [pc, #100]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01a      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	@ (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d012      	beq.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00a      	beq.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a14      	ldr	r2, [pc, #80]	@ (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d102      	bne.n	800366c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800366a:	e03a      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800366c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003670:	e037      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003676:	e034      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800367c:	e031      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800367e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003682:	e02e      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003684:	40026000 	.word	0x40026000
 8003688:	40026010 	.word	0x40026010
 800368c:	40026410 	.word	0x40026410
 8003690:	40026070 	.word	0x40026070
 8003694:	40026470 	.word	0x40026470
 8003698:	40026028 	.word	0x40026028
 800369c:	40026428 	.word	0x40026428
 80036a0:	40026088 	.word	0x40026088
 80036a4:	40026488 	.word	0x40026488
 80036a8:	40026040 	.word	0x40026040
 80036ac:	40026440 	.word	0x40026440
 80036b0:	400260a0 	.word	0x400260a0
 80036b4:	400264a0 	.word	0x400264a0
 80036b8:	40026458 	.word	0x40026458
 80036bc:	40026400 	.word	0x40026400
 80036c0:	400260b8 	.word	0x400260b8
 80036c4:	2340      	movs	r3, #64	@ 0x40
 80036c6:	e00c      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036c8:	2340      	movs	r3, #64	@ 0x40
 80036ca:	e00a      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036cc:	2340      	movs	r3, #64	@ 0x40
 80036ce:	e008      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036d0:	2340      	movs	r3, #64	@ 0x40
 80036d2:	e006      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e004      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036d8:	2301      	movs	r3, #1
 80036da:	e002      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4a7b      	ldr	r2, [pc, #492]	@ (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e0be      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b79      	ldr	r3, [pc, #484]	@ (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d95c      	bls.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a77      	ldr	r2, [pc, #476]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d053      	beq.n	80037a6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a76      	ldr	r2, [pc, #472]	@ (80038dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04c      	beq.n	80037a2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a74      	ldr	r2, [pc, #464]	@ (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d045      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a73      	ldr	r2, [pc, #460]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03e      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a71      	ldr	r2, [pc, #452]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d037      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a70      	ldr	r2, [pc, #448]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d030      	beq.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6e      	ldr	r2, [pc, #440]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d029      	beq.n	800378e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6d      	ldr	r2, [pc, #436]	@ (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a6b      	ldr	r2, [pc, #428]	@ (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01a      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6a      	ldr	r2, [pc, #424]	@ (80038fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d012      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a68      	ldr	r2, [pc, #416]	@ (8003900 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00a      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a67      	ldr	r2, [pc, #412]	@ (8003904 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d102      	bne.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800376c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003770:	e01a      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003776:	e017      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800377c:	e014      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800377e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003782:	e011      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003788:	e00e      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800378a:	2340      	movs	r3, #64	@ 0x40
 800378c:	e00c      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800378e:	2340      	movs	r3, #64	@ 0x40
 8003790:	e00a      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003792:	2340      	movs	r3, #64	@ 0x40
 8003794:	e008      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003796:	2340      	movs	r3, #64	@ 0x40
 8003798:	e006      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800379a:	2301      	movs	r3, #1
 800379c:	e004      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800379e:	2301      	movs	r3, #1
 80037a0:	e002      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80037a6:	2301      	movs	r3, #1
 80037a8:	4a57      	ldr	r2, [pc, #348]	@ (8003908 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80037aa:	60d3      	str	r3, [r2, #12]
 80037ac:	e05b      	b.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a49      	ldr	r2, [pc, #292]	@ (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d053      	beq.n	8003860 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a47      	ldr	r2, [pc, #284]	@ (80038dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04c      	beq.n	800385c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a46      	ldr	r2, [pc, #280]	@ (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a44      	ldr	r2, [pc, #272]	@ (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03e      	beq.n	8003854 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a43      	ldr	r2, [pc, #268]	@ (80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d037      	beq.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a41      	ldr	r2, [pc, #260]	@ (80038ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d030      	beq.n	800384c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a40      	ldr	r2, [pc, #256]	@ (80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d029      	beq.n	8003848 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3e      	ldr	r2, [pc, #248]	@ (80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3d      	ldr	r2, [pc, #244]	@ (80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01a      	beq.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3b      	ldr	r2, [pc, #236]	@ (80038fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d012      	beq.n	8003838 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00a      	beq.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a38      	ldr	r2, [pc, #224]	@ (8003904 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d102      	bne.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003826:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800382a:	e01a      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800382c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003830:	e017      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003832:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003836:	e014      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003838:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800383c:	e011      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800383e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003842:	e00e      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003844:	2340      	movs	r3, #64	@ 0x40
 8003846:	e00c      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003848:	2340      	movs	r3, #64	@ 0x40
 800384a:	e00a      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800384c:	2340      	movs	r3, #64	@ 0x40
 800384e:	e008      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003850:	2340      	movs	r3, #64	@ 0x40
 8003852:	e006      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003854:	2301      	movs	r3, #1
 8003856:	e004      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003858:	2301      	movs	r3, #1
 800385a:	e002      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003860:	2301      	movs	r3, #1
 8003862:	4a29      	ldr	r2, [pc, #164]	@ (8003908 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003864:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0216 	orr.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0208 	orr.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e005      	b.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40026400 	.word	0x40026400
 80038d4:	40026058 	.word	0x40026058
 80038d8:	40026010 	.word	0x40026010
 80038dc:	40026410 	.word	0x40026410
 80038e0:	40026070 	.word	0x40026070
 80038e4:	40026470 	.word	0x40026470
 80038e8:	40026028 	.word	0x40026028
 80038ec:	40026428 	.word	0x40026428
 80038f0:	40026088 	.word	0x40026088
 80038f4:	40026488 	.word	0x40026488
 80038f8:	40026040 	.word	0x40026040
 80038fc:	40026440 	.word	0x40026440
 8003900:	400260a0 	.word	0x400260a0
 8003904:	400264a0 	.word	0x400264a0
 8003908:	40026000 	.word	0x40026000

0800390c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e003      	b.n	8003932 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d108      	bne.n	8003970 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396e:	e007      	b.n	8003980 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	@ 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e165      	b.n	8003c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f040 8154 	bne.w	8003c6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d005      	beq.n	80039de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d130      	bne.n	8003a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0201 	and.w	r2, r3, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d017      	beq.n	8003a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d123      	bne.n	8003ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80ae 	beq.w	8003c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b22:	4b5a      	ldr	r3, [pc, #360]	@ (8003c8c <HAL_GPIO_Init+0x300>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2e:	4a58      	ldr	r2, [pc, #352]	@ (8003c90 <HAL_GPIO_Init+0x304>)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	220f      	movs	r2, #15
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4f      	ldr	r2, [pc, #316]	@ (8003c94 <HAL_GPIO_Init+0x308>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d025      	beq.n	8003ba6 <HAL_GPIO_Init+0x21a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c98 <HAL_GPIO_Init+0x30c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x216>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a4d      	ldr	r2, [pc, #308]	@ (8003c9c <HAL_GPIO_Init+0x310>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d019      	beq.n	8003b9e <HAL_GPIO_Init+0x212>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ca0 <HAL_GPIO_Init+0x314>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x20e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <HAL_GPIO_Init+0x318>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x20a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca8 <HAL_GPIO_Init+0x31c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x206>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a49      	ldr	r2, [pc, #292]	@ (8003cac <HAL_GPIO_Init+0x320>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x202>
 8003b8a:	2306      	movs	r3, #6
 8003b8c:	e00c      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003b8e:	2307      	movs	r3, #7
 8003b90:	e00a      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003b92:	2305      	movs	r3, #5
 8003b94:	e008      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003b96:	2304      	movs	r3, #4
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e004      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_GPIO_Init+0x21c>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f002 0203 	and.w	r2, r2, #3
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4093      	lsls	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb8:	4935      	ldr	r1, [pc, #212]	@ (8003c90 <HAL_GPIO_Init+0x304>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a31      	ldr	r2, [pc, #196]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a26      	ldr	r2, [pc, #152]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c1a:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c68:	4a11      	ldr	r2, [pc, #68]	@ (8003cb0 <HAL_GPIO_Init+0x324>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f ae96 	bls.w	80039a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3724      	adds	r7, #36	@ 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40021400 	.word	0x40021400
 8003cac:	40021800 	.word	0x40021800
 8003cb0:	40013c00 	.word	0x40013c00

08003cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e001      	b.n	8003cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d28:	887a      	ldrh	r2, [r7, #2]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	041a      	lsls	r2, r3, #16
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	400b      	ands	r3, r1
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d56:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d62:	4a05      	ldr	r2, [pc, #20]	@ (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f806 	bl	8003d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e12b      	b.n	8003ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fd fa1e 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	@ 0x24
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003df8:	f001 f9f2 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a81      	ldr	r2, [pc, #516]	@ (8004008 <HAL_I2C_Init+0x274>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d807      	bhi.n	8003e18 <HAL_I2C_Init+0x84>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a80      	ldr	r2, [pc, #512]	@ (800400c <HAL_I2C_Init+0x278>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e006      	b.n	8003e26 <HAL_I2C_Init+0x92>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8004010 <HAL_I2C_Init+0x27c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf94      	ite	ls
 8003e20:	2301      	movls	r3, #1
 8003e22:	2300      	movhi	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0e7      	b.n	8003ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a78      	ldr	r2, [pc, #480]	@ (8004014 <HAL_I2C_Init+0x280>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8004008 <HAL_I2C_Init+0x274>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d802      	bhi.n	8003e68 <HAL_I2C_Init+0xd4>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3301      	adds	r3, #1
 8003e66:	e009      	b.n	8003e7c <HAL_I2C_Init+0xe8>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	4a69      	ldr	r2, [pc, #420]	@ (8004018 <HAL_I2C_Init+0x284>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	495c      	ldr	r1, [pc, #368]	@ (8004008 <HAL_I2C_Init+0x274>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d819      	bhi.n	8003ed0 <HAL_I2C_Init+0x13c>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e59      	subs	r1, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_I2C_Init+0x138>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1e59      	subs	r1, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	e051      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	e04f      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <HAL_I2C_Init+0x168>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e012      	b.n	8003f22 <HAL_I2C_Init+0x18e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Init+0x196>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e022      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <HAL_I2C_Init+0x1bc>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1e58      	subs	r0, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	440b      	add	r3, r1
 8003f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f4e:	e00f      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e58      	subs	r0, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	0099      	lsls	r1, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	6809      	ldr	r1, [r1, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6911      	ldr	r1, [r2, #16]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	000186a0 	.word	0x000186a0
 800400c:	001e847f 	.word	0x001e847f
 8004010:	003d08ff 	.word	0x003d08ff
 8004014:	431bde83 	.word	0x431bde83
 8004018:	10624dd3 	.word	0x10624dd3

0800401c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	461a      	mov	r2, r3
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
 800402c:	4613      	mov	r3, r2
 800402e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7fd fb64 	bl	80016fc <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	f040 80e0 	bne.w	8004204 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	4970      	ldr	r1, [pc, #448]	@ (8004210 <HAL_I2C_Master_Transmit+0x1f4>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fc64 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	e0d3      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_I2C_Master_Transmit+0x50>
 8004068:	2302      	movs	r3, #2
 800406a:	e0cc      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d007      	beq.n	8004092 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	@ 0x21
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2210      	movs	r2, #16
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <HAL_I2C_Master_Transmit+0x1f8>)
 80040d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 face 	bl	800467c <I2C_MasterRequestWrite>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e08d      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004100:	e066      	b.n	80041d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	6a39      	ldr	r1, [r7, #32]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fd22 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b04      	cmp	r3, #4
 8004118:	d107      	bne.n	800412a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06b      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_I2C_Master_Transmit+0x188>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	6a39      	ldr	r1, [r7, #32]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fd19 	bl	8004be0 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d107      	bne.n	80041cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e01a      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d194      	bne.n	8004102 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	00100002 	.word	0x00100002
 8004214:	ffff0000 	.word	0xffff0000

08004218 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	@ 0x30
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
 8004228:	4613      	mov	r3, r2
 800422a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7fd fa66 	bl	80016fc <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b20      	cmp	r3, #32
 800423c:	f040 8217 	bne.w	800466e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2319      	movs	r3, #25
 8004246:	2201      	movs	r2, #1
 8004248:	497c      	ldr	r1, [pc, #496]	@ (800443c <HAL_I2C_Master_Receive+0x224>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fb66 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
 8004258:	e20a      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_I2C_Master_Receive+0x50>
 8004264:	2302      	movs	r3, #2
 8004266:	e203      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d007      	beq.n	800428e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2222      	movs	r2, #34	@ 0x22
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2210      	movs	r2, #16
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	893a      	ldrh	r2, [r7, #8]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a5c      	ldr	r2, [pc, #368]	@ (8004440 <HAL_I2C_Master_Receive+0x228>)
 80042ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fa52 	bl	8004780 <I2C_MasterRequestRead>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e1c4      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d113      	bne.n	8004316 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e198      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	2b01      	cmp	r3, #1
 800431c:	d11b      	bne.n	8004356 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800432c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e178      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435a:	2b02      	cmp	r3, #2
 800435c:	d11b      	bne.n	8004396 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800436c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	e158      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043bc:	e144      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	f200 80f1 	bhi.w	80045aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d123      	bne.n	8004418 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fc4b 	bl	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e145      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004416:	e117      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441c:	2b02      	cmp	r3, #2
 800441e:	d14e      	bne.n	80044be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	4906      	ldr	r1, [pc, #24]	@ (8004444 <HAL_I2C_Master_Receive+0x22c>)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fa76 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e11a      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
 800443a:	bf00      	nop
 800443c:	00100002 	.word	0x00100002
 8004440:	ffff0000 	.word	0xffff0000
 8004444:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044bc:	e0c4      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	2200      	movs	r2, #0
 80044c6:	496c      	ldr	r1, [pc, #432]	@ (8004678 <HAL_I2C_Master_Receive+0x460>)
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa27 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cb      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2200      	movs	r2, #0
 8004522:	4955      	ldr	r1, [pc, #340]	@ (8004678 <HAL_I2C_Master_Receive+0x460>)
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f9f9 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e09d      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a8:	e04e      	b.n	8004648 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fb5e 	bl	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e058      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d124      	bne.n	8004648 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004614:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	f47f aeb6 	bne.w	80043be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010004 	.word	0x00010004

0800467c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	460b      	mov	r3, r1
 800468a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d006      	beq.n	80046a6 <I2C_MasterRequestWrite+0x2a>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d003      	beq.n	80046a6 <I2C_MasterRequestWrite+0x2a>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a4:	d108      	bne.n	80046b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e00b      	b.n	80046d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	2b12      	cmp	r3, #18
 80046be:	d107      	bne.n	80046d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f91d 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f6:	d103      	bne.n	8004700 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e035      	b.n	8004770 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470c:	d108      	bne.n	8004720 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800470e:	897b      	ldrh	r3, [r7, #10]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800471c:	611a      	str	r2, [r3, #16]
 800471e:	e01b      	b.n	8004758 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	11db      	asrs	r3, r3, #7
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f003 0306 	and.w	r3, r3, #6
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f063 030f 	orn	r3, r3, #15
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	490e      	ldr	r1, [pc, #56]	@ (8004778 <I2C_MasterRequestWrite+0xfc>)
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f966 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e010      	b.n	8004770 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800474e:	897b      	ldrh	r3, [r7, #10]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4907      	ldr	r1, [pc, #28]	@ (800477c <I2C_MasterRequestWrite+0x100>)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f956 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	00010008 	.word	0x00010008
 800477c:	00010002 	.word	0x00010002

08004780 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d006      	beq.n	80047ba <I2C_MasterRequestRead+0x3a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <I2C_MasterRequestRead+0x3a>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047b8:	d108      	bne.n	80047cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e00b      	b.n	80047e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	2b11      	cmp	r3, #17
 80047d2:	d107      	bne.n	80047e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f893 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480a:	d103      	bne.n	8004814 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e079      	b.n	800490c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	e05f      	b.n	80048f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004834:	897b      	ldrh	r3, [r7, #10]
 8004836:	11db      	asrs	r3, r3, #7
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f063 030f 	orn	r3, r3, #15
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4930      	ldr	r1, [pc, #192]	@ (8004914 <I2C_MasterRequestRead+0x194>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f8dc 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e054      	b.n	800490c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4929      	ldr	r1, [pc, #164]	@ (8004918 <I2C_MasterRequestRead+0x198>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8cc 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e044      	b.n	800490c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f831 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ce:	d103      	bne.n	80048d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e017      	b.n	800490c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048dc:	897b      	ldrh	r3, [r7, #10]
 80048de:	11db      	asrs	r3, r3, #7
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f063 030e 	orn	r3, r3, #14
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4907      	ldr	r1, [pc, #28]	@ (8004918 <I2C_MasterRequestRead+0x198>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f888 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	00010008 	.word	0x00010008
 8004918:	00010002 	.word	0x00010002

0800491c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492c:	e048      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d044      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fc fee1 	bl	80016fc <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d139      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10d      	bne.n	8004972 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	e00c      	b.n	800498c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	43da      	mvns	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d116      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e023      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	e00c      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d093      	beq.n	800492e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a1e:	e071      	b.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d123      	bne.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e067      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d041      	beq.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fc fe3c 	bl	80016fc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d136      	bne.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10c      	bne.n	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e00b      	b.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e021      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10c      	bne.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	43da      	mvns	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e00b      	b.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f af6d 	bne.w	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5c:	e034      	b.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8e3 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e034      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d028      	beq.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b76:	f7fc fdc1 	bl	80016fc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11d      	bne.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b80      	cmp	r3, #128	@ 0x80
 8004b98:	d016      	beq.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e007      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd2:	2b80      	cmp	r3, #128	@ 0x80
 8004bd4:	d1c3      	bne.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bec:	e034      	b.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f89b 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e034      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d028      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fc fd79 	bl	80016fc <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11d      	bne.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d016      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e007      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d1c3      	bne.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c7c:	e049      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d119      	bne.n	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e030      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc0:	f7fc fd1c 	bl	80016fc <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d016      	beq.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1c:	2b40      	cmp	r3, #64	@ 0x40
 8004d1e:	d1ae      	bne.n	8004c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d40:	d11b      	bne.n	8004d7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e108      	b.n	8004fac <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fc fb35 	bl	8001424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc8:	d102      	bne.n	8004dd0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 fd41 	bl	800785c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7c1a      	ldrb	r2, [r3, #16]
 8004de2:	f88d 2000 	strb.w	r2, [sp]
 8004de6:	3304      	adds	r3, #4
 8004de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dea:	f002 fcd3 	bl	8007794 <USB_CoreInit>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d5      	b.n	8004fac <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 fd39 	bl	800787e <USB_SetCurrentMode>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0c6      	b.n	8004fac <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e04a      	b.n	8004eba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	3315      	adds	r3, #21
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3314      	adds	r3, #20
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	b298      	uxth	r0, r3
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	332e      	adds	r3, #46	@ 0x2e
 8004e60:	4602      	mov	r2, r0
 8004e62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3318      	adds	r3, #24
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	331c      	adds	r3, #28
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3320      	adds	r3, #32
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3324      	adds	r3, #36	@ 0x24
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3af      	bcc.n	8004e24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e044      	b.n	8004f54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	3301      	adds	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b5      	bcc.n	8004eca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7c1a      	ldrb	r2, [r3, #16]
 8004f66:	f88d 2000 	strb.w	r2, [sp]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f6e:	f002 fcd3 	bl	8007918 <USB_DevInit>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e013      	b.n	8004fac <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	7b1b      	ldrb	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f80a 	bl	8004fb4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fe8e 	bl	8007cc6 <USB_DevDisconnect>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	f043 0303 	orr.w	r3, r3, #3
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fb06 	bl	80016fc <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fc fb02 	bl	80016fc <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	@ (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005182:	f000 fb7f 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	@ (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fa66 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	080088f0 	.word	0x080088f0
 80051c0:	20000000 	.word	0x20000000
 80051c4:	20000004 	.word	0x20000004

080051c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000000 	.word	0x20000000

080051e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e4:	f7ff fff0 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0a9b      	lsrs	r3, r3, #10
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	4903      	ldr	r1, [pc, #12]	@ (8005204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40023800 	.word	0x40023800
 8005204:	08008900 	.word	0x08008900

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800520c:	f7ff ffdc 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0b5b      	lsrs	r3, r3, #13
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	@ (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40023800 	.word	0x40023800
 800522c:	08008900 	.word	0x08008900

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	@ 0x30
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005268:	4b6f      	ldr	r3, [pc, #444]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800526e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	496c      	ldr	r1, [pc, #432]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005286:	2301      	movs	r3, #1
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005296:	4b64      	ldr	r3, [pc, #400]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800529c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	4960      	ldr	r1, [pc, #384]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d017      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052c4:	4b58      	ldr	r3, [pc, #352]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	4955      	ldr	r1, [pc, #340]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e2:	d101      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80052e4:	2301      	movs	r3, #1
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80052f0:	2301      	movs	r3, #1
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005300:	4b49      	ldr	r3, [pc, #292]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005306:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	4946      	ldr	r1, [pc, #280]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800531e:	d101      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005320:	2301      	movs	r3, #1
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800532c:	2301      	movs	r3, #1
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 808a 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	4b39      	ldr	r3, [pc, #228]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a38      	ldr	r2, [pc, #224]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b36      	ldr	r3, [pc, #216]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800535a:	4b34      	ldr	r3, [pc, #208]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a33      	ldr	r2, [pc, #204]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005364:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005366:	f7fc f9c9 	bl	80016fc <HAL_GetTick>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fc f9c5 	bl	80016fc <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e278      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005380:	4b2a      	ldr	r3, [pc, #168]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538c:	4b26      	ldr	r3, [pc, #152]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005394:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d02f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a4:	6a3a      	ldr	r2, [r7, #32]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d028      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053c6:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d114      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fc f993 	bl	80016fc <HAL_GetTick>
 80053d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fc f98f 	bl	80016fc <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e240      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ee      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005408:	d114      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800540a:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800541a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541e:	4902      	ldr	r1, [pc, #8]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]
 8005424:	e00c      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	40007000 	.word	0x40007000
 8005430:	42470e40 	.word	0x42470e40
 8005434:	4b4a      	ldr	r3, [pc, #296]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4a49      	ldr	r2, [pc, #292]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800543a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800543e:	6093      	str	r3, [r2, #8]
 8005440:	4b47      	ldr	r3, [pc, #284]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005442:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544c:	4944      	ldr	r1, [pc, #272]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800544e:	4313      	orrs	r3, r2
 8005450:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005464:	4b3f      	ldr	r3, [pc, #252]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005466:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005474:	4b3a      	ldr	r3, [pc, #232]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	4937      	ldr	r1, [pc, #220]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005496:	4b32      	ldr	r3, [pc, #200]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800549c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a4:	492e      	ldr	r1, [pc, #184]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d011      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054b8:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054be:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c6:	4926      	ldr	r1, [pc, #152]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054d6:	d101      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80054d8:	2301      	movs	r3, #1
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	491a      	ldr	r1, [pc, #104]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800550a:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800550c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005510:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005518:	4911      	ldr	r1, [pc, #68]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d101      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800552a:	2301      	movs	r3, #1
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d005      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800553c:	f040 80ff 	bne.w	800573e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005546:	f7fc f8d9 	bl	80016fc <HAL_GetTick>
 800554a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800554e:	f7fc f8d5 	bl	80016fc <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e188      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005560:	40023800 	.word	0x40023800
 8005564:	424711e0 	.word	0x424711e0
 8005568:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800556c:	4b7e      	ldr	r3, [pc, #504]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	d028      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d124      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80055a0:	4b71      	ldr	r3, [pc, #452]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	3301      	adds	r3, #1
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	019b      	lsls	r3, r3, #6
 80055ca:	431a      	orrs	r2, r3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	3b01      	subs	r3, #1
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	4961      	ldr	r1, [pc, #388]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005608:	2b00      	cmp	r3, #0
 800560a:	d035      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005614:	d130      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005616:	4b54      	ldr	r3, [pc, #336]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	3301      	adds	r3, #1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005628:	4b4f      	ldr	r3, [pc, #316]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	019b      	lsls	r3, r3, #6
 8005640:	431a      	orrs	r2, r3
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	3b01      	subs	r3, #1
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	431a      	orrs	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	071b      	lsls	r3, r3, #28
 8005658:	4943      	ldr	r1, [pc, #268]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005660:	4b41      	ldr	r3, [pc, #260]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005666:	f023 021f 	bic.w	r2, r3, #31
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	493d      	ldr	r1, [pc, #244]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d029      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568c:	d124      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800568e:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	3301      	adds	r3, #1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056a0:	4b31      	ldr	r3, [pc, #196]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a6:	0f1b      	lsrs	r3, r3, #28
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	019b      	lsls	r3, r3, #6
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	3b01      	subs	r3, #1
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	431a      	orrs	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	071b      	lsls	r3, r3, #28
 80056d0:	4925      	ldr	r1, [pc, #148]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d016      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	019b      	lsls	r3, r3, #6
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	3b01      	subs	r3, #1
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	061b      	lsls	r3, r3, #24
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	071b      	lsls	r3, r3, #28
 800570a:	4917      	ldr	r1, [pc, #92]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005712:	4b16      	ldr	r3, [pc, #88]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005718:	f7fb fff0 	bl	80016fc <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005720:	f7fb ffec 	bl	80016fc <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e09f      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 8095 	bne.w	8005870 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005746:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574c:	f7fb ffd6 	bl	80016fc <HAL_GetTick>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005752:	e00f      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005754:	f7fb ffd2 	bl	80016fc <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d908      	bls.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e085      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	42470068 	.word	0x42470068
 8005770:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005774:	4b41      	ldr	r3, [pc, #260]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005780:	d0e8      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d02b      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d127      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80057aa:	4b34      	ldr	r3, [pc, #208]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	431a      	orrs	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	3b01      	subs	r3, #1
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	4928      	ldr	r1, [pc, #160]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057e0:	4b26      	ldr	r3, [pc, #152]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057e6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	3b01      	subs	r3, #1
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	4922      	ldr	r1, [pc, #136]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01d      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800580e:	d118      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005810:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	0e1b      	lsrs	r3, r3, #24
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	019b      	lsls	r3, r3, #6
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	3b01      	subs	r3, #1
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	4910      	ldr	r1, [pc, #64]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005842:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005848:	f7fb ff58 	bl	80016fc <HAL_GetTick>
 800584c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005850:	f7fb ff54 	bl	80016fc <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e007      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800586a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800586e:	d1ef      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3730      	adds	r7, #48	@ 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800
 8005880:	42470070 	.word	0x42470070

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b0ae      	sub	sp, #184	@ 0xb8
 800588a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058aa:	4bcb      	ldr	r3, [pc, #812]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	f200 8206 	bhi.w	8005cc4 <HAL_RCC_GetSysClockFreq+0x440>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	08005cc5 	.word	0x08005cc5
 80058c8:	08005cc5 	.word	0x08005cc5
 80058cc:	08005cc5 	.word	0x08005cc5
 80058d0:	080058fd 	.word	0x080058fd
 80058d4:	08005cc5 	.word	0x08005cc5
 80058d8:	08005cc5 	.word	0x08005cc5
 80058dc:	08005cc5 	.word	0x08005cc5
 80058e0:	08005905 	.word	0x08005905
 80058e4:	08005cc5 	.word	0x08005cc5
 80058e8:	08005cc5 	.word	0x08005cc5
 80058ec:	08005cc5 	.word	0x08005cc5
 80058f0:	08005af5 	.word	0x08005af5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4bb9      	ldr	r3, [pc, #740]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x358>)
 80058f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058fa:	e1e7      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fc:	4bb8      	ldr	r3, [pc, #736]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005902:	e1e3      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005904:	4bb4      	ldr	r3, [pc, #720]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800590c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005910:	4bb1      	ldr	r3, [pc, #708]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d071      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591c:	4bae      	ldr	r3, [pc, #696]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	099b      	lsrs	r3, r3, #6
 8005922:	2200      	movs	r2, #0
 8005924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005928:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800592c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005934:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005938:	2300      	movs	r3, #0
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800593e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	f04f 0000 	mov.w	r0, #0
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	0159      	lsls	r1, r3, #5
 8005950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005954:	0150      	lsls	r0, r2, #5
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4621      	mov	r1, r4
 800595c:	1a51      	subs	r1, r2, r1
 800595e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005960:	4629      	mov	r1, r5
 8005962:	eb63 0301 	sbc.w	r3, r3, r1
 8005966:	647b      	str	r3, [r7, #68]	@ 0x44
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005974:	4649      	mov	r1, r9
 8005976:	018b      	lsls	r3, r1, #6
 8005978:	4641      	mov	r1, r8
 800597a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800597e:	4641      	mov	r1, r8
 8005980:	018a      	lsls	r2, r1, #6
 8005982:	4641      	mov	r1, r8
 8005984:	1a51      	subs	r1, r2, r1
 8005986:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005988:	4649      	mov	r1, r9
 800598a:	eb63 0301 	sbc.w	r3, r3, r1
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800599c:	4649      	mov	r1, r9
 800599e:	00cb      	lsls	r3, r1, #3
 80059a0:	4641      	mov	r1, r8
 80059a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059a6:	4641      	mov	r1, r8
 80059a8:	00ca      	lsls	r2, r1, #3
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	4622      	mov	r2, r4
 80059b2:	189b      	adds	r3, r3, r2
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b6:	462b      	mov	r3, r5
 80059b8:	460a      	mov	r2, r1
 80059ba:	eb42 0303 	adc.w	r3, r2, r3
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059cc:	4629      	mov	r1, r5
 80059ce:	024b      	lsls	r3, r1, #9
 80059d0:	4621      	mov	r1, r4
 80059d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059d6:	4621      	mov	r1, r4
 80059d8:	024a      	lsls	r2, r1, #9
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80059f0:	f7fa fc66 	bl	80002c0 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4613      	mov	r3, r2
 80059fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fe:	e067      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	4b75      	ldr	r3, [pc, #468]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005a22:	4622      	mov	r2, r4
 8005a24:	462b      	mov	r3, r5
 8005a26:	f04f 0000 	mov.w	r0, #0
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	0159      	lsls	r1, r3, #5
 8005a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a34:	0150      	lsls	r0, r2, #5
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	1a51      	subs	r1, r2, r1
 8005a3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a40:	4629      	mov	r1, r5
 8005a42:	eb63 0301 	sbc.w	r3, r3, r1
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005a54:	4649      	mov	r1, r9
 8005a56:	018b      	lsls	r3, r1, #6
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a5e:	4641      	mov	r1, r8
 8005a60:	018a      	lsls	r2, r1, #6
 8005a62:	4641      	mov	r1, r8
 8005a64:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a68:	4649      	mov	r1, r9
 8005a6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a82:	4692      	mov	sl, r2
 8005a84:	469b      	mov	fp, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	eb1a 0303 	adds.w	r3, sl, r3
 8005a8c:	623b      	str	r3, [r7, #32]
 8005a8e:	462b      	mov	r3, r5
 8005a90:	eb4b 0303 	adc.w	r3, fp, r3
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	028b      	lsls	r3, r1, #10
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aac:	4621      	mov	r1, r4
 8005aae:	028a      	lsls	r2, r1, #10
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ab8:	2200      	movs	r2, #0
 8005aba:	673b      	str	r3, [r7, #112]	@ 0x70
 8005abc:	677a      	str	r2, [r7, #116]	@ 0x74
 8005abe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005ac2:	f7fa fbfd 	bl	80002c0 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4613      	mov	r3, r2
 8005acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ad0:	4b41      	ldr	r3, [pc, #260]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	3301      	adds	r3, #1
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005af2:	e0eb      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af4:	4b38      	ldr	r3, [pc, #224]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b00:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d06b      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b0c:	4b32      	ldr	r3, [pc, #200]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	2200      	movs	r2, #0
 8005b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b20:	2300      	movs	r3, #0
 8005b22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	f04f 0000 	mov.w	r0, #0
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	0159      	lsls	r1, r3, #5
 8005b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b3a:	0150      	lsls	r0, r2, #5
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4621      	mov	r1, r4
 8005b42:	1a51      	subs	r1, r2, r1
 8005b44:	61b9      	str	r1, [r7, #24]
 8005b46:	4629      	mov	r1, r5
 8005b48:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	018b      	lsls	r3, r1, #6
 8005b5e:	4651      	mov	r1, sl
 8005b60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b64:	4651      	mov	r1, sl
 8005b66:	018a      	lsls	r2, r1, #6
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ebb2 0801 	subs.w	r8, r2, r1
 8005b6e:	4659      	mov	r1, fp
 8005b70:	eb63 0901 	sbc.w	r9, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b88:	4690      	mov	r8, r2
 8005b8a:	4699      	mov	r9, r3
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	eb18 0303 	adds.w	r3, r8, r3
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	462b      	mov	r3, r5
 8005b96:	eb49 0303 	adc.w	r3, r9, r3
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005ba8:	4629      	mov	r1, r5
 8005baa:	024b      	lsls	r3, r1, #9
 8005bac:	4621      	mov	r1, r4
 8005bae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	024a      	lsls	r2, r1, #9
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bc2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005bc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bc8:	f7fa fb7a 	bl	80002c0 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bd6:	e065      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x420>
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	00f42400 	.word	0x00f42400
 8005be0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x458>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	2200      	movs	r2, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	4611      	mov	r1, r2
 8005bf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005bfe:	4642      	mov	r2, r8
 8005c00:	464b      	mov	r3, r9
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	0159      	lsls	r1, r3, #5
 8005c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c10:	0150      	lsls	r0, r2, #5
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4641      	mov	r1, r8
 8005c18:	1a51      	subs	r1, r2, r1
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c30:	4659      	mov	r1, fp
 8005c32:	018b      	lsls	r3, r1, #6
 8005c34:	4651      	mov	r1, sl
 8005c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	018a      	lsls	r2, r1, #6
 8005c3e:	4651      	mov	r1, sl
 8005c40:	1a54      	subs	r4, r2, r1
 8005c42:	4659      	mov	r1, fp
 8005c44:	eb63 0501 	sbc.w	r5, r3, r1
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	00eb      	lsls	r3, r5, #3
 8005c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c56:	00e2      	lsls	r2, r4, #3
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	18e3      	adds	r3, r4, r3
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	464b      	mov	r3, r9
 8005c64:	eb45 0303 	adc.w	r3, r5, r3
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c76:	4629      	mov	r1, r5
 8005c78:	028b      	lsls	r3, r1, #10
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c80:	4621      	mov	r1, r4
 8005c82:	028a      	lsls	r2, r1, #10
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c96:	f7fa fb13 	bl	80002c0 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x458>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	0f1b      	lsrs	r3, r3, #28
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005cca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	37b8      	adds	r7, #184	@ 0xb8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	00f42400 	.word	0x00f42400

08005ce4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e28d      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8083 	beq.w	8005e0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d04:	4b94      	ldr	r3, [pc, #592]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 030c 	and.w	r3, r3, #12
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d019      	beq.n	8005d44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d10:	4b91      	ldr	r3, [pc, #580]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
        || \
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d28:	d00c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d32:	2b0c      	cmp	r3, #12
 8005d34:	d112      	bne.n	8005d5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d36:	4b88      	ldr	r3, [pc, #544]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	4b84      	ldr	r3, [pc, #528]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05b      	beq.n	8005e08 <HAL_RCC_OscConfig+0x124>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d157      	bne.n	8005e08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e25a      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d106      	bne.n	8005d74 <HAL_RCC_OscConfig+0x90>
 8005d66:	4b7c      	ldr	r3, [pc, #496]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a7b      	ldr	r2, [pc, #492]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e01d      	b.n	8005db0 <HAL_RCC_OscConfig+0xcc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d7c:	d10c      	bne.n	8005d98 <HAL_RCC_OscConfig+0xb4>
 8005d7e:	4b76      	ldr	r3, [pc, #472]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a75      	ldr	r2, [pc, #468]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4b73      	ldr	r3, [pc, #460]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a72      	ldr	r2, [pc, #456]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_OscConfig+0xcc>
 8005d98:	4b6f      	ldr	r3, [pc, #444]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4b6c      	ldr	r3, [pc, #432]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a6b      	ldr	r2, [pc, #428]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d013      	beq.n	8005de0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fb fca0 	bl	80016fc <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fb fc9c 	bl	80016fc <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	@ 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e21f      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd2:	4b61      	ldr	r3, [pc, #388]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xdc>
 8005dde:	e014      	b.n	8005e0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fb fc8c 	bl	80016fc <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fb fc88 	bl	80016fc <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	@ 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e20b      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfa:	4b57      	ldr	r3, [pc, #348]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x104>
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06f      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e16:	4b50      	ldr	r3, [pc, #320]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d017      	beq.n	8005e52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005e22:	4b4d      	ldr	r3, [pc, #308]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
        || \
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d105      	bne.n	8005e3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3a:	4b47      	ldr	r3, [pc, #284]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d11c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e46:	4b44      	ldr	r3, [pc, #272]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d116      	bne.n	8005e80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e52:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_RCC_OscConfig+0x186>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d001      	beq.n	8005e6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e1d3      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4937      	ldr	r1, [pc, #220]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	e03a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d020      	beq.n	8005eca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e88:	4b34      	ldr	r3, [pc, #208]	@ (8005f5c <HAL_RCC_OscConfig+0x278>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fc35 	bl	80016fc <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e96:	f7fb fc31 	bl	80016fc <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e1b4      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb4:	4b28      	ldr	r3, [pc, #160]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4925      	ldr	r1, [pc, #148]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]
 8005ec8:	e015      	b.n	8005ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eca:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <HAL_RCC_OscConfig+0x278>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fb fc14 	bl	80016fc <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed8:	f7fb fc10 	bl	80016fc <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e193      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eea:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d036      	beq.n	8005f70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0a:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <HAL_RCC_OscConfig+0x27c>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f10:	f7fb fbf4 	bl	80016fc <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f18:	f7fb fbf0 	bl	80016fc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e173      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <HAL_RCC_OscConfig+0x274>)
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x234>
 8005f36:	e01b      	b.n	8005f70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3e:	f7fb fbdd 	bl	80016fc <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f44:	e00e      	b.n	8005f64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f46:	f7fb fbd9 	bl	80016fc <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d907      	bls.n	8005f64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e15c      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	42470000 	.word	0x42470000
 8005f60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f64:	4b8a      	ldr	r3, [pc, #552]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ea      	bne.n	8005f46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8097 	beq.w	80060ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f82:	4b83      	ldr	r3, [pc, #524]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	4b7f      	ldr	r3, [pc, #508]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	4a7e      	ldr	r2, [pc, #504]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fae:	4b79      	ldr	r3, [pc, #484]	@ (8006194 <HAL_RCC_OscConfig+0x4b0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d118      	bne.n	8005fec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fba:	4b76      	ldr	r3, [pc, #472]	@ (8006194 <HAL_RCC_OscConfig+0x4b0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a75      	ldr	r2, [pc, #468]	@ (8006194 <HAL_RCC_OscConfig+0x4b0>)
 8005fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc6:	f7fb fb99 	bl	80016fc <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fce:	f7fb fb95 	bl	80016fc <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e118      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8006194 <HAL_RCC_OscConfig+0x4b0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_OscConfig+0x31e>
 8005ff4:	4b66      	ldr	r3, [pc, #408]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	4a65      	ldr	r2, [pc, #404]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006000:	e01c      	b.n	800603c <HAL_RCC_OscConfig+0x358>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b05      	cmp	r3, #5
 8006008:	d10c      	bne.n	8006024 <HAL_RCC_OscConfig+0x340>
 800600a:	4b61      	ldr	r3, [pc, #388]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	4a60      	ldr	r2, [pc, #384]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006010:	f043 0304 	orr.w	r3, r3, #4
 8006014:	6713      	str	r3, [r2, #112]	@ 0x70
 8006016:	4b5e      	ldr	r3, [pc, #376]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	4a5d      	ldr	r2, [pc, #372]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	6713      	str	r3, [r2, #112]	@ 0x70
 8006022:	e00b      	b.n	800603c <HAL_RCC_OscConfig+0x358>
 8006024:	4b5a      	ldr	r3, [pc, #360]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006028:	4a59      	ldr	r2, [pc, #356]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006030:	4b57      	ldr	r3, [pc, #348]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006034:	4a56      	ldr	r2, [pc, #344]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006036:	f023 0304 	bic.w	r3, r3, #4
 800603a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fb fb5a 	bl	80016fc <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604c:	f7fb fb56 	bl	80016fc <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e0d7      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	4b4b      	ldr	r3, [pc, #300]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ee      	beq.n	800604c <HAL_RCC_OscConfig+0x368>
 800606e:	e014      	b.n	800609a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fb fb44 	bl	80016fc <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006076:	e00a      	b.n	800608e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006078:	f7fb fb40 	bl	80016fc <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e0c1      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800608e:	4b40      	ldr	r3, [pc, #256]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ee      	bne.n	8006078 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d105      	bne.n	80060ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 80060a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80ad 	beq.w	8006210 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060b6:	4b36      	ldr	r3, [pc, #216]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d060      	beq.n	8006184 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d145      	bne.n	8006156 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b33      	ldr	r3, [pc, #204]	@ (8006198 <HAL_RCC_OscConfig+0x4b4>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fb fb14 	bl	80016fc <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fb fb10 	bl	80016fc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e093      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b29      	ldr	r3, [pc, #164]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006120:	071b      	lsls	r3, r3, #28
 8006122:	491b      	ldr	r1, [pc, #108]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006128:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <HAL_RCC_OscConfig+0x4b4>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612e:	f7fb fae5 	bl	80016fc <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006136:	f7fb fae1 	bl	80016fc <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e064      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006148:	4b11      	ldr	r3, [pc, #68]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x452>
 8006154:	e05c      	b.n	8006210 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <HAL_RCC_OscConfig+0x4b4>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fb face 	bl	80016fc <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006164:	f7fb faca 	bl	80016fc <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e04d      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <HAL_RCC_OscConfig+0x4ac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x480>
 8006182:	e045      	b.n	8006210 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d107      	bne.n	800619c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e040      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
 8006190:	40023800 	.word	0x40023800
 8006194:	40007000 	.word	0x40007000
 8006198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800619c:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <HAL_RCC_OscConfig+0x538>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d030      	beq.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d129      	bne.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d122      	bne.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d119      	bne.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d10f      	bne.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800

08006220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e041      	b.n	80062b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb f842 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f000 fb28 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e041      	b.n	8006354 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fa ffd1 	bl	800128c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fad9 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start+0x24>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e022      	b.n	80063c6 <HAL_TIM_PWM_Start+0x6a>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d109      	bne.n	800639a <HAL_TIM_PWM_Start+0x3e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e015      	b.n	80063c6 <HAL_TIM_PWM_Start+0x6a>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x58>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e008      	b.n	80063c6 <HAL_TIM_PWM_Start+0x6a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e07c      	b.n	80064c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <HAL_TIM_PWM_Start+0x82>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063dc:	e013      	b.n	8006406 <HAL_TIM_PWM_Start+0xaa>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_PWM_Start+0x92>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ec:	e00b      	b.n	8006406 <HAL_TIM_PWM_Start+0xaa>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063fc:	e003      	b.n	8006406 <HAL_TIM_PWM_Start+0xaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2201      	movs	r2, #1
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fcac 	bl	8006d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <HAL_TIM_PWM_Start+0x174>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_TIM_PWM_Start+0xcc>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2c      	ldr	r2, [pc, #176]	@ (80064d4 <HAL_TIM_PWM_Start+0x178>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d101      	bne.n	800642c <HAL_TIM_PWM_Start+0xd0>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_TIM_PWM_Start+0xd2>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006440:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a22      	ldr	r2, [pc, #136]	@ (80064d0 <HAL_TIM_PWM_Start+0x174>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006454:	d01d      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1f      	ldr	r2, [pc, #124]	@ (80064d8 <HAL_TIM_PWM_Start+0x17c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <HAL_TIM_PWM_Start+0x180>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1c      	ldr	r2, [pc, #112]	@ (80064e0 <HAL_TIM_PWM_Start+0x184>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <HAL_TIM_PWM_Start+0x178>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <HAL_TIM_PWM_Start+0x188>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_TIM_PWM_Start+0x136>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <HAL_TIM_PWM_Start+0x18c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d111      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d010      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	e007      	b.n	80064c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40010400 	.word	0x40010400
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40001800 	.word	0x40001800

080064ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0202 	mvn.w	r2, #2
 8006520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f99e 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f990 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9a1 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0204 	mvn.w	r2, #4
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2202      	movs	r2, #2
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f978 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f96a 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f97b 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d020      	beq.n	80065e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0208 	mvn.w	r2, #8
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2204      	movs	r2, #4
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f952 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f944 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f955 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d020      	beq.n	8006634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0210 	mvn.w	r2, #16
 8006604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2208      	movs	r2, #8
 800660a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f92c 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f91e 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f92f 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0201 	mvn.w	r2, #1
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8fc 	bl	8006850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fc76 	bl	8006f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00c      	beq.n	80066a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f900 	bl	80068a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0220 	mvn.w	r2, #32
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fc48 	bl	8006f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e0ae      	b.n	8006848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	f200 809f 	bhi.w	8006838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006735 	.word	0x08006735
 8006704:	08006839 	.word	0x08006839
 8006708:	08006839 	.word	0x08006839
 800670c:	08006839 	.word	0x08006839
 8006710:	08006775 	.word	0x08006775
 8006714:	08006839 	.word	0x08006839
 8006718:	08006839 	.word	0x08006839
 800671c:	08006839 	.word	0x08006839
 8006720:	080067b7 	.word	0x080067b7
 8006724:	08006839 	.word	0x08006839
 8006728:	08006839 	.word	0x08006839
 800672c:	08006839 	.word	0x08006839
 8006730:	080067f7 	.word	0x080067f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f966 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0208 	orr.w	r2, r2, #8
 800674e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0204 	bic.w	r2, r2, #4
 800675e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6999      	ldr	r1, [r3, #24]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	619a      	str	r2, [r3, #24]
      break;
 8006772:	e064      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f9b6 	bl	8006aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	619a      	str	r2, [r3, #24]
      break;
 80067b4:	e043      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fa0b 	bl	8006bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0208 	orr.w	r2, r2, #8
 80067d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0204 	bic.w	r2, r2, #4
 80067e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69d9      	ldr	r1, [r3, #28]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	61da      	str	r2, [r3, #28]
      break;
 80067f4:	e023      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fa5f 	bl	8006cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	021a      	lsls	r2, r3, #8
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	61da      	str	r2, [r3, #28]
      break;
 8006836:	e002      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
      break;
 800683c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a46      	ldr	r2, [pc, #280]	@ (80069e0 <TIM_Base_SetConfig+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d2:	d00f      	beq.n	80068f4 <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a43      	ldr	r2, [pc, #268]	@ (80069e4 <TIM_Base_SetConfig+0x130>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00b      	beq.n	80068f4 <TIM_Base_SetConfig+0x40>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a42      	ldr	r2, [pc, #264]	@ (80069e8 <TIM_Base_SetConfig+0x134>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_Base_SetConfig+0x40>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a41      	ldr	r2, [pc, #260]	@ (80069ec <TIM_Base_SetConfig+0x138>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a40      	ldr	r2, [pc, #256]	@ (80069f0 <TIM_Base_SetConfig+0x13c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d108      	bne.n	8006906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a35      	ldr	r2, [pc, #212]	@ (80069e0 <TIM_Base_SetConfig+0x12c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d02b      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006914:	d027      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a32      	ldr	r2, [pc, #200]	@ (80069e4 <TIM_Base_SetConfig+0x130>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d023      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a31      	ldr	r2, [pc, #196]	@ (80069e8 <TIM_Base_SetConfig+0x134>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01f      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a30      	ldr	r2, [pc, #192]	@ (80069ec <TIM_Base_SetConfig+0x138>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01b      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2f      	ldr	r2, [pc, #188]	@ (80069f0 <TIM_Base_SetConfig+0x13c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d017      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2e      	ldr	r2, [pc, #184]	@ (80069f4 <TIM_Base_SetConfig+0x140>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2d      	ldr	r2, [pc, #180]	@ (80069f8 <TIM_Base_SetConfig+0x144>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00f      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2c      	ldr	r2, [pc, #176]	@ (80069fc <TIM_Base_SetConfig+0x148>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00b      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2b      	ldr	r2, [pc, #172]	@ (8006a00 <TIM_Base_SetConfig+0x14c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d007      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2a      	ldr	r2, [pc, #168]	@ (8006a04 <TIM_Base_SetConfig+0x150>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a29      	ldr	r2, [pc, #164]	@ (8006a08 <TIM_Base_SetConfig+0x154>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d108      	bne.n	8006978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a10      	ldr	r2, [pc, #64]	@ (80069e0 <TIM_Base_SetConfig+0x12c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_Base_SetConfig+0xf8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a12      	ldr	r2, [pc, #72]	@ (80069f0 <TIM_Base_SetConfig+0x13c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d103      	bne.n	80069b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d105      	bne.n	80069d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f023 0201 	bic.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	611a      	str	r2, [r3, #16]
  }
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40001800 	.word	0x40001800
 8006a04:	40001c00 	.word	0x40001c00
 8006a08:	40002000 	.word	0x40002000

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f023 0201 	bic.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0302 	bic.w	r3, r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a20      	ldr	r2, [pc, #128]	@ (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC1_SetConfig+0x64>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10c      	bne.n	8006a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0308 	bic.w	r3, r3, #8
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 0304 	bic.w	r3, r3, #4
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC1_SetConfig+0x8e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a14      	ldr	r2, [pc, #80]	@ (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d111      	bne.n	8006abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f023 0210 	bic.w	r2, r3, #16
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0320 	bic.w	r3, r3, #32
 8006b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a22      	ldr	r2, [pc, #136]	@ (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0x68>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a21      	ldr	r2, [pc, #132]	@ (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10d      	bne.n	8006b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	@ (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC2_SetConfig+0x94>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	@ (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d113      	bne.n	8006ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400

08006bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a21      	ldr	r2, [pc, #132]	@ (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x66>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a20      	ldr	r2, [pc, #128]	@ (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10d      	bne.n	8006c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	@ (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC3_SetConfig+0x92>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a15      	ldr	r2, [pc, #84]	@ (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d113      	bne.n	8006c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	621a      	str	r2, [r3, #32]
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	@ (8006d64 <TIM_OC4_SetConfig+0xa4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC4_SetConfig+0x68>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a11      	ldr	r2, [pc, #68]	@ (8006d68 <TIM_OC4_SetConfig+0xa8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	019b      	lsls	r3, r3, #6
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2201      	movs	r2, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	401a      	ands	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	fa01 f303 	lsl.w	r3, r1, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e05a      	b.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a21      	ldr	r2, [pc, #132]	@ (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d022      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1c:	d01d      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d018      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00e      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a17      	ldr	r2, [pc, #92]	@ (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a15      	ldr	r2, [pc, #84]	@ (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d10c      	bne.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40010400 	.word	0x40010400
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40001800 	.word	0x40001800

08006eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e03d      	b.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e042      	b.n	8007014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fa f9f6 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	@ 0x24
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f973 	bl	80072ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	@ 0x28
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b20      	cmp	r3, #32
 800703a:	d175      	bne.n	8007128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_UART_Transmit+0x2c>
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e06e      	b.n	800712a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2221      	movs	r2, #33	@ 0x21
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800705a:	f7fa fb4f 	bl	80016fc <HAL_GetTick>
 800705e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	88fa      	ldrh	r2, [r7, #6]
 800706a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007074:	d108      	bne.n	8007088 <HAL_UART_Transmit+0x6c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e003      	b.n	8007090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007090:	e02e      	b.n	80070f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2180      	movs	r1, #128	@ 0x80
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f848 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e03a      	b.n	800712a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	3302      	adds	r3, #2
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	e007      	b.n	80070e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	781a      	ldrb	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	3301      	adds	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1cb      	bne.n	8007092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2200      	movs	r2, #0
 8007102:	2140      	movs	r1, #64	@ 0x40
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f814 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	e03b      	b.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d037      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714c:	f7fa fad6 	bl	80016fc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	429a      	cmp	r2, r3
 800715a:	d302      	bcc.n	8007162 <UART_WaitOnFlagUntilTimeout+0x30>
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e03a      	b.n	80071dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d023      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d020      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d01d      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	2b08      	cmp	r3, #8
 800718c:	d116      	bne.n	80071bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f81d 	bl	80071e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2208      	movs	r2, #8
 80071ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e00f      	b.n	80071dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d0b4      	beq.n	8007144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b095      	sub	sp, #84	@ 0x54
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800720c:	643a      	str	r2, [r7, #64]	@ 0x40
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3314      	adds	r3, #20
 8007226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007258:	2b01      	cmp	r3, #1
 800725a:	d119      	bne.n	8007290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	60bb      	str	r3, [r7, #8]
   return(result);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0310 	bic.w	r3, r3, #16
 8007272:	647b      	str	r3, [r7, #68]	@ 0x44
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800727c:	61ba      	str	r2, [r7, #24]
 800727e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800729e:	bf00      	nop
 80072a0:	3754      	adds	r7, #84	@ 0x54
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b0:	b0c0      	sub	sp, #256	@ 0x100
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	68d9      	ldr	r1, [r3, #12]
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	ea40 0301 	orr.w	r3, r0, r1
 80072d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007304:	f021 010c 	bic.w	r1, r1, #12
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007312:	430b      	orrs	r3, r1
 8007314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	6999      	ldr	r1, [r3, #24]
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	ea40 0301 	orr.w	r3, r0, r1
 8007332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b8f      	ldr	r3, [pc, #572]	@ (8007578 <UART_SetConfig+0x2cc>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d005      	beq.n	800734c <UART_SetConfig+0xa0>
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b8d      	ldr	r3, [pc, #564]	@ (800757c <UART_SetConfig+0x2d0>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d104      	bne.n	8007356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800734c:	f7fd ff5c 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8007350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007354:	e003      	b.n	800735e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fd ff43 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 800735a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007368:	f040 810c 	bne.w	8007584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800736c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007370:	2200      	movs	r2, #0
 8007372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800737a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	1891      	adds	r1, r2, r2
 8007384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007386:	415b      	adcs	r3, r3
 8007388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800738a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800738e:	4621      	mov	r1, r4
 8007390:	eb12 0801 	adds.w	r8, r2, r1
 8007394:	4629      	mov	r1, r5
 8007396:	eb43 0901 	adc.w	r9, r3, r1
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ae:	4690      	mov	r8, r2
 80073b0:	4699      	mov	r9, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	eb18 0303 	adds.w	r3, r8, r3
 80073b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073bc:	462b      	mov	r3, r5
 80073be:	eb49 0303 	adc.w	r3, r9, r3
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073da:	460b      	mov	r3, r1
 80073dc:	18db      	adds	r3, r3, r3
 80073de:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e0:	4613      	mov	r3, r2
 80073e2:	eb42 0303 	adc.w	r3, r2, r3
 80073e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073f0:	f7f8 ff66 	bl	80002c0 <__aeabi_uldivmod>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4b61      	ldr	r3, [pc, #388]	@ (8007580 <UART_SetConfig+0x2d4>)
 80073fa:	fba3 2302 	umull	r2, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	011c      	lsls	r4, r3, #4
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800740c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	1891      	adds	r1, r2, r2
 800741a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800741c:	415b      	adcs	r3, r3
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007424:	4641      	mov	r1, r8
 8007426:	eb12 0a01 	adds.w	sl, r2, r1
 800742a:	4649      	mov	r1, r9
 800742c:	eb43 0b01 	adc.w	fp, r3, r1
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800743c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007444:	4692      	mov	sl, r2
 8007446:	469b      	mov	fp, r3
 8007448:	4643      	mov	r3, r8
 800744a:	eb1a 0303 	adds.w	r3, sl, r3
 800744e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007452:	464b      	mov	r3, r9
 8007454:	eb4b 0303 	adc.w	r3, fp, r3
 8007458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800746c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007470:	460b      	mov	r3, r1
 8007472:	18db      	adds	r3, r3, r3
 8007474:	643b      	str	r3, [r7, #64]	@ 0x40
 8007476:	4613      	mov	r3, r2
 8007478:	eb42 0303 	adc.w	r3, r2, r3
 800747c:	647b      	str	r3, [r7, #68]	@ 0x44
 800747e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007486:	f7f8 ff1b 	bl	80002c0 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4611      	mov	r1, r2
 8007490:	4b3b      	ldr	r3, [pc, #236]	@ (8007580 <UART_SetConfig+0x2d4>)
 8007492:	fba3 2301 	umull	r2, r3, r3, r1
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2264      	movs	r2, #100	@ 0x64
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	1acb      	subs	r3, r1, r3
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074a6:	4b36      	ldr	r3, [pc, #216]	@ (8007580 <UART_SetConfig+0x2d4>)
 80074a8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074b4:	441c      	add	r4, r3
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	1891      	adds	r1, r2, r2
 80074ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074d0:	415b      	adcs	r3, r3
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074d8:	4641      	mov	r1, r8
 80074da:	1851      	adds	r1, r2, r1
 80074dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80074de:	4649      	mov	r1, r9
 80074e0:	414b      	adcs	r3, r1
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074f0:	4659      	mov	r1, fp
 80074f2:	00cb      	lsls	r3, r1, #3
 80074f4:	4651      	mov	r1, sl
 80074f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fa:	4651      	mov	r1, sl
 80074fc:	00ca      	lsls	r2, r1, #3
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	4603      	mov	r3, r0
 8007504:	4642      	mov	r2, r8
 8007506:	189b      	adds	r3, r3, r2
 8007508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800750c:	464b      	mov	r3, r9
 800750e:	460a      	mov	r2, r1
 8007510:	eb42 0303 	adc.w	r3, r2, r3
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800752c:	460b      	mov	r3, r1
 800752e:	18db      	adds	r3, r3, r3
 8007530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007532:	4613      	mov	r3, r2
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800753e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007542:	f7f8 febd 	bl	80002c0 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <UART_SetConfig+0x2d4>)
 800754c:	fba3 1302 	umull	r1, r3, r3, r2
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	2164      	movs	r1, #100	@ 0x64
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	3332      	adds	r3, #50	@ 0x32
 800755e:	4a08      	ldr	r2, [pc, #32]	@ (8007580 <UART_SetConfig+0x2d4>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	f003 0207 	and.w	r2, r3, #7
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4422      	add	r2, r4
 8007572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007574:	e106      	b.n	8007784 <UART_SetConfig+0x4d8>
 8007576:	bf00      	nop
 8007578:	40011000 	.word	0x40011000
 800757c:	40011400 	.word	0x40011400
 8007580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007588:	2200      	movs	r2, #0
 800758a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800758e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	1891      	adds	r1, r2, r2
 800759c:	6239      	str	r1, [r7, #32]
 800759e:	415b      	adcs	r3, r3
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075a6:	4641      	mov	r1, r8
 80075a8:	1854      	adds	r4, r2, r1
 80075aa:	4649      	mov	r1, r9
 80075ac:	eb43 0501 	adc.w	r5, r3, r1
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	00eb      	lsls	r3, r5, #3
 80075ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075be:	00e2      	lsls	r2, r4, #3
 80075c0:	4614      	mov	r4, r2
 80075c2:	461d      	mov	r5, r3
 80075c4:	4643      	mov	r3, r8
 80075c6:	18e3      	adds	r3, r4, r3
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075cc:	464b      	mov	r3, r9
 80075ce:	eb45 0303 	adc.w	r3, r5, r3
 80075d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075f2:	4629      	mov	r1, r5
 80075f4:	008b      	lsls	r3, r1, #2
 80075f6:	4621      	mov	r1, r4
 80075f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fc:	4621      	mov	r1, r4
 80075fe:	008a      	lsls	r2, r1, #2
 8007600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007604:	f7f8 fe5c 	bl	80002c0 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4b60      	ldr	r3, [pc, #384]	@ (8007790 <UART_SetConfig+0x4e4>)
 800760e:	fba3 2302 	umull	r2, r3, r3, r2
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	011c      	lsls	r4, r3, #4
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	61b9      	str	r1, [r7, #24]
 8007630:	415b      	adcs	r3, r3
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6139      	str	r1, [r7, #16]
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800766c:	464b      	mov	r3, r9
 800766e:	460a      	mov	r2, r1
 8007670:	eb42 0303 	adc.w	r3, r2, r3
 8007674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007690:	4649      	mov	r1, r9
 8007692:	008b      	lsls	r3, r1, #2
 8007694:	4641      	mov	r1, r8
 8007696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769a:	4641      	mov	r1, r8
 800769c:	008a      	lsls	r2, r1, #2
 800769e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076a2:	f7f8 fe0d 	bl	80002c0 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	4b38      	ldr	r3, [pc, #224]	@ (8007790 <UART_SetConfig+0x4e4>)
 80076ae:	fba3 2301 	umull	r2, r3, r3, r1
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	2264      	movs	r2, #100	@ 0x64
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	1acb      	subs	r3, r1, r3
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	3332      	adds	r3, #50	@ 0x32
 80076c0:	4a33      	ldr	r2, [pc, #204]	@ (8007790 <UART_SetConfig+0x4e4>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076cc:	441c      	add	r4, r3
 80076ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d2:	2200      	movs	r2, #0
 80076d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80076d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80076d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	1891      	adds	r1, r2, r2
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	415b      	adcs	r3, r3
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ec:	4641      	mov	r1, r8
 80076ee:	1851      	adds	r1, r2, r1
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	4649      	mov	r1, r9
 80076f4:	414b      	adcs	r3, r1
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007704:	4659      	mov	r1, fp
 8007706:	00cb      	lsls	r3, r1, #3
 8007708:	4651      	mov	r1, sl
 800770a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800770e:	4651      	mov	r1, sl
 8007710:	00ca      	lsls	r2, r1, #3
 8007712:	4610      	mov	r0, r2
 8007714:	4619      	mov	r1, r3
 8007716:	4603      	mov	r3, r0
 8007718:	4642      	mov	r2, r8
 800771a:	189b      	adds	r3, r3, r2
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800771e:	464b      	mov	r3, r9
 8007720:	460a      	mov	r2, r1
 8007722:	eb42 0303 	adc.w	r3, r2, r3
 8007726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	663b      	str	r3, [r7, #96]	@ 0x60
 8007732:	667a      	str	r2, [r7, #100]	@ 0x64
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007740:	4649      	mov	r1, r9
 8007742:	008b      	lsls	r3, r1, #2
 8007744:	4641      	mov	r1, r8
 8007746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774a:	4641      	mov	r1, r8
 800774c:	008a      	lsls	r2, r1, #2
 800774e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007752:	f7f8 fdb5 	bl	80002c0 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4b0d      	ldr	r3, [pc, #52]	@ (8007790 <UART_SetConfig+0x4e4>)
 800775c:	fba3 1302 	umull	r1, r3, r3, r2
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	2164      	movs	r1, #100	@ 0x64
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	3332      	adds	r3, #50	@ 0x32
 800776e:	4a08      	ldr	r2, [pc, #32]	@ (8007790 <UART_SetConfig+0x4e4>)
 8007770:	fba2 2303 	umull	r2, r3, r2, r3
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4422      	add	r2, r4
 8007782:	609a      	str	r2, [r3, #8]
}
 8007784:	bf00      	nop
 8007786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800778a:	46bd      	mov	sp, r7
 800778c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007790:	51eb851f 	.word	0x51eb851f

08007794 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007794:	b084      	sub	sp, #16
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	f107 001c 	add.w	r0, r7, #28
 80077a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d123      	bne.n	80077f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80077c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d105      	bne.n	80077ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa9a 	bl	8007d24 <USB_CoreReset>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	e01b      	b.n	800782e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa8e 	bl	8007d24 <USB_CoreReset>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800780c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007818:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007820:	e005      	b.n	800782e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007826:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800782e:	7fbb      	ldrb	r3, [r7, #30]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10b      	bne.n	800784c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f043 0206 	orr.w	r2, r3, #6
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007858:	b004      	add	sp, #16
 800785a:	4770      	bx	lr

0800785c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f023 0201 	bic.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d115      	bne.n	80078cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ac:	200a      	movs	r0, #10
 80078ae:	f7f9 ff31 	bl	8001714 <HAL_Delay>
      ms += 10U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	330a      	adds	r3, #10
 80078b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa25 	bl	8007d08 <USB_GetMode>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d01e      	beq.n	8007902 <USB_SetCurrentMode+0x84>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80078c8:	d9f0      	bls.n	80078ac <USB_SetCurrentMode+0x2e>
 80078ca:	e01a      	b.n	8007902 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d115      	bne.n	80078fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078de:	200a      	movs	r0, #10
 80078e0:	f7f9 ff18 	bl	8001714 <HAL_Delay>
      ms += 10U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	330a      	adds	r3, #10
 80078e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa0c 	bl	8007d08 <USB_GetMode>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <USB_SetCurrentMode+0x84>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078fa:	d9f0      	bls.n	80078de <USB_SetCurrentMode+0x60>
 80078fc:	e001      	b.n	8007902 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e005      	b.n	800790e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2bc8      	cmp	r3, #200	@ 0xc8
 8007906:	d101      	bne.n	800790c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007918:	b084      	sub	sp, #16
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	e009      	b.n	800794c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3340      	adds	r3, #64	@ 0x40
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	2200      	movs	r2, #0
 8007944:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3301      	adds	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b0e      	cmp	r3, #14
 8007950:	d9f2      	bls.n	8007938 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007952:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007956:	2b00      	cmp	r3, #0
 8007958:	d11c      	bne.n	8007994 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007968:	f043 0302 	orr.w	r3, r3, #2
 800796c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	e005      	b.n	80079a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007998:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079a6:	461a      	mov	r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d10d      	bne.n	80079d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079bc:	2100      	movs	r1, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f968 	bl	8007c94 <USB_SetDevSpeed>
 80079c4:	e008      	b.n	80079d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079c6:	2101      	movs	r1, #1
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f963 	bl	8007c94 <USB_SetDevSpeed>
 80079ce:	e003      	b.n	80079d8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079d0:	2103      	movs	r1, #3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f95e 	bl	8007c94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079d8:	2110      	movs	r1, #16
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8fa 	bl	8007bd4 <USB_FlushTxFifo>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f924 	bl	8007c38 <USB_FlushRxFifo>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e043      	b.n	8007aac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a3a:	d118      	bne.n	8007a6e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	e013      	b.n	8007a80 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e008      	b.n	8007a80 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007aa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d3b5      	bcc.n	8007a24 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	e043      	b.n	8007b46 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ad4:	d118      	bne.n	8007b08 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	e013      	b.n	8007b1a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afe:	461a      	mov	r2, r3
 8007b00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	e008      	b.n	8007b1a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3301      	adds	r3, #1
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d3b5      	bcc.n	8007abe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f043 0210 	orr.w	r2, r3, #16
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <USB_DevInit+0x2b8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f043 0208 	orr.w	r2, r3, #8
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ba8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bb8:	f043 0304 	orr.w	r3, r3, #4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bcc:	b004      	add	sp, #16
 8007bce:	4770      	bx	lr
 8007bd0:	803c3800 	.word	0x803c3800

08007bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bee:	d901      	bls.n	8007bf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e01b      	b.n	8007c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	daf2      	bge.n	8007be2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	019b      	lsls	r3, r3, #6
 8007c04:	f043 0220 	orr.w	r2, r3, #32
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c18:	d901      	bls.n	8007c1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e006      	b.n	8007c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d0f0      	beq.n	8007c0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c50:	d901      	bls.n	8007c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e018      	b.n	8007c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	daf2      	bge.n	8007c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2210      	movs	r2, #16
 8007c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c74:	d901      	bls.n	8007c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e006      	b.n	8007c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d0f0      	beq.n	8007c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ce0:	f023 0303 	bic.w	r3, r3, #3
 8007ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf4:	f043 0302 	orr.w	r3, r3, #2
 8007cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	f003 0301 	and.w	r3, r3, #1
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d3c:	d901      	bls.n	8007d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e01b      	b.n	8007d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	daf2      	bge.n	8007d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f043 0201 	orr.w	r2, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d66:	d901      	bls.n	8007d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e006      	b.n	8007d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d0f0      	beq.n	8007d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <siprintf>:
 8007d88:	b40e      	push	{r1, r2, r3}
 8007d8a:	b500      	push	{lr}
 8007d8c:	b09c      	sub	sp, #112	@ 0x70
 8007d8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d90:	9002      	str	r0, [sp, #8]
 8007d92:	9006      	str	r0, [sp, #24]
 8007d94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d98:	4809      	ldr	r0, [pc, #36]	@ (8007dc0 <siprintf+0x38>)
 8007d9a:	9107      	str	r1, [sp, #28]
 8007d9c:	9104      	str	r1, [sp, #16]
 8007d9e:	4909      	ldr	r1, [pc, #36]	@ (8007dc4 <siprintf+0x3c>)
 8007da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da4:	9105      	str	r1, [sp, #20]
 8007da6:	6800      	ldr	r0, [r0, #0]
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	a902      	add	r1, sp, #8
 8007dac:	f000 f98e 	bl	80080cc <_svfiprintf_r>
 8007db0:	9b02      	ldr	r3, [sp, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
 8007db6:	b01c      	add	sp, #112	@ 0x70
 8007db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dbc:	b003      	add	sp, #12
 8007dbe:	4770      	bx	lr
 8007dc0:	2000000c 	.word	0x2000000c
 8007dc4:	ffff0208 	.word	0xffff0208

08007dc8 <memset>:
 8007dc8:	4402      	add	r2, r0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <__libc_init_array>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	4d0d      	ldr	r5, [pc, #52]	@ (8007e10 <__libc_init_array+0x38>)
 8007ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8007e14 <__libc_init_array+0x3c>)
 8007dde:	1b64      	subs	r4, r4, r5
 8007de0:	10a4      	asrs	r4, r4, #2
 8007de2:	2600      	movs	r6, #0
 8007de4:	42a6      	cmp	r6, r4
 8007de6:	d109      	bne.n	8007dfc <__libc_init_array+0x24>
 8007de8:	4d0b      	ldr	r5, [pc, #44]	@ (8007e18 <__libc_init_array+0x40>)
 8007dea:	4c0c      	ldr	r4, [pc, #48]	@ (8007e1c <__libc_init_array+0x44>)
 8007dec:	f000 fc74 	bl	80086d8 <_init>
 8007df0:	1b64      	subs	r4, r4, r5
 8007df2:	10a4      	asrs	r4, r4, #2
 8007df4:	2600      	movs	r6, #0
 8007df6:	42a6      	cmp	r6, r4
 8007df8:	d105      	bne.n	8007e06 <__libc_init_array+0x2e>
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e00:	4798      	blx	r3
 8007e02:	3601      	adds	r6, #1
 8007e04:	e7ee      	b.n	8007de4 <__libc_init_array+0xc>
 8007e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0a:	4798      	blx	r3
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	e7f2      	b.n	8007df6 <__libc_init_array+0x1e>
 8007e10:	0800894c 	.word	0x0800894c
 8007e14:	0800894c 	.word	0x0800894c
 8007e18:	0800894c 	.word	0x0800894c
 8007e1c:	08008950 	.word	0x08008950

08007e20 <__retarget_lock_acquire_recursive>:
 8007e20:	4770      	bx	lr

08007e22 <__retarget_lock_release_recursive>:
 8007e22:	4770      	bx	lr

08007e24 <_free_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4605      	mov	r5, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d041      	beq.n	8007eb0 <_free_r+0x8c>
 8007e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e30:	1f0c      	subs	r4, r1, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfb8      	it	lt
 8007e36:	18e4      	addlt	r4, r4, r3
 8007e38:	f000 f8e0 	bl	8007ffc <__malloc_lock>
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb4 <_free_r+0x90>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	b933      	cbnz	r3, 8007e50 <_free_r+0x2c>
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	6014      	str	r4, [r2, #0]
 8007e46:	4628      	mov	r0, r5
 8007e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4c:	f000 b8dc 	b.w	8008008 <__malloc_unlock>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d908      	bls.n	8007e66 <_free_r+0x42>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	1821      	adds	r1, r4, r0
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf01      	itttt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	e7ed      	b.n	8007e42 <_free_r+0x1e>
 8007e66:	461a      	mov	r2, r3
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b10b      	cbz	r3, 8007e70 <_free_r+0x4c>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d9fa      	bls.n	8007e66 <_free_r+0x42>
 8007e70:	6811      	ldr	r1, [r2, #0]
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d10b      	bne.n	8007e90 <_free_r+0x6c>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	1850      	adds	r0, r2, r1
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	d1e0      	bne.n	8007e46 <_free_r+0x22>
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	6053      	str	r3, [r2, #4]
 8007e8a:	4408      	add	r0, r1
 8007e8c:	6010      	str	r0, [r2, #0]
 8007e8e:	e7da      	b.n	8007e46 <_free_r+0x22>
 8007e90:	d902      	bls.n	8007e98 <_free_r+0x74>
 8007e92:	230c      	movs	r3, #12
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	e7d6      	b.n	8007e46 <_free_r+0x22>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf04      	itt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	6063      	str	r3, [r4, #4]
 8007ea6:	bf04      	itt	eq
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	6054      	str	r4, [r2, #4]
 8007eae:	e7ca      	b.n	8007e46 <_free_r+0x22>
 8007eb0:	bd38      	pop	{r3, r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20019004 	.word	0x20019004

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef8 <sbrk_aligned+0x40>)
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b911      	cbnz	r1, 8007eca <sbrk_aligned+0x12>
 8007ec4:	f000 fba6 	bl	8008614 <_sbrk_r>
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 fba1 	bl	8008614 <_sbrk_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d103      	bne.n	8007ede <sbrk_aligned+0x26>
 8007ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eda:	4620      	mov	r0, r4
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d0f8      	beq.n	8007eda <sbrk_aligned+0x22>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fb92 	bl	8008614 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d1f2      	bne.n	8007eda <sbrk_aligned+0x22>
 8007ef4:	e7ef      	b.n	8007ed6 <sbrk_aligned+0x1e>
 8007ef6:	bf00      	nop
 8007ef8:	20019000 	.word	0x20019000

08007efc <_malloc_r>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	1ccd      	adds	r5, r1, #3
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	4606      	mov	r6, r0
 8007f12:	db01      	blt.n	8007f18 <_malloc_r+0x1c>
 8007f14:	42a9      	cmp	r1, r5
 8007f16:	d904      	bls.n	8007f22 <_malloc_r+0x26>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff8 <_malloc_r+0xfc>
 8007f26:	f000 f869 	bl	8007ffc <__malloc_lock>
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	461c      	mov	r4, r3
 8007f30:	bb44      	cbnz	r4, 8007f84 <_malloc_r+0x88>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7ff ffbf 	bl	8007eb8 <sbrk_aligned>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	d158      	bne.n	8007ff2 <_malloc_r+0xf6>
 8007f40:	f8d8 4000 	ldr.w	r4, [r8]
 8007f44:	4627      	mov	r7, r4
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	d143      	bne.n	8007fd2 <_malloc_r+0xd6>
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d04b      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	eb04 0903 	add.w	r9, r4, r3
 8007f58:	f000 fb5c 	bl	8008614 <_sbrk_r>
 8007f5c:	4581      	cmp	r9, r0
 8007f5e:	d142      	bne.n	8007fe6 <_malloc_r+0xea>
 8007f60:	6821      	ldr	r1, [r4, #0]
 8007f62:	1a6d      	subs	r5, r5, r1
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff ffa6 	bl	8007eb8 <sbrk_aligned>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d03a      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	442b      	add	r3, r5
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	bb62      	cbnz	r2, 8007fd8 <_malloc_r+0xdc>
 8007f7e:	f8c8 7000 	str.w	r7, [r8]
 8007f82:	e00f      	b.n	8007fa4 <_malloc_r+0xa8>
 8007f84:	6822      	ldr	r2, [r4, #0]
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	d420      	bmi.n	8007fcc <_malloc_r+0xd0>
 8007f8a:	2a0b      	cmp	r2, #11
 8007f8c:	d917      	bls.n	8007fbe <_malloc_r+0xc2>
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	6059      	strne	r1, [r3, #4]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	bf08      	it	eq
 8007f9c:	f8c8 1000 	streq.w	r1, [r8]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f82f 	bl	8008008 <__malloc_unlock>
 8007faa:	f104 000b 	add.w	r0, r4, #11
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	f020 0007 	bic.w	r0, r0, #7
 8007fb4:	1ac2      	subs	r2, r0, r3
 8007fb6:	bf1c      	itt	ne
 8007fb8:	1a1b      	subne	r3, r3, r0
 8007fba:	50a3      	strne	r3, [r4, r2]
 8007fbc:	e7af      	b.n	8007f1e <_malloc_r+0x22>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	bf0c      	ite	eq
 8007fc4:	f8c8 2000 	streq.w	r2, [r8]
 8007fc8:	605a      	strne	r2, [r3, #4]
 8007fca:	e7eb      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fcc:	4623      	mov	r3, r4
 8007fce:	6864      	ldr	r4, [r4, #4]
 8007fd0:	e7ae      	b.n	8007f30 <_malloc_r+0x34>
 8007fd2:	463c      	mov	r4, r7
 8007fd4:	687f      	ldr	r7, [r7, #4]
 8007fd6:	e7b6      	b.n	8007f46 <_malloc_r+0x4a>
 8007fd8:	461a      	mov	r2, r3
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d1fb      	bne.n	8007fd8 <_malloc_r+0xdc>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6053      	str	r3, [r2, #4]
 8007fe4:	e7de      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f80c 	bl	8008008 <__malloc_unlock>
 8007ff0:	e794      	b.n	8007f1c <_malloc_r+0x20>
 8007ff2:	6005      	str	r5, [r0, #0]
 8007ff4:	e7d6      	b.n	8007fa4 <_malloc_r+0xa8>
 8007ff6:	bf00      	nop
 8007ff8:	20019004 	.word	0x20019004

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__malloc_lock+0x8>)
 8007ffe:	f7ff bf0f 	b.w	8007e20 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20018ffc 	.word	0x20018ffc

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_unlock+0x8>)
 800800a:	f7ff bf0a 	b.w	8007e22 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20018ffc 	.word	0x20018ffc

08008014 <__ssputs_r>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	688e      	ldr	r6, [r1, #8]
 800801a:	461f      	mov	r7, r3
 800801c:	42be      	cmp	r6, r7
 800801e:	680b      	ldr	r3, [r1, #0]
 8008020:	4682      	mov	sl, r0
 8008022:	460c      	mov	r4, r1
 8008024:	4690      	mov	r8, r2
 8008026:	d82d      	bhi.n	8008084 <__ssputs_r+0x70>
 8008028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800802c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008030:	d026      	beq.n	8008080 <__ssputs_r+0x6c>
 8008032:	6965      	ldr	r5, [r4, #20]
 8008034:	6909      	ldr	r1, [r1, #16]
 8008036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803a:	eba3 0901 	sub.w	r9, r3, r1
 800803e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008042:	1c7b      	adds	r3, r7, #1
 8008044:	444b      	add	r3, r9
 8008046:	106d      	asrs	r5, r5, #1
 8008048:	429d      	cmp	r5, r3
 800804a:	bf38      	it	cc
 800804c:	461d      	movcc	r5, r3
 800804e:	0553      	lsls	r3, r2, #21
 8008050:	d527      	bpl.n	80080a2 <__ssputs_r+0x8e>
 8008052:	4629      	mov	r1, r5
 8008054:	f7ff ff52 	bl	8007efc <_malloc_r>
 8008058:	4606      	mov	r6, r0
 800805a:	b360      	cbz	r0, 80080b6 <__ssputs_r+0xa2>
 800805c:	6921      	ldr	r1, [r4, #16]
 800805e:	464a      	mov	r2, r9
 8008060:	f000 fae8 	bl	8008634 <memcpy>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800806a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	6126      	str	r6, [r4, #16]
 8008072:	6165      	str	r5, [r4, #20]
 8008074:	444e      	add	r6, r9
 8008076:	eba5 0509 	sub.w	r5, r5, r9
 800807a:	6026      	str	r6, [r4, #0]
 800807c:	60a5      	str	r5, [r4, #8]
 800807e:	463e      	mov	r6, r7
 8008080:	42be      	cmp	r6, r7
 8008082:	d900      	bls.n	8008086 <__ssputs_r+0x72>
 8008084:	463e      	mov	r6, r7
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	4632      	mov	r2, r6
 800808a:	4641      	mov	r1, r8
 800808c:	f000 faa8 	bl	80085e0 <memmove>
 8008090:	68a3      	ldr	r3, [r4, #8]
 8008092:	1b9b      	subs	r3, r3, r6
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	4433      	add	r3, r6
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	462a      	mov	r2, r5
 80080a4:	f000 fad4 	bl	8008650 <_realloc_r>
 80080a8:	4606      	mov	r6, r0
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1e0      	bne.n	8008070 <__ssputs_r+0x5c>
 80080ae:	6921      	ldr	r1, [r4, #16]
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7ff feb7 	bl	8007e24 <_free_r>
 80080b6:	230c      	movs	r3, #12
 80080b8:	f8ca 3000 	str.w	r3, [sl]
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	e7e9      	b.n	800809e <__ssputs_r+0x8a>
	...

080080cc <_svfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	4698      	mov	r8, r3
 80080d2:	898b      	ldrh	r3, [r1, #12]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	b09d      	sub	sp, #116	@ 0x74
 80080d8:	4607      	mov	r7, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	d510      	bpl.n	8008102 <_svfiprintf_r+0x36>
 80080e0:	690b      	ldr	r3, [r1, #16]
 80080e2:	b973      	cbnz	r3, 8008102 <_svfiprintf_r+0x36>
 80080e4:	2140      	movs	r1, #64	@ 0x40
 80080e6:	f7ff ff09 	bl	8007efc <_malloc_r>
 80080ea:	6028      	str	r0, [r5, #0]
 80080ec:	6128      	str	r0, [r5, #16]
 80080ee:	b930      	cbnz	r0, 80080fe <_svfiprintf_r+0x32>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b01d      	add	sp, #116	@ 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	2340      	movs	r3, #64	@ 0x40
 8008100:	616b      	str	r3, [r5, #20]
 8008102:	2300      	movs	r3, #0
 8008104:	9309      	str	r3, [sp, #36]	@ 0x24
 8008106:	2320      	movs	r3, #32
 8008108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800810c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008110:	2330      	movs	r3, #48	@ 0x30
 8008112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082b0 <_svfiprintf_r+0x1e4>
 8008116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800811a:	f04f 0901 	mov.w	r9, #1
 800811e:	4623      	mov	r3, r4
 8008120:	469a      	mov	sl, r3
 8008122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008126:	b10a      	cbz	r2, 800812c <_svfiprintf_r+0x60>
 8008128:	2a25      	cmp	r2, #37	@ 0x25
 800812a:	d1f9      	bne.n	8008120 <_svfiprintf_r+0x54>
 800812c:	ebba 0b04 	subs.w	fp, sl, r4
 8008130:	d00b      	beq.n	800814a <_svfiprintf_r+0x7e>
 8008132:	465b      	mov	r3, fp
 8008134:	4622      	mov	r2, r4
 8008136:	4629      	mov	r1, r5
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ff6b 	bl	8008014 <__ssputs_r>
 800813e:	3001      	adds	r0, #1
 8008140:	f000 80a7 	beq.w	8008292 <_svfiprintf_r+0x1c6>
 8008144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008146:	445a      	add	r2, fp
 8008148:	9209      	str	r2, [sp, #36]	@ 0x24
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 809f 	beq.w	8008292 <_svfiprintf_r+0x1c6>
 8008154:	2300      	movs	r3, #0
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815e:	f10a 0a01 	add.w	sl, sl, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800816a:	931a      	str	r3, [sp, #104]	@ 0x68
 800816c:	4654      	mov	r4, sl
 800816e:	2205      	movs	r2, #5
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	484e      	ldr	r0, [pc, #312]	@ (80082b0 <_svfiprintf_r+0x1e4>)
 8008176:	f7f8 f853 	bl	8000220 <memchr>
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	b9d8      	cbnz	r0, 80081b6 <_svfiprintf_r+0xea>
 800817e:	06d0      	lsls	r0, r2, #27
 8008180:	bf44      	itt	mi
 8008182:	2320      	movmi	r3, #32
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008188:	0711      	lsls	r1, r2, #28
 800818a:	bf44      	itt	mi
 800818c:	232b      	movmi	r3, #43	@ 0x2b
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008192:	f89a 3000 	ldrb.w	r3, [sl]
 8008196:	2b2a      	cmp	r3, #42	@ 0x2a
 8008198:	d015      	beq.n	80081c6 <_svfiprintf_r+0xfa>
 800819a:	9a07      	ldr	r2, [sp, #28]
 800819c:	4654      	mov	r4, sl
 800819e:	2000      	movs	r0, #0
 80081a0:	f04f 0c0a 	mov.w	ip, #10
 80081a4:	4621      	mov	r1, r4
 80081a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081aa:	3b30      	subs	r3, #48	@ 0x30
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d94b      	bls.n	8008248 <_svfiprintf_r+0x17c>
 80081b0:	b1b0      	cbz	r0, 80081e0 <_svfiprintf_r+0x114>
 80081b2:	9207      	str	r2, [sp, #28]
 80081b4:	e014      	b.n	80081e0 <_svfiprintf_r+0x114>
 80081b6:	eba0 0308 	sub.w	r3, r0, r8
 80081ba:	fa09 f303 	lsl.w	r3, r9, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	46a2      	mov	sl, r4
 80081c4:	e7d2      	b.n	800816c <_svfiprintf_r+0xa0>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	1d19      	adds	r1, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9103      	str	r1, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfbb      	ittet	lt
 80081d2:	425b      	neglt	r3, r3
 80081d4:	f042 0202 	orrlt.w	r2, r2, #2
 80081d8:	9307      	strge	r3, [sp, #28]
 80081da:	9307      	strlt	r3, [sp, #28]
 80081dc:	bfb8      	it	lt
 80081de:	9204      	strlt	r2, [sp, #16]
 80081e0:	7823      	ldrb	r3, [r4, #0]
 80081e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081e4:	d10a      	bne.n	80081fc <_svfiprintf_r+0x130>
 80081e6:	7863      	ldrb	r3, [r4, #1]
 80081e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ea:	d132      	bne.n	8008252 <_svfiprintf_r+0x186>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081f8:	3402      	adds	r4, #2
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082c0 <_svfiprintf_r+0x1f4>
 8008200:	7821      	ldrb	r1, [r4, #0]
 8008202:	2203      	movs	r2, #3
 8008204:	4650      	mov	r0, sl
 8008206:	f7f8 f80b 	bl	8000220 <memchr>
 800820a:	b138      	cbz	r0, 800821c <_svfiprintf_r+0x150>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	eba0 000a 	sub.w	r0, r0, sl
 8008212:	2240      	movs	r2, #64	@ 0x40
 8008214:	4082      	lsls	r2, r0
 8008216:	4313      	orrs	r3, r2
 8008218:	3401      	adds	r4, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008220:	4824      	ldr	r0, [pc, #144]	@ (80082b4 <_svfiprintf_r+0x1e8>)
 8008222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008226:	2206      	movs	r2, #6
 8008228:	f7f7 fffa 	bl	8000220 <memchr>
 800822c:	2800      	cmp	r0, #0
 800822e:	d036      	beq.n	800829e <_svfiprintf_r+0x1d2>
 8008230:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <_svfiprintf_r+0x1ec>)
 8008232:	bb1b      	cbnz	r3, 800827c <_svfiprintf_r+0x1b0>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	3307      	adds	r3, #7
 8008238:	f023 0307 	bic.w	r3, r3, #7
 800823c:	3308      	adds	r3, #8
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008242:	4433      	add	r3, r6
 8008244:	9309      	str	r3, [sp, #36]	@ 0x24
 8008246:	e76a      	b.n	800811e <_svfiprintf_r+0x52>
 8008248:	fb0c 3202 	mla	r2, ip, r2, r3
 800824c:	460c      	mov	r4, r1
 800824e:	2001      	movs	r0, #1
 8008250:	e7a8      	b.n	80081a4 <_svfiprintf_r+0xd8>
 8008252:	2300      	movs	r3, #0
 8008254:	3401      	adds	r4, #1
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	4619      	mov	r1, r3
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008264:	3a30      	subs	r2, #48	@ 0x30
 8008266:	2a09      	cmp	r2, #9
 8008268:	d903      	bls.n	8008272 <_svfiprintf_r+0x1a6>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0c6      	beq.n	80081fc <_svfiprintf_r+0x130>
 800826e:	9105      	str	r1, [sp, #20]
 8008270:	e7c4      	b.n	80081fc <_svfiprintf_r+0x130>
 8008272:	fb0c 2101 	mla	r1, ip, r1, r2
 8008276:	4604      	mov	r4, r0
 8008278:	2301      	movs	r3, #1
 800827a:	e7f0      	b.n	800825e <_svfiprintf_r+0x192>
 800827c:	ab03      	add	r3, sp, #12
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462a      	mov	r2, r5
 8008282:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <_svfiprintf_r+0x1f0>)
 8008284:	a904      	add	r1, sp, #16
 8008286:	4638      	mov	r0, r7
 8008288:	f3af 8000 	nop.w
 800828c:	1c42      	adds	r2, r0, #1
 800828e:	4606      	mov	r6, r0
 8008290:	d1d6      	bne.n	8008240 <_svfiprintf_r+0x174>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	065b      	lsls	r3, r3, #25
 8008296:	f53f af2d 	bmi.w	80080f4 <_svfiprintf_r+0x28>
 800829a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800829c:	e72c      	b.n	80080f8 <_svfiprintf_r+0x2c>
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	462a      	mov	r2, r5
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <_svfiprintf_r+0x1f0>)
 80082a6:	a904      	add	r1, sp, #16
 80082a8:	4638      	mov	r0, r7
 80082aa:	f000 f879 	bl	80083a0 <_printf_i>
 80082ae:	e7ed      	b.n	800828c <_svfiprintf_r+0x1c0>
 80082b0:	08008910 	.word	0x08008910
 80082b4:	0800891a 	.word	0x0800891a
 80082b8:	00000000 	.word	0x00000000
 80082bc:	08008015 	.word	0x08008015
 80082c0:	08008916 	.word	0x08008916

080082c4 <_printf_common>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	4616      	mov	r6, r2
 80082ca:	4698      	mov	r8, r3
 80082cc:	688a      	ldr	r2, [r1, #8]
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	bfb8      	it	lt
 80082d8:	4613      	movlt	r3, r2
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082e0:	4607      	mov	r7, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b10a      	cbz	r2, 80082ea <_printf_common+0x26>
 80082e6:	3301      	adds	r3, #1
 80082e8:	6033      	str	r3, [r6, #0]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	0699      	lsls	r1, r3, #26
 80082ee:	bf42      	ittt	mi
 80082f0:	6833      	ldrmi	r3, [r6, #0]
 80082f2:	3302      	addmi	r3, #2
 80082f4:	6033      	strmi	r3, [r6, #0]
 80082f6:	6825      	ldr	r5, [r4, #0]
 80082f8:	f015 0506 	ands.w	r5, r5, #6
 80082fc:	d106      	bne.n	800830c <_printf_common+0x48>
 80082fe:	f104 0a19 	add.w	sl, r4, #25
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	6832      	ldr	r2, [r6, #0]
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	42ab      	cmp	r3, r5
 800830a:	dc26      	bgt.n	800835a <_printf_common+0x96>
 800830c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	3b00      	subs	r3, #0
 8008314:	bf18      	it	ne
 8008316:	2301      	movne	r3, #1
 8008318:	0692      	lsls	r2, r2, #26
 800831a:	d42b      	bmi.n	8008374 <_printf_common+0xb0>
 800831c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008320:	4641      	mov	r1, r8
 8008322:	4638      	mov	r0, r7
 8008324:	47c8      	blx	r9
 8008326:	3001      	adds	r0, #1
 8008328:	d01e      	beq.n	8008368 <_printf_common+0xa4>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	6922      	ldr	r2, [r4, #16]
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	2b04      	cmp	r3, #4
 8008334:	bf02      	ittt	eq
 8008336:	68e5      	ldreq	r5, [r4, #12]
 8008338:	6833      	ldreq	r3, [r6, #0]
 800833a:	1aed      	subeq	r5, r5, r3
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	bf0c      	ite	eq
 8008340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008344:	2500      	movne	r5, #0
 8008346:	4293      	cmp	r3, r2
 8008348:	bfc4      	itt	gt
 800834a:	1a9b      	subgt	r3, r3, r2
 800834c:	18ed      	addgt	r5, r5, r3
 800834e:	2600      	movs	r6, #0
 8008350:	341a      	adds	r4, #26
 8008352:	42b5      	cmp	r5, r6
 8008354:	d11a      	bne.n	800838c <_printf_common+0xc8>
 8008356:	2000      	movs	r0, #0
 8008358:	e008      	b.n	800836c <_printf_common+0xa8>
 800835a:	2301      	movs	r3, #1
 800835c:	4652      	mov	r2, sl
 800835e:	4641      	mov	r1, r8
 8008360:	4638      	mov	r0, r7
 8008362:	47c8      	blx	r9
 8008364:	3001      	adds	r0, #1
 8008366:	d103      	bne.n	8008370 <_printf_common+0xac>
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008370:	3501      	adds	r5, #1
 8008372:	e7c6      	b.n	8008302 <_printf_common+0x3e>
 8008374:	18e1      	adds	r1, r4, r3
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	2030      	movs	r0, #48	@ 0x30
 800837a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800837e:	4422      	add	r2, r4
 8008380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008388:	3302      	adds	r3, #2
 800838a:	e7c7      	b.n	800831c <_printf_common+0x58>
 800838c:	2301      	movs	r3, #1
 800838e:	4622      	mov	r2, r4
 8008390:	4641      	mov	r1, r8
 8008392:	4638      	mov	r0, r7
 8008394:	47c8      	blx	r9
 8008396:	3001      	adds	r0, #1
 8008398:	d0e6      	beq.n	8008368 <_printf_common+0xa4>
 800839a:	3601      	adds	r6, #1
 800839c:	e7d9      	b.n	8008352 <_printf_common+0x8e>
	...

080083a0 <_printf_i>:
 80083a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	7e0f      	ldrb	r7, [r1, #24]
 80083a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a8:	2f78      	cmp	r7, #120	@ 0x78
 80083aa:	4691      	mov	r9, r2
 80083ac:	4680      	mov	r8, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	469a      	mov	sl, r3
 80083b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083b6:	d807      	bhi.n	80083c8 <_printf_i+0x28>
 80083b8:	2f62      	cmp	r7, #98	@ 0x62
 80083ba:	d80a      	bhi.n	80083d2 <_printf_i+0x32>
 80083bc:	2f00      	cmp	r7, #0
 80083be:	f000 80d2 	beq.w	8008566 <_printf_i+0x1c6>
 80083c2:	2f58      	cmp	r7, #88	@ 0x58
 80083c4:	f000 80b9 	beq.w	800853a <_printf_i+0x19a>
 80083c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083d0:	e03a      	b.n	8008448 <_printf_i+0xa8>
 80083d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083d6:	2b15      	cmp	r3, #21
 80083d8:	d8f6      	bhi.n	80083c8 <_printf_i+0x28>
 80083da:	a101      	add	r1, pc, #4	@ (adr r1, 80083e0 <_printf_i+0x40>)
 80083dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083e0:	08008439 	.word	0x08008439
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	080083c9 	.word	0x080083c9
 80083ec:	080083c9 	.word	0x080083c9
 80083f0:	080083c9 	.word	0x080083c9
 80083f4:	080083c9 	.word	0x080083c9
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	080083c9 	.word	0x080083c9
 8008400:	080083c9 	.word	0x080083c9
 8008404:	080083c9 	.word	0x080083c9
 8008408:	080083c9 	.word	0x080083c9
 800840c:	0800854d 	.word	0x0800854d
 8008410:	08008477 	.word	0x08008477
 8008414:	08008507 	.word	0x08008507
 8008418:	080083c9 	.word	0x080083c9
 800841c:	080083c9 	.word	0x080083c9
 8008420:	0800856f 	.word	0x0800856f
 8008424:	080083c9 	.word	0x080083c9
 8008428:	08008477 	.word	0x08008477
 800842c:	080083c9 	.word	0x080083c9
 8008430:	080083c9 	.word	0x080083c9
 8008434:	0800850f 	.word	0x0800850f
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6032      	str	r2, [r6, #0]
 8008440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008448:	2301      	movs	r3, #1
 800844a:	e09d      	b.n	8008588 <_printf_i+0x1e8>
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1d19      	adds	r1, r3, #4
 8008452:	6031      	str	r1, [r6, #0]
 8008454:	0606      	lsls	r6, r0, #24
 8008456:	d501      	bpl.n	800845c <_printf_i+0xbc>
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	e003      	b.n	8008464 <_printf_i+0xc4>
 800845c:	0645      	lsls	r5, r0, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0xb8>
 8008460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008464:	2d00      	cmp	r5, #0
 8008466:	da03      	bge.n	8008470 <_printf_i+0xd0>
 8008468:	232d      	movs	r3, #45	@ 0x2d
 800846a:	426d      	negs	r5, r5
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008470:	4859      	ldr	r0, [pc, #356]	@ (80085d8 <_printf_i+0x238>)
 8008472:	230a      	movs	r3, #10
 8008474:	e011      	b.n	800849a <_printf_i+0xfa>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	6833      	ldr	r3, [r6, #0]
 800847a:	0608      	lsls	r0, r1, #24
 800847c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008480:	d402      	bmi.n	8008488 <_printf_i+0xe8>
 8008482:	0649      	lsls	r1, r1, #25
 8008484:	bf48      	it	mi
 8008486:	b2ad      	uxthmi	r5, r5
 8008488:	2f6f      	cmp	r7, #111	@ 0x6f
 800848a:	4853      	ldr	r0, [pc, #332]	@ (80085d8 <_printf_i+0x238>)
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	bf14      	ite	ne
 8008490:	230a      	movne	r3, #10
 8008492:	2308      	moveq	r3, #8
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800849a:	6866      	ldr	r6, [r4, #4]
 800849c:	60a6      	str	r6, [r4, #8]
 800849e:	2e00      	cmp	r6, #0
 80084a0:	bfa2      	ittt	ge
 80084a2:	6821      	ldrge	r1, [r4, #0]
 80084a4:	f021 0104 	bicge.w	r1, r1, #4
 80084a8:	6021      	strge	r1, [r4, #0]
 80084aa:	b90d      	cbnz	r5, 80084b0 <_printf_i+0x110>
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	d04b      	beq.n	8008548 <_printf_i+0x1a8>
 80084b0:	4616      	mov	r6, r2
 80084b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084b6:	fb03 5711 	mls	r7, r3, r1, r5
 80084ba:	5dc7      	ldrb	r7, [r0, r7]
 80084bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084c0:	462f      	mov	r7, r5
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	460d      	mov	r5, r1
 80084c6:	d9f4      	bls.n	80084b2 <_printf_i+0x112>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d10b      	bne.n	80084e4 <_printf_i+0x144>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	07df      	lsls	r7, r3, #31
 80084d0:	d508      	bpl.n	80084e4 <_printf_i+0x144>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	bfde      	ittt	le
 80084da:	2330      	movle	r3, #48	@ 0x30
 80084dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084e4:	1b92      	subs	r2, r2, r6
 80084e6:	6122      	str	r2, [r4, #16]
 80084e8:	f8cd a000 	str.w	sl, [sp]
 80084ec:	464b      	mov	r3, r9
 80084ee:	aa03      	add	r2, sp, #12
 80084f0:	4621      	mov	r1, r4
 80084f2:	4640      	mov	r0, r8
 80084f4:	f7ff fee6 	bl	80082c4 <_printf_common>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d14a      	bne.n	8008592 <_printf_i+0x1f2>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f043 0320 	orr.w	r3, r3, #32
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	4833      	ldr	r0, [pc, #204]	@ (80085dc <_printf_i+0x23c>)
 8008510:	2778      	movs	r7, #120	@ 0x78
 8008512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	6831      	ldr	r1, [r6, #0]
 800851a:	061f      	lsls	r7, r3, #24
 800851c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008520:	d402      	bmi.n	8008528 <_printf_i+0x188>
 8008522:	065f      	lsls	r7, r3, #25
 8008524:	bf48      	it	mi
 8008526:	b2ad      	uxthmi	r5, r5
 8008528:	6031      	str	r1, [r6, #0]
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	bf44      	itt	mi
 800852e:	f043 0320 	orrmi.w	r3, r3, #32
 8008532:	6023      	strmi	r3, [r4, #0]
 8008534:	b11d      	cbz	r5, 800853e <_printf_i+0x19e>
 8008536:	2310      	movs	r3, #16
 8008538:	e7ac      	b.n	8008494 <_printf_i+0xf4>
 800853a:	4827      	ldr	r0, [pc, #156]	@ (80085d8 <_printf_i+0x238>)
 800853c:	e7e9      	b.n	8008512 <_printf_i+0x172>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	f023 0320 	bic.w	r3, r3, #32
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	e7f6      	b.n	8008536 <_printf_i+0x196>
 8008548:	4616      	mov	r6, r2
 800854a:	e7bd      	b.n	80084c8 <_printf_i+0x128>
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	6961      	ldr	r1, [r4, #20]
 8008552:	1d18      	adds	r0, r3, #4
 8008554:	6030      	str	r0, [r6, #0]
 8008556:	062e      	lsls	r6, r5, #24
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	d501      	bpl.n	8008560 <_printf_i+0x1c0>
 800855c:	6019      	str	r1, [r3, #0]
 800855e:	e002      	b.n	8008566 <_printf_i+0x1c6>
 8008560:	0668      	lsls	r0, r5, #25
 8008562:	d5fb      	bpl.n	800855c <_printf_i+0x1bc>
 8008564:	8019      	strh	r1, [r3, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	4616      	mov	r6, r2
 800856c:	e7bc      	b.n	80084e8 <_printf_i+0x148>
 800856e:	6833      	ldr	r3, [r6, #0]
 8008570:	1d1a      	adds	r2, r3, #4
 8008572:	6032      	str	r2, [r6, #0]
 8008574:	681e      	ldr	r6, [r3, #0]
 8008576:	6862      	ldr	r2, [r4, #4]
 8008578:	2100      	movs	r1, #0
 800857a:	4630      	mov	r0, r6
 800857c:	f7f7 fe50 	bl	8000220 <memchr>
 8008580:	b108      	cbz	r0, 8008586 <_printf_i+0x1e6>
 8008582:	1b80      	subs	r0, r0, r6
 8008584:	6060      	str	r0, [r4, #4]
 8008586:	6863      	ldr	r3, [r4, #4]
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	2300      	movs	r3, #0
 800858c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008590:	e7aa      	b.n	80084e8 <_printf_i+0x148>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	4632      	mov	r2, r6
 8008596:	4649      	mov	r1, r9
 8008598:	4640      	mov	r0, r8
 800859a:	47d0      	blx	sl
 800859c:	3001      	adds	r0, #1
 800859e:	d0ad      	beq.n	80084fc <_printf_i+0x15c>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	079b      	lsls	r3, r3, #30
 80085a4:	d413      	bmi.n	80085ce <_printf_i+0x22e>
 80085a6:	68e0      	ldr	r0, [r4, #12]
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	4298      	cmp	r0, r3
 80085ac:	bfb8      	it	lt
 80085ae:	4618      	movlt	r0, r3
 80085b0:	e7a6      	b.n	8008500 <_printf_i+0x160>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4632      	mov	r2, r6
 80085b6:	4649      	mov	r1, r9
 80085b8:	4640      	mov	r0, r8
 80085ba:	47d0      	blx	sl
 80085bc:	3001      	adds	r0, #1
 80085be:	d09d      	beq.n	80084fc <_printf_i+0x15c>
 80085c0:	3501      	adds	r5, #1
 80085c2:	68e3      	ldr	r3, [r4, #12]
 80085c4:	9903      	ldr	r1, [sp, #12]
 80085c6:	1a5b      	subs	r3, r3, r1
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	dcf2      	bgt.n	80085b2 <_printf_i+0x212>
 80085cc:	e7eb      	b.n	80085a6 <_printf_i+0x206>
 80085ce:	2500      	movs	r5, #0
 80085d0:	f104 0619 	add.w	r6, r4, #25
 80085d4:	e7f5      	b.n	80085c2 <_printf_i+0x222>
 80085d6:	bf00      	nop
 80085d8:	08008921 	.word	0x08008921
 80085dc:	08008932 	.word	0x08008932

080085e0 <memmove>:
 80085e0:	4288      	cmp	r0, r1
 80085e2:	b510      	push	{r4, lr}
 80085e4:	eb01 0402 	add.w	r4, r1, r2
 80085e8:	d902      	bls.n	80085f0 <memmove+0x10>
 80085ea:	4284      	cmp	r4, r0
 80085ec:	4623      	mov	r3, r4
 80085ee:	d807      	bhi.n	8008600 <memmove+0x20>
 80085f0:	1e43      	subs	r3, r0, #1
 80085f2:	42a1      	cmp	r1, r4
 80085f4:	d008      	beq.n	8008608 <memmove+0x28>
 80085f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085fe:	e7f8      	b.n	80085f2 <memmove+0x12>
 8008600:	4402      	add	r2, r0
 8008602:	4601      	mov	r1, r0
 8008604:	428a      	cmp	r2, r1
 8008606:	d100      	bne.n	800860a <memmove+0x2a>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800860e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008612:	e7f7      	b.n	8008604 <memmove+0x24>

08008614 <_sbrk_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d06      	ldr	r5, [pc, #24]	@ (8008630 <_sbrk_r+0x1c>)
 8008618:	2300      	movs	r3, #0
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	f000 f84c 	bl	80086bc <_sbrk>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_sbrk_r+0x1a>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_sbrk_r+0x1a>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	20018ff8 	.word	0x20018ff8

08008634 <memcpy>:
 8008634:	440a      	add	r2, r1
 8008636:	4291      	cmp	r1, r2
 8008638:	f100 33ff 	add.w	r3, r0, #4294967295
 800863c:	d100      	bne.n	8008640 <memcpy+0xc>
 800863e:	4770      	bx	lr
 8008640:	b510      	push	{r4, lr}
 8008642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800864a:	4291      	cmp	r1, r2
 800864c:	d1f9      	bne.n	8008642 <memcpy+0xe>
 800864e:	bd10      	pop	{r4, pc}

08008650 <_realloc_r>:
 8008650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	4680      	mov	r8, r0
 8008656:	4615      	mov	r5, r2
 8008658:	460c      	mov	r4, r1
 800865a:	b921      	cbnz	r1, 8008666 <_realloc_r+0x16>
 800865c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	4611      	mov	r1, r2
 8008662:	f7ff bc4b 	b.w	8007efc <_malloc_r>
 8008666:	b92a      	cbnz	r2, 8008674 <_realloc_r+0x24>
 8008668:	f7ff fbdc 	bl	8007e24 <_free_r>
 800866c:	2400      	movs	r4, #0
 800866e:	4620      	mov	r0, r4
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	f000 f81a 	bl	80086ac <_malloc_usable_size_r>
 8008678:	4285      	cmp	r5, r0
 800867a:	4606      	mov	r6, r0
 800867c:	d802      	bhi.n	8008684 <_realloc_r+0x34>
 800867e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008682:	d8f4      	bhi.n	800866e <_realloc_r+0x1e>
 8008684:	4629      	mov	r1, r5
 8008686:	4640      	mov	r0, r8
 8008688:	f7ff fc38 	bl	8007efc <_malloc_r>
 800868c:	4607      	mov	r7, r0
 800868e:	2800      	cmp	r0, #0
 8008690:	d0ec      	beq.n	800866c <_realloc_r+0x1c>
 8008692:	42b5      	cmp	r5, r6
 8008694:	462a      	mov	r2, r5
 8008696:	4621      	mov	r1, r4
 8008698:	bf28      	it	cs
 800869a:	4632      	movcs	r2, r6
 800869c:	f7ff ffca 	bl	8008634 <memcpy>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7ff fbbe 	bl	8007e24 <_free_r>
 80086a8:	463c      	mov	r4, r7
 80086aa:	e7e0      	b.n	800866e <_realloc_r+0x1e>

080086ac <_malloc_usable_size_r>:
 80086ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b0:	1f18      	subs	r0, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfbc      	itt	lt
 80086b6:	580b      	ldrlt	r3, [r1, r0]
 80086b8:	18c0      	addlt	r0, r0, r3
 80086ba:	4770      	bx	lr

080086bc <_sbrk>:
 80086bc:	4a04      	ldr	r2, [pc, #16]	@ (80086d0 <_sbrk+0x14>)
 80086be:	6811      	ldr	r1, [r2, #0]
 80086c0:	4603      	mov	r3, r0
 80086c2:	b909      	cbnz	r1, 80086c8 <_sbrk+0xc>
 80086c4:	4903      	ldr	r1, [pc, #12]	@ (80086d4 <_sbrk+0x18>)
 80086c6:	6011      	str	r1, [r2, #0]
 80086c8:	6810      	ldr	r0, [r2, #0]
 80086ca:	4403      	add	r3, r0
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	4770      	bx	lr
 80086d0:	20019008 	.word	0x20019008
 80086d4:	20019010 	.word	0x20019010

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
